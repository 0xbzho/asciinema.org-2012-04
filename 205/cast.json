[[1.013113,{"lines":{"0":[["bash-3.2$                                                                     ",{}]],"1":[["                                                                              ",{}]],"2":[["                                                                              ",{}]],"3":[["                                                                              ",{}]],"4":[["                                                                              ",{}]],"5":[["                                                                              ",{}]],"6":[["                                                                              ",{}]],"7":[["                                                                              ",{}]],"8":[["                                                                              ",{}]],"9":[["                                                                              ",{}]],"10":[["                                                                              ",{}]],"11":[["                                                                              ",{}]],"12":[["                                                                              ",{}]],"13":[["                                                                              ",{}]],"14":[["                                                                              ",{}]],"15":[["                                                                              ",{}]],"16":[["                                                                              ",{}]],"17":[["                                                                              ",{}]],"18":[["                                                                              ",{}]],"19":[["                                                                              ",{}]],"20":[["                                                                              ",{}]],"21":[["                                                                              ",{}]],"22":[["                                                                              ",{}]],"23":[["                                                                              ",{}]],"24":[["                                                                              ",{}]],"25":[["                                                                              ",{}]],"26":[["                                                                              ",{}]],"27":[["                                                                              ",{}]],"28":[["                                                                              ",{}]],"29":[["                                                                              ",{}]],"30":[["                                                                              ",{}]],"31":[["                                                                              ",{}]],"32":[["                                                                              ",{}]],"33":[["                                                                              ",{}]],"34":[["                                                                              ",{}]],"35":[["                                                                              ",{}]],"36":[["                                                                              ",{}]],"37":[["                                                                              ",{}]],"38":[["                                                                              ",{}]],"39":[["                                                                              ",{}]],"40":[["                                                                              ",{}]],"41":[["                                                                              ",{}]],"42":[["                                                                              ",{}]],"43":[["                                                                              ",{}]],"44":[["                                                                              ",{}]],"45":[["                                                                              ",{}]],"46":[["                                                                              ",{}]],"47":[["                                                                              ",{}]]},"cursor":{"x":10,"y":0,"visible":true}}],[0.610752,{"lines":{"0":[["bash-3.2$ p                                                                   ",{}]]},"cursor":{"x":11}}],[0.119954,{"lines":{"0":[["bash-3.2$ pr                                                                  ",{}]]},"cursor":{"x":12}}],[0.119911,{"lines":{"0":[["bash-3.2$ pry                                                                 ",{}]]},"cursor":{"x":13}}],[0.815905,{"cursor":{"x":0,"y":1}}],[0.199268,{"lines":{"1":[["[1] pry(main)>                                                                ",{}]]},"cursor":{"x":15}}],[3.112381,{"lines":{"1":[["[1] pry(main)> \"                                                              ",{}]]},"cursor":{"x":16}}],[0.568321,{"lines":{"1":[["[1] pry(main)> \"R                                                             ",{}]]},"cursor":{"x":17}}],[0.159826,{"lines":{"1":[["[1] pry(main)> \"Ru                                                            ",{}]]},"cursor":{"x":18}}],[0.088181,{"lines":{"1":[["[1] pry(main)> \"Rub                                                           ",{}]]},"cursor":{"x":19}}],[0.055979,{"lines":{"1":[["[1] pry(main)> \"Ruby                                                          ",{}]]},"cursor":{"x":20}}],[0.095997,{"cursor":{"x":21}}],[0.135809,{"lines":{"1":[["[1] pry(main)> \"Ruby f                                                        ",{}]]},"cursor":{"x":22}}],[0.056206,{"lines":{"1":[["[1] pry(main)> \"Ruby fo                                                       ",{}]]},"cursor":{"x":23}}],[0.079833,{"lines":{"1":[["[1] pry(main)> \"Ruby for                                                      ",{}]]},"cursor":{"x":24}}],[0.08010100000000001,{"cursor":{"x":25}}],[0.552045,{"lines":{"1":[["[1] pry(main)> \"Ruby for m                                                    ",{}]]},"cursor":{"x":26}}],[0.096011,{"lines":{"1":[["[1] pry(main)> \"Ruby for ma                                                   ",{}]]},"cursor":{"x":27}}],[0.087987,{"lines":{"1":[["[1] pry(main)> \"Ruby for mat                                                  ",{}]]},"cursor":{"x":28}}],[0.055879,{"lines":{"1":[["[1] pry(main)> \"Ruby for math                                                 ",{}]]},"cursor":{"x":29}}],[0.055855,{"cursor":{"x":30}}],[0.176122,{"lines":{"1":[["[1] pry(main)> \"Ruby for math p                                               ",{}]]},"cursor":{"x":31}}],[0.12012,{"lines":{"1":[["[1] pry(main)> \"Ruby for math pe                                              ",{}]]},"cursor":{"x":32}}],[0.112006,{"lines":{"1":[["[1] pry(main)> \"Ruby for math peo                                             ",{}]]},"cursor":{"x":33}}],[0.079733,{"lines":{"1":[["[1] pry(main)> \"Ruby for math peop                                            ",{}]]},"cursor":{"x":34}}],[0.096232,{"lines":{"1":[["[1] pry(main)> \"Ruby for math peopl                                           ",{}]]},"cursor":{"x":35}}],[0.09585100000000001,{"lines":{"1":[["[1] pry(main)> \"Ruby for math people                                          ",{}]]},"cursor":{"x":36}}],[0.399998,{"lines":{"1":[["[1] pry(main)> \"Ruby for math people.                                         ",{}]]},"cursor":{"x":37}}],[0.368192,{"lines":{"1":[["[1] pry(main)> \"Ruby for math people.\"                                        ",{}]]},"cursor":{"x":38}}],[0.439855,{"cursor":{"x":0,"y":2}}],[0.021333,{"lines":{"2":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Ruby for math people.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                    ",{}]]},"cursor":{"y":3}}],[0.000361,{"lines":{"3":[["[2] pry(main)>                                                                ",{}]]},"cursor":{"x":15}}],[3.058278,{"lines":{"3":[["[2] pry(main)> \"                                                              ",{}]]},"cursor":{"x":16}}],[1.415948,{"lines":{"3":[["[2] pry(main)> \"T                                                             ",{}]]},"cursor":{"x":17}}],[0.152053,{"lines":{"3":[["[2] pry(main)> \"Th                                                            ",{}]]},"cursor":{"x":18}}],[0.095919,{"lines":{"3":[["[2] pry(main)> \"The                                                           ",{}]]},"cursor":{"x":19}}],[0.064073,{"lines":{"3":[["[2] pry(main)> \"Ther                                                          ",{}]]},"cursor":{"x":20}}],[0.191953,{"lines":{"3":[["[2] pry(main)> \"There                                                         ",{}]]},"cursor":{"x":21}}],[0.327952,{"cursor":{"x":22}}],[0.112054,{"lines":{"3":[["[2] pry(main)> \"There a                                                       ",{}]]},"cursor":{"x":23}}],[0.04792,{"lines":{"3":[["[2] pry(main)> \"There ar                                                      ",{}]]},"cursor":{"x":24}}],[0.088118,{"lines":{"3":[["[2] pry(main)> \"There are                                                     ",{}]]},"cursor":{"x":25}}],[0.087866,{"cursor":{"x":26}}],[0.272059,{"lines":{"3":[["[2] pry(main)> \"There are t                                                   ",{}]]},"cursor":{"x":27}}],[0.06401900000000001,{"lines":{"3":[["[2] pry(main)> \"There are th                                                  ",{}]]},"cursor":{"x":28}}],[0.312022,{"lines":{"3":[["[2] pry(main)> \"There are thr                                                 ",{}]]},"cursor":{"x":29}}],[0.127999,{"lines":{"3":[["[2] pry(main)> \"There are thre                                                ",{}]]},"cursor":{"x":30}}],[0.159712,{"lines":{"3":[["[2] pry(main)> \"There are three                                               ",{}]]},"cursor":{"x":31}}],[0.06417100000000001,{"cursor":{"x":32}}],[0.088092,{"lines":{"3":[["[2] pry(main)> \"There are three m                                             ",{}]]},"cursor":{"x":33}}],[0.08795500000000001,{"lines":{"3":[["[2] pry(main)> \"There are three ma                                            ",{}]]},"cursor":{"x":34}}],[0.112039,{"lines":{"3":[["[2] pry(main)> \"There are three man                                           ",{}]]},"cursor":{"x":35}}],[0.335791,{"lines":{"3":[["[2] pry(main)> \"There are three ma                                            ",{}]]},"cursor":{"x":34}}],[0.216191,{"lines":{"3":[["[2] pry(main)> \"There are three mai                                           ",{}]]},"cursor":{"x":35}}],[0.032016,{"lines":{"3":[["[2] pry(main)> \"There are three main                                          ",{}]]},"cursor":{"x":36}}],[0.639922,{"cursor":{"x":37}}],[0.544003,{"lines":{"3":[["[2] pry(main)> \"There are three main v                                        ",{}]]},"cursor":{"x":38}}],[0.112029,{"lines":{"3":[["[2] pry(main)> \"There are three main va                                       ",{}]]},"cursor":{"x":39}}],[0.06398,{"lines":{"3":[["[2] pry(main)> \"There are three main var                                      ",{}]]},"cursor":{"x":40}}],[0.104005,{"lines":{"3":[["[2] pry(main)> \"There are three main vari                                     ",{}]]},"cursor":{"x":41}}],[0.047796,{"lines":{"3":[["[2] pry(main)> \"There are three main varia                                    ",{}]]},"cursor":{"x":42}}],[0.112332,{"lines":{"3":[["[2] pry(main)> \"There are three main variab                                   ",{}]]},"cursor":{"x":43}}],[0.047843,{"lines":{"3":[["[2] pry(main)> \"There are three main variabl                                  ",{}]]},"cursor":{"x":44}}],[0.088217,{"lines":{"3":[["[2] pry(main)> \"There are three main variable                                 ",{}]]},"cursor":{"x":45}}],[0.279963,{"cursor":{"x":46}}],[0.495826,{"lines":{"3":[["[2] pry(main)> \"There are three main variable '                               ",{}]]},"cursor":{"x":47}}],[0.136008,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 't                              ",{}]]},"cursor":{"x":48}}],[0.055905,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'th                             ",{}]]},"cursor":{"x":49}}],[0.08806899999999999,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'thi                            ",{}]]},"cursor":{"x":50}}],[0.047847,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'thin                           ",{}]]},"cursor":{"x":51}}],[0.040207,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'thing                          ",{}]]},"cursor":{"x":52}}],[0.095944,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things                         ",{}]]},"cursor":{"x":53}}],[0.111961,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things'                        ",{}]]},"cursor":{"x":54}}],[0.09578200000000001,{"cursor":{"x":55}}],[0.16027,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things' i                      ",{}]]},"cursor":{"x":56}}],[0.023722,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things' in                     ",{}]]},"cursor":{"x":57}}],[0.096263,{"cursor":{"x":58}}],[0.295894,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things' in R                   ",{}]]},"cursor":{"x":59}}],[0.152102,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things' in Ru                  ",{}]]},"cursor":{"x":60}}],[0.055972,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things' in Rub                 ",{}]]},"cursor":{"x":61}}],[0.056005,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things' in Ruby                ",{}]]},"cursor":{"x":62}}],[0.095972,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things' in Ruby:               ",{}]]},"cursor":{"x":63}}],[0.048246,{"cursor":{"x":64}}],[0.527747,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things' in Ruby: m             ",{}]]},"cursor":{"x":65}}],[0.072033,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things' in Ruby: me            ",{}]]},"cursor":{"x":66}}],[0.063902,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things' in Ruby: met           ",{}]]},"cursor":{"x":67}}],[0.06401999999999999,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things' in Ruby: meth          ",{}]]},"cursor":{"x":68}}],[0.02393,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things' in Ruby: methj         ",{}]]},"cursor":{"x":69}}],[0.024058,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things' in Ruby: methjo        ",{}]]},"cursor":{"x":70}}],[0.06378300000000001,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things' in Ruby: methjod       ",{}]]},"cursor":{"x":71}}],[0.007872000000000001,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things' in Ruby: methjods      ",{}]]},"cursor":{"x":72}}],[0.336295,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things' in Ruby: methjod       ",{}]]},"cursor":{"x":71}}],[0.103989,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things' in Ruby: methjo        ",{}]]},"cursor":{"x":70}}],[0.104,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things' in Ruby: methj         ",{}]]},"cursor":{"x":69}}],[0.128009,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things' in Ruby: meth          ",{}]]},"cursor":{"x":68}}],[0.360102,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things' in Ruby: metho         ",{}]]},"cursor":{"x":69}}],[0.055916,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things' in Ruby: method        ",{}]]},"cursor":{"x":70}}],[0.032099,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things' in Ruby: methods       ",{}]]},"cursor":{"x":71}}],[0.103887,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things' in Ruby: methods,      ",{}]]},"cursor":{"x":72}}],[0.06401,{"cursor":{"x":73}}],[1.224051,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things' in Ruby: methods, v    ",{}]]},"cursor":{"x":74}}],[0.087965,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things' in Ruby: methods, va   ",{}]]},"cursor":{"x":75}}],[0.047991,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things' in Ruby: methods, var  ",{}]]},"cursor":{"x":76}}],[0.096042,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things' in Ruby: methods, vari ",{}]]},"cursor":{"x":77}}],[0.063984,{"lines":{"3":[["[2] pry(main)> \"There are three main variable 'things' in Ruby: methods, varia",{}]]},"cursor":{"x":0,"y":4}}],[0.07983700000000001,{"lines":{"4":[["b                                                                             ",{}]]},"cursor":{"x":1}}],[0.055987,{"lines":{"4":[["bl                                                                            ",{}]]},"cursor":{"x":2}}],[0.088133,{"lines":{"4":[["ble                                                                           ",{}]]},"cursor":{"x":3}}],[0.071963,{"lines":{"4":[["bles                                                                          ",{}]]},"cursor":{"x":4}}],[0.09618,{"lines":{"4":[["bles,                                                                         ",{}]]},"cursor":{"x":5}}],[0.951835,{"cursor":{"x":6}}],[15.671535,{"lines":{"4":[["bles, a                                                                       ",{}]]},"cursor":{"x":7}}],[0.143971,{"lines":{"4":[["bles, an                                                                      ",{}]]},"cursor":{"x":8}}],[0.064098,{"lines":{"4":[["bles, and                                                                     ",{}]]},"cursor":{"x":9}}],[0.08791599999999999,{"cursor":{"x":10}}],[0.183837,{"lines":{"4":[["bles, and b                                                                   ",{}]]},"cursor":{"x":11}}],[0.056195,{"lines":{"4":[["bles, and bl                                                                  ",{}]]},"cursor":{"x":12}}],[0.184021,{"lines":{"4":[["bles, and blo                                                                 ",{}]]},"cursor":{"x":13}}],[0.072056,{"lines":{"4":[["bles, and bloc                                                                ",{}]]},"cursor":{"x":14}}],[0.095944,{"lines":{"4":[["bles, and block                                                               ",{}]]},"cursor":{"x":15}}],[0.015653,{"lines":{"4":[["bles, and blocks                                                              ",{}]]},"cursor":{"x":16}}],[0.07245500000000001,{"lines":{"4":[["bles, and blocks.                                                             ",{}]]},"cursor":{"x":17}}],[0.751839,{"lines":{"4":[["bles, and blocks.\"                                                            ",{}]]},"cursor":{"x":18}}],[3.079752,{"cursor":{"x":0,"y":5}}],[0.007867000000000001,{"lines":{"5":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are three main variable 'things' in Ruby: methods, variables, and bl",{"fg":2}]],"6":[["ocks.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                        ",{}]],"7":[["[3] pry(main)>                                                                ",{}]]},"cursor":{"x":15,"y":7}}],[0.824267,{"lines":{"7":[["[3] pry(main)> \"                                                              ",{}]]},"cursor":{"x":16}}],[0.088042,{"cursor":{"x":17}}],[0.559523,{"cursor":{"x":16}}],[21.959806,{"lines":{"7":[["[3] pry(main)> \"F                                                             ",{}]]},"cursor":{"x":17}}],[0.144018,{"lines":{"7":[["[3] pry(main)> \"Fu                                                            ",{}]]},"cursor":{"x":18}}],[0.055989,{"lines":{"7":[["[3] pry(main)> \"Fun                                                           ",{}]]},"cursor":{"x":19}}],[0.6798999999999999,{"lines":{"7":[["[3] pry(main)> \"Fu                                                            ",{}]]},"cursor":{"x":18}}],[0.151984,{"lines":{"7":[["[3] pry(main)> \"F                                                             ",{}]]},"cursor":{"x":17}}],[0.119992,{"lines":{"7":[["[3] pry(main)> \"                                                              ",{}]]},"cursor":{"x":16}}],[0.208119,{"lines":{"7":[["[3] pry(main)> \"m                                                             ",{}]]},"cursor":{"x":17}}],[0.06396300000000001,{"lines":{"7":[["[3] pry(main)> \"me                                                            ",{}]]},"cursor":{"x":18}}],[0.07201,{"lines":{"7":[["[3] pry(main)> \"met                                                           ",{}]]},"cursor":{"x":19}}],[0.055853,{"lines":{"7":[["[3] pry(main)> \"meth                                                          ",{}]]},"cursor":{"x":20}}],[0.048008,{"lines":{"7":[["[3] pry(main)> \"metho                                                         ",{}]]},"cursor":{"x":21}}],[0.08007300000000001,{"lines":{"7":[["[3] pry(main)> \"method                                                        ",{}]]},"cursor":{"x":22}}],[0.023723,{"lines":{"7":[["[3] pry(main)> \"methods                                                       ",{}]]},"cursor":{"x":23}}],[0.216099,{"lines":{"7":[["[3] pry(main)> \"method                                                        ",{}]]},"cursor":{"x":22}}],[0.296082,{"lines":{"7":[["[3] pry(main)> \"metho                                                         ",{}]]},"cursor":{"x":21}}],[0.136045,{"lines":{"7":[["[3] pry(main)> \"meth                                                          ",{}]]},"cursor":{"x":20}}],[0.119988,{"lines":{"7":[["[3] pry(main)> \"met                                                           ",{}]]},"cursor":{"x":19}}],[0.103955,{"lines":{"7":[["[3] pry(main)> \"me                                                            ",{}]]},"cursor":{"x":18}}],[0.135928,{"lines":{"7":[["[3] pry(main)> \"m                                                             ",{}]]},"cursor":{"x":17}}],[0.09618400000000001,{"lines":{"7":[["[3] pry(main)> \"                                                              ",{}]]},"cursor":{"x":16}}],[0.320022,{"lines":{"7":[["[3] pry(main)> \"M                                                             ",{}]]},"cursor":{"x":17}}],[0.135798,{"lines":{"7":[["[3] pry(main)> \"Me                                                            ",{}]]},"cursor":{"x":18}}],[0.072228,{"lines":{"7":[["[3] pry(main)> \"Met                                                           ",{}]]},"cursor":{"x":19}}],[0.063969,{"lines":{"7":[["[3] pry(main)> \"Meth                                                          ",{}]]},"cursor":{"x":20}}],[0.072016,{"lines":{"7":[["[3] pry(main)> \"Metho                                                         ",{}]]},"cursor":{"x":21}}],[0.047931,{"lines":{"7":[["[3] pry(main)> \"Method                                                        ",{}]]},"cursor":{"x":22}}],[0.072073,{"lines":{"7":[["[3] pry(main)> \"Methods                                                       ",{}]]},"cursor":{"x":23}}],[0.081387,{"cursor":{"x":24}}],[0.102601,{"lines":{"7":[["[3] pry(main)> \"Methods a                                                     ",{}]]},"cursor":{"x":25}}],[0.168023,{"lines":{"7":[["[3] pry(main)> \"Methods ar                                                    ",{}]]},"cursor":{"x":26}}],[0.07992200000000001,{"lines":{"7":[["[3] pry(main)> \"Methods are                                                   ",{}]]},"cursor":{"x":27}}],[0.11203,{"cursor":{"x":28}}],[0.095967,{"lines":{"7":[["[3] pry(main)> \"Methods are l                                                 ",{}]]},"cursor":{"x":29}}],[0.063957,{"lines":{"7":[["[3] pry(main)> \"Methods are li                                                ",{}]]},"cursor":{"x":30}}],[0.040336,{"lines":{"7":[["[3] pry(main)> \"Methods are lik                                               ",{}]]},"cursor":{"x":31}}],[0.111694,{"lines":{"7":[["[3] pry(main)> \"Methods are like                                              ",{}]]},"cursor":{"x":32}}],[0.047855,{"cursor":{"x":33}}],[0.144202,{"lines":{"7":[["[3] pry(main)> \"Methods are like m                                            ",{}]]},"cursor":{"x":34}}],[0.087963,{"lines":{"7":[["[3] pry(main)> \"Methods are like ma                                           ",{}]]},"cursor":{"x":35}}],[0.048031,{"lines":{"7":[["[3] pry(main)> \"Methods are like mat                                          ",{}]]},"cursor":{"x":36}}],[0.06400400000000001,{"lines":{"7":[["[3] pry(main)> \"Methods are like math                                         ",{}]]},"cursor":{"x":37}}],[0.079913,{"cursor":{"x":38}}],[0.144079,{"lines":{"7":[["[3] pry(main)> \"Methods are like math f                                       ",{}]]},"cursor":{"x":39}}],[0.095947,{"lines":{"7":[["[3] pry(main)> \"Methods are like math fu                                      ",{}]]},"cursor":{"x":40}}],[0.040094,{"lines":{"7":[["[3] pry(main)> \"Methods are like math fun                                     ",{}]]},"cursor":{"x":41}}],[0.047952,{"lines":{"7":[["[3] pry(main)> \"Methods are like math func                                    ",{}]]},"cursor":{"x":42}}],[0.064052,{"lines":{"7":[["[3] pry(main)> \"Methods are like math funct                                   ",{}]]},"cursor":{"x":43}}],[0.095904,{"lines":{"7":[["[3] pry(main)> \"Methods are like math functi                                  ",{}]]},"cursor":{"x":44}}],[0.056046,{"lines":{"7":[["[3] pry(main)> \"Methods are like math functio                                 ",{}]]},"cursor":{"x":45}}],[0.023635,{"lines":{"7":[["[3] pry(main)> \"Methods are like math function                                ",{}]]},"cursor":{"x":46}}],[0.088133,{"lines":{"7":[["[3] pry(main)> \"Methods are like math functions                               ",{}]]},"cursor":{"x":47}}],[0.175975,{"lines":{"7":[["[3] pry(main)> \"Methods are like math functions.                              ",{}]]},"cursor":{"x":48}}],[0.16825,{"cursor":{"x":49}}],[0.27996,{"lines":{"7":[["[3] pry(main)> \"Methods are like math functions. T                            ",{}]]},"cursor":{"x":50}}],[0.159925,{"lines":{"7":[["[3] pry(main)> \"Methods are like math functions. Th                           ",{}]]},"cursor":{"x":51}}],[0.103838,{"lines":{"7":[["[3] pry(main)> \"Methods are like math functions. The                          ",{}]]},"cursor":{"x":52}}],[0.112171,{"lines":{"7":[["[3] pry(main)> \"Methods are like math functions. They                         ",{}]]},"cursor":{"x":53}}],[0.056233,{"cursor":{"x":54}}],[0.415817,{"lines":{"7":[["[3] pry(main)> \"Methods are like math functions. They c                       ",{}]]},"cursor":{"x":55}}],[0.0559,{"lines":{"7":[["[3] pry(main)> \"Methods are like math functions. They ca                      ",{}]]},"cursor":{"x":56}}],[0.080095,{"lines":{"7":[["[3] pry(main)> \"Methods are like math functions. They can                     ",{}]]},"cursor":{"x":57}}],[0.119947,{"cursor":{"x":58}}],[0.184049,{"lines":{"7":[["[3] pry(main)> \"Methods are like math functions. They can t                   ",{}]]},"cursor":{"x":59}}],[0.04791,{"lines":{"7":[["[3] pry(main)> \"Methods are like math functions. They can ta                  ",{}]]},"cursor":{"x":60}}],[0.07237300000000001,{"lines":{"7":[["[3] pry(main)> \"Methods are like math functions. They can tak                 ",{}]]},"cursor":{"x":61}}],[0.079695,{"lines":{"7":[["[3] pry(main)> \"Methods are like math functions. They can take                ",{}]]},"cursor":{"x":62}}],[0.072018,{"cursor":{"x":63}}],[0.199974,{"lines":{"7":[["[3] pry(main)> \"Methods are like math functions. They can take a              ",{}]]},"cursor":{"x":64}}],[0.071932,{"lines":{"7":[["[3] pry(main)> \"Methods are like math functions. They can take ar             ",{}]]},"cursor":{"x":65}}],[0.039674,{"lines":{"7":[["[3] pry(main)> \"Methods are like math functions. They can take arg            ",{}]]},"cursor":{"x":66}}],[0.088657,{"lines":{"7":[["[3] pry(main)> \"Methods are like math functions. They can take argu           ",{}]]},"cursor":{"x":67}}],[0.183566,{"lines":{"7":[["[3] pry(main)> \"Methods are like math functions. They can take argum          ",{}]]},"cursor":{"x":68}}],[0.087991,{"lines":{"7":[["[3] pry(main)> \"Methods are like math functions. They can take argume         ",{}]]},"cursor":{"x":69}}],[0.08013000000000001,{"lines":{"7":[["[3] pry(main)> \"Methods are like math functions. They can take argumen        ",{}]]},"cursor":{"x":70}}],[0.11546,{"lines":{"7":[["[3] pry(main)> \"Methods are like math functions. They can take argument       ",{}]]},"cursor":{"x":71}}],[0.052342,{"lines":{"7":[["[3] pry(main)> \"Methods are like math functions. They can take arguments      ",{}]]},"cursor":{"x":72}}],[1.048249,{"lines":{"7":[["[3] pry(main)> \"Methods are like math functions. They can take arguments,     ",{}]]},"cursor":{"x":73}}],[0.24003,{"cursor":{"x":74}}],[0.127847,{"lines":{"7":[["[3] pry(main)> \"Methods are like math functions. They can take arguments, t   ",{}]]},"cursor":{"x":75}}],[0.063984,{"lines":{"7":[["[3] pry(main)> \"Methods are like math functions. They can take arguments, th  ",{}]]},"cursor":{"x":76}}],[0.088076,{"lines":{"7":[["[3] pry(main)> \"Methods are like math functions. They can take arguments, the ",{}]]},"cursor":{"x":77}}],[0.167996,{"lines":{"7":[["[3] pry(main)> \"Methods are like math functions. They can take arguments, then",{}]]},"cursor":{"x":0,"y":8}}],[0.191901,{"cursor":{"x":1}}],[0.928013,{"lines":{"8":[[" d                                                                            ",{}]]},"cursor":{"x":2}}],[0.079982,{"lines":{"8":[[" do                                                                           ",{}]]},"cursor":{"x":3}}],[0.095933,{"cursor":{"x":4}}],[0.088216,{"lines":{"8":[[" do s                                                                         ",{}]]},"cursor":{"x":5}}],[0.095904,{"lines":{"8":[[" do st                                                                        ",{}]]},"cursor":{"x":6}}],[0.087965,{"lines":{"8":[[" do stu                                                                       ",{}]]},"cursor":{"x":7}}],[0.09621399999999999,{"lines":{"8":[[" do stuf                                                                      ",{}]]},"cursor":{"x":8}}],[0.151828,{"lines":{"8":[[" do stuff                                                                     ",{}]]},"cursor":{"x":9}}],[0.079749,{"cursor":{"x":10}}],[0.064263,{"lines":{"8":[[" do stuff w                                                                   ",{}]]},"cursor":{"x":11}}],[0.11184,{"lines":{"8":[[" do stuff wi                                                                  ",{}]]},"cursor":{"x":12}}],[0.080079,{"lines":{"8":[[" do stuff wit                                                                 ",{}]]},"cursor":{"x":13}}],[0.079862,{"lines":{"8":[[" do stuff with                                                                ",{}]]},"cursor":{"x":14}}],[0.096176,{"cursor":{"x":15}}],[0.071828,{"lines":{"8":[[" do stuff with t                                                              ",{}]]},"cursor":{"x":16}}],[0.079985,{"lines":{"8":[[" do stuff with th                                                             ",{}]]},"cursor":{"x":17}}],[0.088184,{"lines":{"8":[[" do stuff with the                                                            ",{}]]},"cursor":{"x":18}}],[0.08000500000000001,{"cursor":{"x":19}}],[0.16801,{"lines":{"8":[[" do stuff with the a                                                          ",{}]]},"cursor":{"x":20}}],[0.088005,{"lines":{"8":[[" do stuff with the ar                                                         ",{}]]},"cursor":{"x":21}}],[0.095929,{"lines":{"8":[[" do stuff with the arg                                                        ",{}]]},"cursor":{"x":22}}],[0.088045,{"lines":{"8":[[" do stuff with the argu                                                       ",{}]]},"cursor":{"x":23}}],[0.184,{"lines":{"8":[[" do stuff with the argum                                                      ",{}]]},"cursor":{"x":24}}],[0.135957,{"lines":{"8":[[" do stuff with the argume                                                     ",{}]]},"cursor":{"x":25}}],[0.047875,{"lines":{"8":[[" do stuff with the argumen                                                    ",{}]]},"cursor":{"x":26}}],[0.08008999999999999,{"lines":{"8":[[" do stuff with the argument                                                   ",{}]]},"cursor":{"x":27}}],[0.056024,{"lines":{"8":[[" do stuff with the arguments                                                  ",{}]]},"cursor":{"x":28}}],[0.552033,{"cursor":{"x":29}}],[0.103906,{"lines":{"8":[[" do stuff with the arguments a                                                ",{}]]},"cursor":{"x":30}}],[0.135982,{"lines":{"8":[[" do stuff with the arguments an                                               ",{}]]},"cursor":{"x":31}}],[0.12811,{"lines":{"8":[[" do stuff with the arguments and                                              ",{}]]},"cursor":{"x":32}}],[0.759813,{"cursor":{"x":33}}],[0.30397,{"lines":{"8":[[" do stuff with the arguments and r                                            ",{}]]},"cursor":{"x":34}}],[0.071974,{"lines":{"8":[[" do stuff with the arguments and re                                           ",{}]]},"cursor":{"x":35}}],[0.09612800000000001,{"lines":{"8":[[" do stuff with the arguments and ret                                          ",{}]]},"cursor":{"x":36}}],[0.096065,{"lines":{"8":[[" do stuff with the arguments and retu                                         ",{}]]},"cursor":{"x":37}}],[0.079917,{"lines":{"8":[[" do stuff with the arguments and retur                                        ",{}]]},"cursor":{"x":38}}],[0.104087,{"lines":{"8":[[" do stuff with the arguments and return                                       ",{}]]},"cursor":{"x":39}}],[0.07996,{"cursor":{"x":40}}],[0.375909,{"lines":{"8":[[" do stuff with the arguments and return a                                     ",{}]]},"cursor":{"x":41}}],[0.08001800000000001,{"cursor":{"x":42}}],[0.208086,{"lines":{"8":[[" do stuff with the arguments and return a n                                   ",{}]]},"cursor":{"x":43}}],[0.087994,{"lines":{"8":[[" do stuff with the arguments and return a ne                                  ",{}]]},"cursor":{"x":44}}],[0.032001,{"lines":{"8":[[" do stuff with the arguments and return a new                                 ",{}]]},"cursor":{"x":45}}],[0.103998,{"cursor":{"x":46}}],[0.575975,{"lines":{"8":[[" do stuff with the arguments and return a new v                               ",{}]]},"cursor":{"x":47}}],[0.047994,{"lines":{"8":[[" do stuff with the arguments and return a new va                              ",{}]]},"cursor":{"x":48}}],[0.120238,{"lines":{"8":[[" do stuff with the arguments and return a new val                             ",{}]]},"cursor":{"x":49}}],[0.055816,{"lines":{"8":[[" do stuff with the arguments and return a new valu                            ",{}]]},"cursor":{"x":50}}],[0.087683,{"lines":{"8":[[" do stuff with the arguments and return a new value                           ",{}]]},"cursor":{"x":51}}],[0.160205,{"lines":{"8":[[" do stuff with the arguments and return a new value.                          ",{}]]},"cursor":{"x":52}}],[0.280027,{"lines":{"8":[[" do stuff with the arguments and return a new value.\"                         ",{}]]},"cursor":{"x":53}}],[0.311962,{"cursor":{"x":0,"y":9}}],[0.003258,{"lines":{"9":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Methods are like math functions. They can take arguments, then do stuff wi",{"fg":2}]],"10":[["th the arguments and return a new value.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                     ",{}]],"11":[["[4] pry(main)>                                                                ",{}]]},"cursor":{"x":15,"y":11}}],[0.628739,{"lines":{"11":[["[4] pry(main)> \"                                                              ",{}]]},"cursor":{"x":16}}],[0.815962,{"lines":{"11":[["[4] pry(main)> \"\"                                                             ",{}]]},"cursor":{"x":17}}],[0.375972,{"cursor":{"x":16}}],[2.936015,{"lines":{"11":[["[4] pry(main)> \"H\"                                                            ",{}]]},"cursor":{"x":17}}],[0.159961,{"lines":{"11":[["[4] pry(main)> \"He\"                                                           ",{}]]},"cursor":{"x":18}}],[0.071946,{"lines":{"11":[["[4] pry(main)> \"Her\"                                                          ",{}]]},"cursor":{"x":19}}],[0.120054,{"lines":{"11":[["[4] pry(main)> \"Here\"                                                         ",{}]]},"cursor":{"x":20}}],[0.088002,{"lines":{"11":[["[4] pry(main)> \"Here \"                                                        ",{}]]},"cursor":{"x":21}}],[0.063969,{"lines":{"11":[["[4] pry(main)> \"Here i\"                                                       ",{}]]},"cursor":{"x":22}}],[0.09601,{"lines":{"11":[["[4] pry(main)> \"Here is\"                                                      ",{}]]},"cursor":{"x":23}}],[0.09597799999999999,{"lines":{"11":[["[4] pry(main)> \"Here is \"                                                     ",{}]]},"cursor":{"x":24}}],[0.119747,{"lines":{"11":[["[4] pry(main)> \"Here is a\"                                                    ",{}]]},"cursor":{"x":25}}],[0.10446,{"lines":{"11":[["[4] pry(main)> \"Here is an\"                                                   ",{}]]},"cursor":{"x":26}}],[0.07951900000000001,{"lines":{"11":[["[4] pry(main)> \"Here is an \"                                                  ",{}]]},"cursor":{"x":27}}],[0.312109,{"lines":{"11":[["[4] pry(main)> \"Here is an e\"                                                 ",{}]]},"cursor":{"x":28}}],[0.09615899999999999,{"lines":{"11":[["[4] pry(main)> \"Here is an ex\"                                                ",{}]]},"cursor":{"x":29}}],[0.079883,{"lines":{"11":[["[4] pry(main)> \"Here is an exa\"                                               ",{}]]},"cursor":{"x":30}}],[0.087975,{"lines":{"11":[["[4] pry(main)> \"Here is an exam\"                                              ",{}]]},"cursor":{"x":31}}],[0.104164,{"lines":{"11":[["[4] pry(main)> \"Here is an examp\"                                             ",{}]]},"cursor":{"x":32}}],[0.079886,{"lines":{"11":[["[4] pry(main)> \"Here is an exampl\"                                            ",{}]]},"cursor":{"x":33}}],[0.104121,{"lines":{"11":[["[4] pry(main)> \"Here is an example\"                                           ",{}]]},"cursor":{"x":34}}],[0.05588,{"lines":{"11":[["[4] pry(main)> \"Here is an example \"                                          ",{}]]},"cursor":{"x":35}}],[0.079933,{"lines":{"11":[["[4] pry(main)> \"Here is an example m\"                                         ",{}]]},"cursor":{"x":36}}],[0.13496,{"lines":{"11":[["[4] pry(main)> \"Here is an example me\"                                        ",{}]]},"cursor":{"x":37}}],[0.065233,{"lines":{"11":[["[4] pry(main)> \"Here is an example met\"                                       ",{}]]},"cursor":{"x":38}}],[0.03175,{"lines":{"11":[["[4] pry(main)> \"Here is an example meth\"                                      ",{}]]},"cursor":{"x":39}}],[0.055819,{"lines":{"11":[["[4] pry(main)> \"Here is an example metho\"                                     ",{}]]},"cursor":{"x":40}}],[0.104175,{"lines":{"11":[["[4] pry(main)> \"Here is an example method\"                                    ",{}]]},"cursor":{"x":41}}],[0.104105,{"lines":{"11":[["[4] pry(main)> \"Here is an example method.\"                                   ",{}]]},"cursor":{"x":42}}],[0.424021,{"cursor":{"x":0,"y":12}}],[0.003076,{"lines":{"12":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here is an example method.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                               ",{}]],"13":[["[5] pry(main)>                                                                ",{}]]},"cursor":{"x":15,"y":13}}],[0.58902,{"lines":{"13":[["[5] pry(main)> d                                                              ",{}]]},"cursor":{"x":16}}],[0.103836,{"lines":{"13":[["[5] pry(main)> de                                                             ",{}]]},"cursor":{"x":17}}],[0.119952,{"lines":{"13":[["[5] pry(main)> def                                                            ",{}]]},"cursor":{"x":18}}],[0.023991,{"cursor":{"x":19}}],[0.528115,{"lines":{"13":[["[5] pry(main)> def a                                                          ",{}]]},"cursor":{"x":20}}],[0.503682,{"cursor":{"x":0,"y":14}}],[0.00273,{"lines":{"14":[["[5] pry(main)*                                                                ",{}]]},"cursor":{"x":17}}],[1.061621,{"lines":{"14":[["[5] pry(main)*   r                                                            ",{}]]},"cursor":{"x":18}}],[0.071974,{"lines":{"14":[["[5] pry(main)*   re                                                           ",{}]]},"cursor":{"x":19}}],[0.111958,{"lines":{"14":[["[5] pry(main)*   ret                                                          ",{}]]},"cursor":{"x":20}}],[0.11203,{"lines":{"14":[["[5] pry(main)*   retu                                                         ",{}]]},"cursor":{"x":21}}],[0.079966,{"lines":{"14":[["[5] pry(main)*   retur                                                        ",{}]]},"cursor":{"x":22}}],[0.080022,{"lines":{"14":[["[5] pry(main)*   return                                                       ",{}]]},"cursor":{"x":23}}],[0.104135,{"cursor":{"x":24}}],[0.215873,{"lines":{"14":[["[5] pry(main)*   return 5                                                     ",{}]]},"cursor":{"x":25}}],[0.439686,{"cursor":{"x":0,"y":15}}],[0.003132,{"lines":{"15":[["[5] pry(main)*                                                                ",{}]]},"cursor":{"x":17}}],[0.14114,{"lines":{"15":[["[5] pry(main)*   e                                                            ",{}]]},"cursor":{"x":18}}],[0.087917,{"lines":{"15":[["[5] pry(main)*   en                                                           ",{}]]},"cursor":{"x":19}}],[0.08806799999999999,{"lines":{"15":[["[5] pry(main)*   end                                                          ",{}]]},"cursor":{"x":20}}],[0.26395,{"cursor":{"x":0,"y":16}}],[0.003989,{"lines":{"15":[["[5] pry(main)* end                                                            ",{}]],"16":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"17":[["[6] pry(main)>                                                                ",{}]]},"cursor":{"x":15,"y":17}}],[0.500036,{"lines":{"17":[["[6] pry(main)> \"                                                              ",{}]]},"cursor":{"x":16}}],[1.127991,{"lines":{"17":[["[6] pry(main)> \"I                                                             ",{}]]},"cursor":{"x":17}}],[0.143983,{"lines":{"17":[["[6] pry(main)> \"It                                                            ",{}]]},"cursor":{"x":18}}],[0.072102,{"cursor":{"x":19}}],[0.319813,{"cursor":{"x":18}}],[0.135973,{"lines":{"17":[["[6] pry(main)> \"I                                                             ",{}]]},"cursor":{"x":17}}],[0.136014,{"lines":{"17":[["[6] pry(main)> \"                                                              ",{}]]},"cursor":{"x":16}}],[0.848095,{"lines":{"17":[["[6] pry(main)> \"H                                                             ",{}]]},"cursor":{"x":17}}],[0.09597,{"lines":{"17":[["[6] pry(main)> \"He                                                            ",{}]]},"cursor":{"x":18}}],[0.087948,{"lines":{"17":[["[6] pry(main)> \"Her                                                           ",{}]]},"cursor":{"x":19}}],[0.088019,{"lines":{"17":[["[6] pry(main)> \"Here                                                          ",{}]]},"cursor":{"x":20}}],[0.09604600000000001,{"lines":{"17":[["[6] pry(main)> \"Here,                                                         ",{}]]},"cursor":{"x":21}}],[0.08798400000000001,{"cursor":{"x":22}}],[0.08000400000000001,{"lines":{"17":[["[6] pry(main)> \"Here, t                                                       ",{}]]},"cursor":{"x":23}}],[0.079804,{"lines":{"17":[["[6] pry(main)> \"Here, th                                                      ",{}]]},"cursor":{"x":24}}],[0.09620099999999999,{"lines":{"17":[["[6] pry(main)> \"Here, the                                                     ",{}]]},"cursor":{"x":25}}],[0.088002,{"cursor":{"x":26}}],[0.055868,{"lines":{"17":[["[6] pry(main)> \"Here, the m                                                   ",{}]]},"cursor":{"x":27}}],[0.08806899999999999,{"lines":{"17":[["[6] pry(main)> \"Here, the me                                                  ",{}]]},"cursor":{"x":28}}],[0.016236,{"lines":{"17":[["[6] pry(main)> \"Here, the met                                                 ",{}]]},"cursor":{"x":29}}],[0.079792,{"lines":{"17":[["[6] pry(main)> \"Here, the meth                                                ",{}]]},"cursor":{"x":30}}],[0.055995,{"lines":{"17":[["[6] pry(main)> \"Here, the metho                                               ",{}]]},"cursor":{"x":31}}],[0.120067,{"lines":{"17":[["[6] pry(main)> \"Here, the method                                              ",{}]]},"cursor":{"x":32}}],[0.071937,{"cursor":{"x":33}}],[0.120003,{"lines":{"17":[["[6] pry(main)> \"Here, the method i                                            ",{}]]},"cursor":{"x":34}}],[0.111798,{"lines":{"17":[["[6] pry(main)> \"Here, the method is                                           ",{}]]},"cursor":{"x":35}}],[0.08011500000000001,{"cursor":{"x":36}}],[0.288115,{"lines":{"17":[["[6] pry(main)> \"Here, the method is c                                         ",{}]]},"cursor":{"x":37}}],[0.055879,{"lines":{"17":[["[6] pry(main)> \"Here, the method is ca                                        ",{}]]},"cursor":{"x":38}}],[0.07206700000000001,{"lines":{"17":[["[6] pry(main)> \"Here, the method is cal                                       ",{}]]},"cursor":{"x":39}}],[0.103821,{"lines":{"17":[["[6] pry(main)> \"Here, the method is call                                      ",{}]]},"cursor":{"x":40}}],[0.056247,{"lines":{"17":[["[6] pry(main)> \"Here, the method is calle                                     ",{}]]},"cursor":{"x":41}}],[0.071863,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called                                    ",{}]]},"cursor":{"x":42}}],[0.047898,{"cursor":{"x":43}}],[0.136127,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called '                                  ",{}]]},"cursor":{"x":44}}],[0.160028,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called 'a                                 ",{}]]},"cursor":{"x":45}}],[0.08795799999999999,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called 'a'                                ",{}]]},"cursor":{"x":46}}],[0.184043,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called 'a'.                               ",{}]]},"cursor":{"x":47}}],[0.079878,{"cursor":{"x":48}}],[1.111823,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called 'a'. I                             ",{}]]},"cursor":{"x":49}}],[0.143939,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called 'a'. It                            ",{}]]},"cursor":{"x":50}}],[0.072315,{"cursor":{"x":51}}],[0.287928,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called 'a'. It i                          ",{}]]},"cursor":{"x":52}}],[0.111897,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called 'a'. It is                         ",{}]]},"cursor":{"x":53}}],[0.039843,{"cursor":{"x":54}}],[0.608302,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called 'a'. It is e                       ",{}]]},"cursor":{"x":55}}],[0.071851,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called 'a'. It is eq                      ",{}]]},"cursor":{"x":56}}],[0.184279,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called 'a'. It is equ                     ",{}]]},"cursor":{"x":57}}],[0.159878,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called 'a'. It is equi                    ",{}]]},"cursor":{"x":58}}],[0.127945,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called 'a'. It is equiv                   ",{}]]},"cursor":{"x":59}}],[0.152033,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called 'a'. It is equiva                  ",{}]]},"cursor":{"x":60}}],[0.239957,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called 'a'. It is equival                 ",{}]]},"cursor":{"x":61}}],[0.112019,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called 'a'. It is equivale                ",{}]]},"cursor":{"x":62}}],[0.05606,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called 'a'. It is equivalen               ",{}]]},"cursor":{"x":63}}],[0.095874,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called 'a'. It is equivalent              ",{}]]},"cursor":{"x":64}}],[0.167716,{"cursor":{"x":65}}],[0.319976,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called 'a'. It is equivalent t            ",{}]]},"cursor":{"x":66}}],[0.103964,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called 'a'. It is equivalent to           ",{}]]},"cursor":{"x":67}}],[0.048018,{"cursor":{"x":68}}],[0.136315,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called 'a'. It is equivalent to w         ",{}]]},"cursor":{"x":69}}],[0.08794299999999999,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called 'a'. It is equivalent to wr        ",{}]]},"cursor":{"x":70}}],[0.136131,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called 'a'. It is equivalent to wri       ",{}]]},"cursor":{"x":71}}],[0.103825,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called 'a'. It is equivalent to writ      ",{}]]},"cursor":{"x":72}}],[0.112176,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called 'a'. It is equivalent to writi     ",{}]]},"cursor":{"x":73}}],[0.031986,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called 'a'. It is equivalent to writin    ",{}]]},"cursor":{"x":74}}],[0.056064,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called 'a'. It is equivalent to writing   ",{}]]},"cursor":{"x":75}}],[0.055703,{"cursor":{"x":76}}],[0.152254,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called 'a'. It is equivalent to writing t ",{}]]},"cursor":{"x":77}}],[0.07184599999999999,{"lines":{"17":[["[6] pry(main)> \"Here, the method is called 'a'. It is equivalent to writing th",{}]]},"cursor":{"x":0,"y":18}}],[0.1201,{"lines":{"18":[["e                                                                             ",{}]]},"cursor":{"x":1}}],[0.064082,{"cursor":{"x":2}}],[0.111926,{"lines":{"18":[["e f                                                                           ",{}]]},"cursor":{"x":3}}],[0.08795799999999999,{"lines":{"18":[["e fo                                                                          ",{}]]},"cursor":{"x":4}}],[0.08802599999999999,{"lines":{"18":[["e fol                                                                         ",{}]]},"cursor":{"x":5}}],[0.144002,{"lines":{"18":[["e foll                                                                        ",{}]]},"cursor":{"x":6}}],[0.160011,{"lines":{"18":[["e follo                                                                       ",{}]]},"cursor":{"x":7}}],[0.127885,{"lines":{"18":[["e follow                                                                      ",{}]]},"cursor":{"x":8}}],[0.064128,{"lines":{"18":[["e followi                                                                     ",{}]]},"cursor":{"x":9}}],[0.031913,{"lines":{"18":[["e followin                                                                    ",{}]]},"cursor":{"x":10}}],[0.095858,{"lines":{"18":[["e following                                                                   ",{}]]},"cursor":{"x":11}}],[0.320091,{"cursor":{"x":12}}],[0.152095,{"lines":{"18":[["e following m                                                                 ",{}]]},"cursor":{"x":13}}],[0.191926,{"lines":{"18":[["e following ma                                                                ",{}]]},"cursor":{"x":14}}],[0.18405,{"lines":{"18":[["e following mat                                                               ",{}]]},"cursor":{"x":15}}],[0.08780200000000001,{"lines":{"18":[["e following math                                                              ",{}]]},"cursor":{"x":16}}],[0.072204,{"cursor":{"x":17}}],[0.928018,{"lines":{"18":[["e following math f                                                            ",{}]]},"cursor":{"x":18}}],[0.111862,{"lines":{"18":[["e following math fu                                                           ",{}]]},"cursor":{"x":19}}],[0.047886,{"lines":{"18":[["e following math fun                                                          ",{}]]},"cursor":{"x":20}}],[0.06408800000000001,{"lines":{"18":[["e following math func                                                         ",{}]]},"cursor":{"x":21}}],[0.064023,{"lines":{"18":[["e following math funct                                                        ",{}]]},"cursor":{"x":22}}],[0.072104,{"lines":{"18":[["e following math functi                                                       ",{}]]},"cursor":{"x":23}}],[0.016587,{"lines":{"18":[["e following math functio                                                      ",{}]]},"cursor":{"x":24}}],[0.055392,{"lines":{"18":[["e following math function                                                     ",{}]]},"cursor":{"x":25}}],[0.207992,{"lines":{"18":[["e following math function:                                                    ",{}]]},"cursor":{"x":26}}],[0.079941,{"cursor":{"x":27}}],[1.520001,{"lines":{"18":[["e following math function: a                                                  ",{}]]},"cursor":{"x":28}}],[0.311907,{"cursor":{"x":29}}],[0.127925,{"lines":{"18":[["e following math function: a =                                                ",{}]]},"cursor":{"x":30}}],[0.104049,{"cursor":{"x":31}}],[0.799962,{"lines":{"18":[["e following math function: a = 5                                              ",{}]]},"cursor":{"x":32}}],[0.464097,{"lines":{"18":[["e following math function: a = 5\"                                             ",{}]]},"cursor":{"x":33}}],[0.439946,{"lines":{"18":[["e following math function: a = 5                                              ",{}]]},"cursor":{"x":32}}],[0.192065,{"lines":{"18":[["e following math function: a = 5.                                             ",{}]]},"cursor":{"x":33}}],[0.095972,{"lines":{"18":[["e following math function: a = 5.\"                                            ",{}]]},"cursor":{"x":34}}],[0.944025,{"cursor":{"x":33}}],[0.415819,{"cursor":{"x":32}}],[0.160123,{"cursor":{"x":31}}],[0.303863,{"cursor":{"x":30}}],[0.135928,{"cursor":{"x":29}}],[0.144131,{"cursor":{"x":28}}],[0.6160600000000001,{"lines":{"18":[["e following math function: a( = 5.\"                                           ",{}]]},"cursor":{"x":29}}],[0.055995,{"lines":{"18":[["e following math function: a() = 5.\"                                          ",{}]]},"cursor":{"x":30}}],[1.183947,{"cursor":{"x":0,"y":19}}],[0.00346,{"lines":{"19":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, the method is called 'a'. It is equivalent to writing the following ",{"fg":2}]],"20":[["math function: a() = 5.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                      ",{}]],"21":[["[7] pry(main)>                                                                ",{}]]},"cursor":{"x":15,"y":21}}],[2.412461,{"lines":{"21":[["[7] pry(main)> \"                                                              ",{}]]},"cursor":{"x":16}}],[1.824037,{"lines":{"21":[["[7] pry(main)> \"L                                                             ",{}]]},"cursor":{"x":17}}],[0.191749,{"lines":{"21":[["[7] pry(main)> \"Le                                                            ",{}]]},"cursor":{"x":18}}],[0.072198,{"lines":{"21":[["[7] pry(main)> \"Let                                                           ",{}]]},"cursor":{"x":19}}],[0.039794,{"lines":{"21":[["[7] pry(main)> \"Let'                                                          ",{}]]},"cursor":{"x":20}}],[0.120216,{"lines":{"21":[["[7] pry(main)> \"Let's                                                         ",{}]]},"cursor":{"x":21}}],[0.08798,{"cursor":{"x":22}}],[0.26401,{"lines":{"21":[["[7] pry(main)> \"Let's w                                                       ",{}]]},"cursor":{"x":23}}],[0.071919,{"lines":{"21":[["[7] pry(main)> \"Let's wr                                                      ",{}]]},"cursor":{"x":24}}],[0.120692,{"lines":{"21":[["[7] pry(main)> \"Let's wri                                                     ",{}]]},"cursor":{"x":25}}],[0.071377,{"lines":{"21":[["[7] pry(main)> \"Let's writ                                                    ",{}]]},"cursor":{"x":26}}],[0.047698,{"lines":{"21":[["[7] pry(main)> \"Let's write                                                   ",{}]]},"cursor":{"x":27}}],[0.0882,{"cursor":{"x":28}}],[0.088064,{"lines":{"21":[["[7] pry(main)> \"Let's write a                                                 ",{}]]},"cursor":{"x":29}}],[0.111842,{"cursor":{"x":30}}],[0.120189,{"lines":{"21":[["[7] pry(main)> \"Let's write a m                                               ",{}]]},"cursor":{"x":31}}],[0.08780300000000001,{"lines":{"21":[["[7] pry(main)> \"Let's write a me                                              ",{}]]},"cursor":{"x":32}}],[0.056178,{"lines":{"21":[["[7] pry(main)> \"Let's write a met                                             ",{}]]},"cursor":{"x":33}}],[0.055968,{"lines":{"21":[["[7] pry(main)> \"Let's write a meth                                            ",{}]]},"cursor":{"x":34}}],[0.055965,{"lines":{"21":[["[7] pry(main)> \"Let's write a metho                                           ",{}]]},"cursor":{"x":35}}],[0.120044,{"cursor":{"x":36}}],[0.28788,{"cursor":{"x":35}}],[0.096125,{"lines":{"21":[["[7] pry(main)> \"Let's write a method                                          ",{}]]},"cursor":{"x":36}}],[0.047825,{"cursor":{"x":37}}],[0.176172,{"lines":{"21":[["[7] pry(main)> \"Let's write a method t                                        ",{}]]},"cursor":{"x":38}}],[0.07192800000000001,{"lines":{"21":[["[7] pry(main)> \"Let's write a method th                                       ",{}]]},"cursor":{"x":39}}],[0.10406,{"lines":{"21":[["[7] pry(main)> \"Let's write a method tha                                      ",{}]]},"cursor":{"x":40}}],[0.064044,{"lines":{"21":[["[7] pry(main)> \"Let's write a method that                                     ",{}]]},"cursor":{"x":41}}],[0.063856,{"cursor":{"x":42}}],[0.439962,{"lines":{"21":[["[7] pry(main)> \"Let's write a method that t                                   ",{}]]},"cursor":{"x":43}}],[0.13611,{"lines":{"21":[["[7] pry(main)> \"Let's write a method that ta                                  ",{}]]},"cursor":{"x":44}}],[0.128004,{"lines":{"21":[["[7] pry(main)> \"Let's write a method that tak                                 ",{}]]},"cursor":{"x":45}}],[0.06403300000000001,{"lines":{"21":[["[7] pry(main)> \"Let's write a method that take                                ",{}]]},"cursor":{"x":46}}],[0.055988,{"lines":{"21":[["[7] pry(main)> \"Let's write a method that takes                               ",{}]]},"cursor":{"x":47}}],[0.135978,{"cursor":{"x":48}}],[0.143811,{"lines":{"21":[["[7] pry(main)> \"Let's write a method that takes a                             ",{}]]},"cursor":{"x":49}}],[0.152137,{"lines":{"21":[["[7] pry(main)> \"Let's write a method that takes an                            ",{}]]},"cursor":{"x":50}}],[0.144025,{"cursor":{"x":51}}],[0.16,{"lines":{"21":[["[7] pry(main)> \"Let's write a method that takes an a                          ",{}]]},"cursor":{"x":52}}],[0.07206,{"lines":{"21":[["[7] pry(main)> \"Let's write a method that takes an ar                         ",{}]]},"cursor":{"x":53}}],[0.039781,{"lines":{"21":[["[7] pry(main)> \"Let's write a method that takes an arg                        ",{}]]},"cursor":{"x":54}}],[0.096257,{"lines":{"21":[["[7] pry(main)> \"Let's write a method that takes an argu                       ",{}]]},"cursor":{"x":55}}],[0.183912,{"lines":{"21":[["[7] pry(main)> \"Let's write a method that takes an argum                      ",{}]]},"cursor":{"x":56}}],[0.087869,{"lines":{"21":[["[7] pry(main)> \"Let's write a method that takes an argume                     ",{}]]},"cursor":{"x":57}}],[0.06413000000000001,{"lines":{"21":[["[7] pry(main)> \"Let's write a method that takes an argumen                    ",{}]]},"cursor":{"x":58}}],[0.06383900000000001,{"lines":{"21":[["[7] pry(main)> \"Let's write a method that takes an argument                   ",{}]]},"cursor":{"x":59}}],[0.120125,{"lines":{"21":[["[7] pry(main)> \"Let's write a method that takes an argument.                  ",{}]]},"cursor":{"x":60}}],[0.351997,{"lines":{"21":[["[7] pry(main)> \"Let's write a method that takes an argument.\"                 ",{}]]},"cursor":{"x":61}}],[1.263903,{"cursor":{"x":0,"y":22}}],[0.003237,{"lines":{"22":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Let's write a method that takes an argument.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                             ",{}]],"23":[["[8] pry(main)>                                                                ",{}]]},"cursor":{"x":15,"y":23}}],[0.236847,{"lines":{"23":[["[8] pry(main)> d                                                              ",{}]]},"cursor":{"x":16}}],[0.07987900000000001,{"lines":{"23":[["[8] pry(main)> de                                                             ",{}]]},"cursor":{"x":17}}],[0.112046,{"lines":{"23":[["[8] pry(main)> def                                                            ",{}]]},"cursor":{"x":18}}],[0.063956,{"cursor":{"x":19}}],[0.304095,{"lines":{"23":[["[8] pry(main)> def s                                                          ",{}]]},"cursor":{"x":20}}],[0.215979,{"lines":{"23":[["[8] pry(main)> def sw                                                         ",{}]]},"cursor":{"x":21}}],[0.44771,{"lines":{"23":[["[8] pry(main)> def s                                                          ",{}]]},"cursor":{"x":20}}],[0.048271,{"lines":{"23":[["[8] pry(main)> def sq                                                         ",{}]]},"cursor":{"x":21}}],[0.183811,{"lines":{"23":[["[8] pry(main)> def sqa                                                        ",{}]]},"cursor":{"x":22}}],[0.080235,{"lines":{"23":[["[8] pry(main)> def sqar                                                       ",{}]]},"cursor":{"x":23}}],[0.607835,{"lines":{"23":[["[8] pry(main)> def sqa                                                        ",{}]]},"cursor":{"x":22}}],[0.119934,{"lines":{"23":[["[8] pry(main)> def sq                                                         ",{}]]},"cursor":{"x":21}}],[0.216079,{"lines":{"23":[["[8] pry(main)> def squ                                                        ",{}]]},"cursor":{"x":22}}],[0.096053,{"lines":{"23":[["[8] pry(main)> def squa                                                       ",{}]]},"cursor":{"x":23}}],[0.040035,{"lines":{"23":[["[8] pry(main)> def squar                                                      ",{}]]},"cursor":{"x":24}}],[0.063983,{"lines":{"23":[["[8] pry(main)> def square                                                     ",{}]]},"cursor":{"x":25}}],[0.391999,{"lines":{"23":[["[8] pry(main)> def square(                                                    ",{}]]},"cursor":{"x":26}}],[0.559898,{"lines":{"23":[["[8] pry(main)> def square(x                                                   ",{}]]},"cursor":{"x":27}}],[0.14405,{"lines":{"23":[["[8] pry(main)> def square(x)                                                  ",{}]]},"cursor":{"x":28}}],[0.223812,{"cursor":{"x":0,"y":24}}],[0.00609,{"lines":{"24":[["[8] pry(main)*                                                                ",{}]]},"cursor":{"x":17}}],[0.282322,{"lines":{"24":[["[8] pry(main)*   x                                                            ",{}]]},"cursor":{"x":18}}],[0.431662,{"lines":{"24":[["[8] pry(main)*                                                                ",{}]]},"cursor":{"x":17}}],[0.152073,{"lines":{"24":[["[8] pry(main)*   r                                                            ",{}]]},"cursor":{"x":18}}],[0.06399199999999999,{"lines":{"24":[["[8] pry(main)*   re                                                           ",{}]]},"cursor":{"x":19}}],[0.120066,{"lines":{"24":[["[8] pry(main)*   ret                                                          ",{}]]},"cursor":{"x":20}}],[0.119937,{"lines":{"24":[["[8] pry(main)*   retu                                                         ",{}]]},"cursor":{"x":21}}],[0.07208100000000001,{"lines":{"24":[["[8] pry(main)*   retur                                                        ",{}]]},"cursor":{"x":22}}],[0.080107,{"lines":{"24":[["[8] pry(main)*   return                                                       ",{}]]},"cursor":{"x":23}}],[0.095791,{"cursor":{"x":24}}],[0.128107,{"lines":{"24":[["[8] pry(main)*   return x                                                     ",{}]]},"cursor":{"x":25}}],[0.223933,{"lines":{"24":[["[8] pry(main)*   return x*                                                    ",{}]]},"cursor":{"x":26}}],[0.144067,{"lines":{"24":[["[8] pry(main)*   return x**                                                   ",{}]]},"cursor":{"x":27}}],[0.335873,{"lines":{"24":[["[8] pry(main)*   return x**2                                                  ",{}]]},"cursor":{"x":28}}],[0.223957,{"cursor":{"x":0,"y":25}}],[0.00304,{"lines":{"25":[["[8] pry(main)*                                                                ",{}]]},"cursor":{"x":17}}],[0.27704,{"lines":{"25":[["[8] pry(main)*   e                                                            ",{}]]},"cursor":{"x":18}}],[0.07220600000000001,{"lines":{"25":[["[8] pry(main)*   en                                                           ",{}]]},"cursor":{"x":19}}],[0.103749,{"lines":{"25":[["[8] pry(main)*   end                                                          ",{}]]},"cursor":{"x":20}}],[0.175916,{"cursor":{"x":0,"y":26}}],[0.003451,{"lines":{"25":[["[8] pry(main)* end                                                            ",{}]],"26":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"27":[["[9] pry(main)>                                                                ",{}]]},"cursor":{"x":15,"y":27}}],[0.604529,{"lines":{"27":[["[9] pry(main)> \"                                                              ",{}]]},"cursor":{"x":16}}],[2.320075,{"lines":{"27":[["[9] pry(main)> \"T                                                             ",{}]]},"cursor":{"x":17}}],[0.167958,{"lines":{"27":[["[9] pry(main)> \"Th                                                            ",{}]]},"cursor":{"x":18}}],[0.095731,{"lines":{"27":[["[9] pry(main)> \"The                                                           ",{}]]},"cursor":{"x":19}}],[0.096183,{"lines":{"27":[["[9] pry(main)> \"They                                                          ",{}]]},"cursor":{"x":20}}],[0.1199,{"cursor":{"x":21}}],[0.319965,{"cursor":{"x":20}}],[0.112112,{"lines":{"27":[["[9] pry(main)> \"The                                                           ",{}]]},"cursor":{"x":19}}],[0.136112,{"cursor":{"x":20}}],[0.095967,{"lines":{"27":[["[9] pry(main)> \"The m                                                         ",{}]]},"cursor":{"x":21}}],[0.07201399999999999,{"lines":{"27":[["[9] pry(main)> \"The me                                                        ",{}]]},"cursor":{"x":22}}],[0.055981,{"lines":{"27":[["[9] pry(main)> \"The met                                                       ",{}]]},"cursor":{"x":23}}],[0.047994,{"lines":{"27":[["[9] pry(main)> \"The meth                                                      ",{}]]},"cursor":{"x":24}}],[0.039968,{"lines":{"27":[["[9] pry(main)> \"The metho                                                     ",{}]]},"cursor":{"x":25}}],[0.112073,{"lines":{"27":[["[9] pry(main)> \"The method                                                    ",{}]]},"cursor":{"x":26}}],[0.247972,{"cursor":{"x":27}}],[0.415975,{"lines":{"27":[["[9] pry(main)> \"The method a                                                  ",{}]]},"cursor":{"x":28}}],[0.112282,{"lines":{"27":[["[9] pry(main)> \"The method ab                                                 ",{}]]},"cursor":{"x":29}}],[0.07972899999999999,{"lines":{"27":[["[9] pry(main)> \"The method abo                                                ",{}]]},"cursor":{"x":30}}],[0.351873,{"lines":{"27":[["[9] pry(main)> \"The method abov                                               ",{}]]},"cursor":{"x":31}}],[0.208006,{"lines":{"27":[["[9] pry(main)> \"The method above                                              ",{}]]},"cursor":{"x":32}}],[0.112121,{"lines":{"27":[["[9] pry(main)> \"The method above,                                             ",{}]]},"cursor":{"x":33}}],[0.143962,{"cursor":{"x":34}}],[0.144017,{"lines":{"27":[["[9] pry(main)> \"The method above, c                                           ",{}]]},"cursor":{"x":35}}],[0.023989,{"lines":{"27":[["[9] pry(main)> \"The method above, ca                                          ",{}]]},"cursor":{"x":36}}],[0.119974,{"lines":{"27":[["[9] pry(main)> \"The method above, cal                                         ",{}]]},"cursor":{"x":37}}],[0.15193,{"lines":{"27":[["[9] pry(main)> \"The method above, call                                        ",{}]]},"cursor":{"x":38}}],[0.048055,{"lines":{"27":[["[9] pry(main)> \"The method above, calle                                       ",{}]]},"cursor":{"x":39}}],[0.07169200000000001,{"lines":{"27":[["[9] pry(main)> \"The method above, called                                      ",{}]]},"cursor":{"x":40}}],[0.048181,{"cursor":{"x":41}}],[0.08010299999999999,{"lines":{"27":[["[9] pry(main)> \"The method above, called '                                    ",{}]]},"cursor":{"x":42}}],[0.144065,{"lines":{"27":[["[9] pry(main)> \"The method above, called 's                                   ",{}]]},"cursor":{"x":43}}],[0.311826,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'sw                                  ",{}]]},"cursor":{"x":44}}],[0.320152,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'swq                                 ",{}]]},"cursor":{"x":45}}],[0.119872,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'sw                                  ",{}]]},"cursor":{"x":44}}],[0.135986,{"lines":{"27":[["[9] pry(main)> \"The method above, called 's                                   ",{}]]},"cursor":{"x":43}}],[0.08004500000000001,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'sq                                  ",{}]]},"cursor":{"x":44}}],[0.095915,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'squ                                 ",{}]]},"cursor":{"x":45}}],[0.09614399999999999,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'squa                                ",{}]]},"cursor":{"x":46}}],[0.200011,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'squar                               ",{}]]},"cursor":{"x":47}}],[0.079831,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'square                              ",{}]]},"cursor":{"x":48}}],[0.136117,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'square'                             ",{}]]},"cursor":{"x":49}}],[0.320028,{"cursor":{"x":50}}],[0.38375,{"cursor":{"x":49}}],[0.208276,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'square',                            ",{}]]},"cursor":{"x":50}}],[0.095886,{"cursor":{"x":51}}],[0.136131,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'square', i                          ",{}]]},"cursor":{"x":52}}],[0.151967,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'square', is                         ",{}]]},"cursor":{"x":53}}],[0.055895,{"cursor":{"x":54}}],[0.287973,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'square', is e                       ",{}]]},"cursor":{"x":55}}],[0.072072,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'square', is eq                      ",{}]]},"cursor":{"x":56}}],[0.136222,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'square', is equ                     ",{}]]},"cursor":{"x":57}}],[0.13578,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'square', is equi                    ",{}]]},"cursor":{"x":58}}],[1.023979,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'square', is equiv                   ",{}]]},"cursor":{"x":59}}],[0.087931,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'square', is equiva                  ",{}]]},"cursor":{"x":60}}],[0.103739,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'square', is equival                 ",{}]]},"cursor":{"x":61}}],[0.128274,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'square', is equivale                ",{}]]},"cursor":{"x":62}}],[0.047877,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'square', is equivalen               ",{}]]},"cursor":{"x":63}}],[0.11244,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'square', is equivalent              ",{}]]},"cursor":{"x":64}}],[0.055708,{"cursor":{"x":65}}],[0.119994,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'square', is equivalent t            ",{}]]},"cursor":{"x":66}}],[0.015826,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'square', is equivalent to           ",{}]]},"cursor":{"x":67}}],[0.09606000000000001,{"cursor":{"x":68}}],[0.152019,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'square', is equivalent to t         ",{}]]},"cursor":{"x":69}}],[0.088098,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'square', is equivalent to th        ",{}]]},"cursor":{"x":70}}],[0.103921,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'square', is equivalent to the       ",{}]]},"cursor":{"x":71}}],[0.07997600000000001,{"cursor":{"x":72}}],[0.06396,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'square', is equivalent to the f     ",{}]]},"cursor":{"x":73}}],[0.07996200000000001,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'square', is equivalent to the fo    ",{}]]},"cursor":{"x":74}}],[0.056153,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'square', is equivalent to the fol   ",{}]]},"cursor":{"x":75}}],[0.16001,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'square', is equivalent to the foll  ",{}]]},"cursor":{"x":76}}],[0.151934,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'square', is equivalent to the follo ",{}]]},"cursor":{"x":77}}],[0.072078,{"lines":{"27":[["[9] pry(main)> \"The method above, called 'square', is equivalent to the follow",{}]]},"cursor":{"x":0,"y":28}}],[0.112089,{"lines":{"28":[["i                                                                             ",{}]]},"cursor":{"x":1}}],[0.039749,{"lines":{"28":[["in                                                                            ",{}]]},"cursor":{"x":2}}],[0.080155,{"lines":{"28":[["ing                                                                           ",{}]]},"cursor":{"x":3}}],[0.168096,{"lines":{"28":[["ing:                                                                          ",{}]]},"cursor":{"x":4}}],[0.079813,{"cursor":{"x":5}}],[1.368041,{"lines":{"28":[["ing: s                                                                        ",{}]]},"cursor":{"x":6}}],[0.207872,{"lines":{"28":[["ing: sq                                                                       ",{}]]},"cursor":{"x":7}}],[0.151944,{"lines":{"28":[["ing: squ                                                                      ",{}]]},"cursor":{"x":8}}],[0.11215,{"lines":{"28":[["ing: squa                                                                     ",{}]]},"cursor":{"x":9}}],[0.064024,{"lines":{"28":[["ing: squar                                                                    ",{}]]},"cursor":{"x":10}}],[0.071965,{"lines":{"28":[["ing: square                                                                   ",{}]]},"cursor":{"x":11}}],[0.23993,{"lines":{"28":[["ing: square(                                                                  ",{}]]},"cursor":{"x":12}}],[0.767957,{"lines":{"28":[["ing: square(x                                                                 ",{}]]},"cursor":{"x":13}}],[0.160025,{"lines":{"28":[["ing: square(x)                                                                ",{}]]},"cursor":{"x":14}}],[0.624072,{"cursor":{"x":15}}],[0.09580900000000001,{"lines":{"28":[["ing: square(x) =                                                              ",{}]]},"cursor":{"x":16}}],[0.088175,{"cursor":{"x":17}}],[0.184016,{"lines":{"28":[["ing: square(x) = x                                                            ",{}]]},"cursor":{"x":18}}],[0.639938,{"lines":{"28":[["ing: square(x) = x%                                                           ",{}]]},"cursor":{"x":19}}],[0.49592,{"lines":{"28":[["ing: square(x) = x                                                            ",{}]]},"cursor":{"x":18}}],[0.319971,{"lines":{"28":[["ing: square(x) = x^                                                           ",{}]]},"cursor":{"x":19}}],[0.160073,{"lines":{"28":[["ing: square(x) = x^2                                                          ",{}]]},"cursor":{"x":20}}],[1.591949,{"lines":{"28":[["ing: square(x) = x^2\"                                                         ",{}]]},"cursor":{"x":21}}],[0.359918,{"lines":{"28":[["ing: square(x) = x^2                                                          ",{}]]},"cursor":{"x":20}}],[0.200095,{"lines":{"28":[["ing: square(x) = x^2.                                                         ",{}]]},"cursor":{"x":21}}],[0.135978,{"lines":{"28":[["ing: square(x) = x^2.\"                                                        ",{}]]},"cursor":{"x":22}}],[0.39992,{"cursor":{"x":0,"y":29}}],[0.003372,{"lines":{"29":[["=> ",{}],["\"",{"fg":2,"bold":true}],["The method above, called 'square', is equivalent to the following: square(",{"fg":2}]],"30":[["x) = x^2.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{}]],"31":[["[10] pry(main)>                                                               ",{}]]},"cursor":{"x":16,"y":31}}],[2.996635,{"lines":{"31":[["[10] pry(main)> T                                                             ",{}]]},"cursor":{"x":17}}],[0.271961,{"lines":{"31":[["[10] pry(main)> To                                                            ",{}]]},"cursor":{"x":18}}],[0.208029,{"cursor":{"x":19}}],[0.135993,{"lines":{"31":[["[10] pry(main)> To c                                                          ",{}]]},"cursor":{"x":20}}],[0.063844,{"lines":{"31":[["[10] pry(main)> To ca                                                         ",{}]]},"cursor":{"x":21}}],[0.031803,{"lines":{"31":[["[10] pry(main)> To cal                                                        ",{}]]},"cursor":{"x":22}}],[0.152085,{"lines":{"31":[["[10] pry(main)> To call                                                       ",{}]]},"cursor":{"x":23}}],[0.144189,{"cursor":{"x":24}}],[0.287756,{"cursor":{"x":23}}],[0.127889,{"lines":{"31":[["[10] pry(main)> To cal                                                        ",{}]]},"cursor":{"x":22}}],[0.500405,{"lines":{"31":[["[10] pry(main)> To ca                                                         ",{}]]},"cursor":{"x":21}}],[0.083426,{"lines":{"31":[["[10] pry(main)> To c                                                          ",{}]]},"cursor":{"x":20}}],[0.083274,{"lines":{"31":[["[10] pry(main)> To                                                            ",{}]]},"cursor":{"x":19}}],[0.08346199999999999,{"cursor":{"x":18}}],[0.08354,{"lines":{"31":[["[10] pry(main)> T                                                             ",{}]]},"cursor":{"x":17}}],[0.083325,{"lines":{"31":[["[10] pry(main)>                                                               ",{}]]},"cursor":{"x":16}}],[0.08343200000000001,{}],[0.199727,{"lines":{"31":[["[10] pry(main)> \"                                                             ",{}]]},"cursor":{"x":17}}],[0.103753,{"cursor":{"x":18}}],[0.399931,{"cursor":{"x":17}}],[0.143875,{"lines":{"31":[["[10] pry(main)>                                                               ",{}]]},"cursor":{"x":16}}],[0.480206,{"lines":{"31":[["[10] pry(main)> \"                                                             ",{}]]},"cursor":{"x":17}}],[0.304032,{"lines":{"31":[["[10] pry(main)> \"T                                                            ",{}]]},"cursor":{"x":18}}],[0.215923,{"lines":{"31":[["[10] pry(main)> \"To                                                           ",{}]]},"cursor":{"x":19}}],[0.103946,{"cursor":{"x":20}}],[0.128047,{"lines":{"31":[["[10] pry(main)> \"To c                                                         ",{}]]},"cursor":{"x":21}}],[0.048044,{"lines":{"31":[["[10] pry(main)> \"To ca                                                        ",{}]]},"cursor":{"x":22}}],[0.047766,{"lines":{"31":[["[10] pry(main)> \"To cal                                                       ",{}]]},"cursor":{"x":23}}],[0.120138,{"lines":{"31":[["[10] pry(main)> \"To call                                                      ",{}]]},"cursor":{"x":24}}],[0.064086,{"cursor":{"x":25}}],[0.055945,{"lines":{"31":[["[10] pry(main)> \"To call a                                                    ",{}]]},"cursor":{"x":26}}],[0.120041,{"cursor":{"x":27}}],[0.080138,{"lines":{"31":[["[10] pry(main)> \"To call a m                                                  ",{}]]},"cursor":{"x":28}}],[0.111846,{"lines":{"31":[["[10] pry(main)> \"To call a me                                                 ",{}]]},"cursor":{"x":29}}],[0.05587,{"lines":{"31":[["[10] pry(main)> \"To call a met                                                ",{}]]},"cursor":{"x":30}}],[0.0242,{"lines":{"31":[["[10] pry(main)> \"To call a meth                                               ",{}]]},"cursor":{"x":31}}],[0.063989,{"lines":{"31":[["[10] pry(main)> \"To call a metho                                              ",{}]]},"cursor":{"x":32}}],[0.11974,{"lines":{"31":[["[10] pry(main)> \"To call a method                                             ",{}]]},"cursor":{"x":33}}],[0.168032,{"lines":{"31":[["[10] pry(main)> \"To call a method,                                            ",{}]]},"cursor":{"x":34}}],[0.104171,{"cursor":{"x":35}}],[0.191616,{"lines":{"31":[["[10] pry(main)> \"To call a method, s                                          ",{}]]},"cursor":{"x":36}}],[0.056281,{"lines":{"31":[["[10] pry(main)> \"To call a method, si                                         ",{}]]},"cursor":{"x":37}}],[0.056372,{"lines":{"31":[["[10] pry(main)> \"To call a method, sim                                        ",{}]]},"cursor":{"x":38}}],[0.119672,{"lines":{"31":[["[10] pry(main)> \"To call a method, simp                                       ",{}]]},"cursor":{"x":39}}],[0.06402099999999999,{"lines":{"31":[["[10] pry(main)> \"To call a method, simpl                                      ",{}]]},"cursor":{"x":40}}],[0.119898,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply                                     ",{}]]},"cursor":{"x":41}}],[1.792114,{"cursor":{"x":42}}],[0.247949,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply w                                   ",{}]]},"cursor":{"x":43}}],[0.112004,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply wr                                  ",{}]]},"cursor":{"x":44}}],[0.111911,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply wri                                 ",{}]]},"cursor":{"x":45}}],[0.080081,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply writ                                ",{}]]},"cursor":{"x":46}}],[0.055988,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply write                               ",{}]]},"cursor":{"x":47}}],[0.079831,{"cursor":{"x":48}}],[0.120138,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply write i                             ",{}]]},"cursor":{"x":49}}],[0.07203,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply write it                            ",{}]]},"cursor":{"x":50}}],[0.063982,{"cursor":{"x":51}}],[0.176017,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply write it l                          ",{}]]},"cursor":{"x":52}}],[0.055983,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply write it li                         ",{}]]},"cursor":{"x":53}}],[0.08020099999999999,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply write it lik                        ",{}]]},"cursor":{"x":54}}],[0.09581199999999999,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply write it like                       ",{}]]},"cursor":{"x":55}}],[0.055973,{"cursor":{"x":56}}],[0.263924,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply write it like y                     ",{}]]},"cursor":{"x":57}}],[0.072046,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply write it like yo                    ",{}]]},"cursor":{"x":58}}],[0.063822,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply write it like you                   ",{}]]},"cursor":{"x":59}}],[0.080202,{"cursor":{"x":60}}],[0.151925,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply write it like you w                 ",{}]]},"cursor":{"x":61}}],[0.088058,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply write it like you wo                ",{}]]},"cursor":{"x":62}}],[0.055989,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply write it like you wou               ",{}]]},"cursor":{"x":63}}],[0.119776,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply write it like you woul              ",{}]]},"cursor":{"x":64}}],[0.088106,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply write it like you would             ",{}]]},"cursor":{"x":65}}],[0.063911,{"cursor":{"x":66}}],[0.112211,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply write it like you would a           ",{}]]},"cursor":{"x":67}}],[0.088029,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply write it like you would an          ",{}]]},"cursor":{"x":68}}],[0.19195,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply write it like you would any         ",{}]]},"cursor":{"x":69}}],[0.056107,{"cursor":{"x":70}}],[0.159905,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply write it like you would any m       ",{}]]},"cursor":{"x":71}}],[0.319991,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply write it like you would any ma      ",{}]]},"cursor":{"x":72}}],[0.095972,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply write it like you would any mat     ",{}]]},"cursor":{"x":73}}],[0.063794,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply write it like you would any math    ",{}]]},"cursor":{"x":74}}],[0.088215,{"cursor":{"x":75}}],[0.120037,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply write it like you would any math f  ",{}]]},"cursor":{"x":76}}],[0.071963,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply write it like you would any math fu ",{}]]},"cursor":{"x":77}}],[0.055791,{"lines":{"31":[["[10] pry(main)> \"To call a method, simply write it like you would any math fun",{}]]},"cursor":{"x":0,"y":32}}],[0.056289,{"lines":{"32":[["c                                                                             ",{}]]},"cursor":{"x":1}}],[0.039845,{"lines":{"32":[["ct                                                                            ",{}]]},"cursor":{"x":2}}],[0.07996300000000001,{"lines":{"32":[["cti                                                                           ",{}]]},"cursor":{"x":3}}],[0.04003,{"lines":{"32":[["ctio                                                                          ",{}]]},"cursor":{"x":4}}],[0.039869,{"lines":{"32":[["ction                                                                         ",{}]]},"cursor":{"x":5}}],[0.240202,{"lines":{"32":[["ction:                                                                        ",{}]]},"cursor":{"x":6}}],[0.08003200000000001,{"cursor":{"x":7}}],[0.135974,{"lines":{"32":[["ction: \"                                                                      ",{}]]},"cursor":{"x":8}}],[0.367921,{"cursor":{"x":0,"y":33}}],[0.003284,{"lines":{"33":[["=> ",{}],["\"",{"fg":2,"bold":true}],["To call a method, simply write it like you would any math function: ",{"fg":2}],["\"",{"fg":2,"bold":true}],["     ",{}]],"34":[["[11] pry(main)>                                                               ",{}]]},"cursor":{"x":16,"y":34}}],[0.644763,{"lines":{"34":[["[11] pry(main)> s                                                             ",{}]]},"cursor":{"x":17}}],[0.463999,{"lines":{"34":[["[11] pry(main)> sq                                                            ",{}]]},"cursor":{"x":18}}],[0.143763,{"lines":{"34":[["[11] pry(main)> squ                                                           ",{}]]},"cursor":{"x":19}}],[0.080219,{"lines":{"34":[["[11] pry(main)> squa                                                          ",{}]]},"cursor":{"x":20}}],[0.048,{"lines":{"34":[["[11] pry(main)> squar                                                         ",{}]]},"cursor":{"x":21}}],[0.063828,{"lines":{"34":[["[11] pry(main)> square                                                        ",{}]]},"cursor":{"x":22}}],[0.304175,{"lines":{"34":[["[11] pry(main)> square(                                                       ",{}]]},"cursor":{"x":23}}],[0.167831,{"lines":{"34":[["[11] pry(main)> square(2                                                      ",{}]]},"cursor":{"x":24}}],[0.192116,{"lines":{"34":[["[11] pry(main)> square(2)                                                     ",{}]]},"cursor":{"x":25}}],[0.392012,{"cursor":{"x":0,"y":35}}],[0.003383,{"lines":{"35":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"36":[["[12] pry(main)>                                                               ",{}]]},"cursor":{"x":16,"y":36}}],[1.820607,{"lines":{"36":[["[12] pry(main)> s                                                             ",{}]]},"cursor":{"x":17}}],[0.327955,{"lines":{"36":[["[12] pry(main)> sq                                                            ",{}]]},"cursor":{"x":18}}],[0.135975,{"lines":{"36":[["[12] pry(main)> squ                                                           ",{}]]},"cursor":{"x":19}}],[0.088036,{"lines":{"36":[["[12] pry(main)> squr                                                          ",{}]]},"cursor":{"x":20}}],[0.031952,{"lines":{"36":[["[12] pry(main)> squre                                                         ",{}]]},"cursor":{"x":21}}],[0.351855,{"lines":{"36":[["[12] pry(main)> squre(                                                        ",{}]]},"cursor":{"x":22}}],[0.208161,{"lines":{"36":[["[12] pry(main)> squre(3                                                       ",{}]]},"cursor":{"x":23}}],[0.175886,{"lines":{"36":[["[12] pry(main)> squre(3)                                                      ",{}]]},"cursor":{"x":24}}],[0.232015,{"cursor":{"x":0,"y":37}}],[0.00338,{"lines":{"37":[["NoMethodError: undefined method `squre' for main:Object                       ",{}]],"38":[["from (pry):16:in `<main>'                                                     ",{}]],"39":[["[13] pry(main)>                                                               ",{}]]},"cursor":{"x":16,"y":39}}],[1.348532,{"lines":{"39":[["[13] pry(main)> squre(3)                                                      ",{}]]},"cursor":{"x":24}}],[0.216007,{"cursor":{"x":23}}],[0.487913,{"cursor":{"x":22}}],[0.136026,{"cursor":{"x":21}}],[0.128152,{"cursor":{"x":20}}],[0.127837,{"cursor":{"x":19}}],[0.10418,{"lines":{"39":[["[13] pry(main)> square(3)                                                     ",{}]]},"cursor":{"x":20}}],[0.087925,{"cursor":{"x":0,"y":40}}],[0.003882,{"lines":{"40":[["=> ",{}],["9",{"fg":4,"bold":true}],["                                                                          ",{}]],"41":[["[14] pry(main)>                                                               ",{}]]},"cursor":{"x":16,"y":41}}],[1.836074,{"lines":{"41":[["[14] pry(main)> \"                                                             ",{}]]},"cursor":{"x":17}}],[0.304066,{"lines":{"41":[["[14] pry(main)> \"N                                                            ",{}]]},"cursor":{"x":18}}],[0.159875,{"lines":{"41":[["[14] pry(main)> \"No                                                           ",{}]]},"cursor":{"x":19}}],[0.0798,{"lines":{"41":[["[14] pry(main)> \"Not                                                          ",{}]]},"cursor":{"x":20}}],[0.088378,{"lines":{"41":[["[14] pry(main)> \"Noti                                                         ",{}]]},"cursor":{"x":21}}],[0.143937,{"lines":{"41":[["[14] pry(main)> \"Notic                                                        ",{}]]},"cursor":{"x":22}}],[0.063889,{"lines":{"41":[["[14] pry(main)> \"Notice                                                       ",{}]]},"cursor":{"x":23}}],[0.07193099999999999,{"lines":{"41":[["[14] pry(main)> \"Notice,                                                      ",{}]]},"cursor":{"x":24}}],[0.18418,{"cursor":{"x":25}}],[2.239801,{"cursor":{"x":24}}],[0.119939,{"lines":{"41":[["[14] pry(main)> \"Notice                                                       ",{}]]},"cursor":{"x":23}}],[0.168015,{"cursor":{"x":24}}],[0.07217,{"lines":{"41":[["[14] pry(main)> \"Notice t                                                     ",{}]]},"cursor":{"x":25}}],[0.095957,{"lines":{"41":[["[14] pry(main)> \"Notice th                                                    ",{}]]},"cursor":{"x":26}}],[0.095999,{"lines":{"41":[["[14] pry(main)> \"Notice the                                                   ",{}]]},"cursor":{"x":27}}],[0.088002,{"cursor":{"x":28}}],[0.127976,{"lines":{"41":[["[14] pry(main)> \"Notice the e                                                 ",{}]]},"cursor":{"x":29}}],[0.06405,{"lines":{"41":[["[14] pry(main)> \"Notice the er                                                ",{}]]},"cursor":{"x":30}}],[0.143963,{"lines":{"41":[["[14] pry(main)> \"Notice the err                                               ",{}]]},"cursor":{"x":31}}],[0.112061,{"lines":{"41":[["[14] pry(main)> \"Notice the erro                                              ",{}]]},"cursor":{"x":32}}],[0.087967,{"lines":{"41":[["[14] pry(main)> \"Notice the error                                             ",{}]]},"cursor":{"x":33}}],[0.831973,{"cursor":{"x":34}}],[0.08794,{"lines":{"41":[["[14] pry(main)> \"Notice the error w                                           ",{}]]},"cursor":{"x":35}}],[0.111894,{"lines":{"41":[["[14] pry(main)> \"Notice the error wh                                          ",{}]]},"cursor":{"x":36}}],[0.055834,{"lines":{"41":[["[14] pry(main)> \"Notice the error whe                                         ",{}]]},"cursor":{"x":37}}],[0.096207,{"lines":{"41":[["[14] pry(main)> \"Notice the error when                                        ",{}]]},"cursor":{"x":38}}],[0.064024,{"cursor":{"x":39}}],[0.23986,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I                                      ",{}]]},"cursor":{"x":40}}],[0.072024,{"cursor":{"x":41}}],[3.408061,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I t                                    ",{}]]},"cursor":{"x":42}}],[0.136045,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I ty                                   ",{}]]},"cursor":{"x":43}}],[0.079888,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I typ                                  ",{}]]},"cursor":{"x":44}}],[0.10406,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I type                                 ",{}]]},"cursor":{"x":45}}],[0.104022,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I typed                                ",{}]]},"cursor":{"x":46}}],[0.03197,{"cursor":{"x":47}}],[0.791991,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I typed a                              ",{}]]},"cursor":{"x":48}}],[0.07202600000000001,{"cursor":{"x":49}}],[0.119676,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I typed a f                            ",{}]]},"cursor":{"x":50}}],[0.104287,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I typed a fu                           ",{}]]},"cursor":{"x":51}}],[0.06382,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I typed a fun                          ",{}]]},"cursor":{"x":52}}],[0.048197,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I typed a func                         ",{}]]},"cursor":{"x":53}}],[0.064166,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I typed a funct                        ",{}]]},"cursor":{"x":54}}],[0.063847,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I typed a functi                       ",{}]]},"cursor":{"x":55}}],[0.023802,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I typed a functio                      ",{}]]},"cursor":{"x":56}}],[0.040111,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I typed a function                     ",{}]]},"cursor":{"x":57}}],[0.127846,{"cursor":{"x":58}}],[0.176235,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I typed a function t                   ",{}]]},"cursor":{"x":59}}],[0.09597799999999999,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I typed a function th                  ",{}]]},"cursor":{"x":60}}],[0.207922,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I typed a function tha                 ",{}]]},"cursor":{"x":61}}],[0.063962,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I typed a function that                ",{}]]},"cursor":{"x":62}}],[0.063902,{"cursor":{"x":63}}],[0.200229,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I typed a function that d              ",{}]]},"cursor":{"x":64}}],[0.287952,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I typed a function that di             ",{}]]},"cursor":{"x":65}}],[0.080041,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I typed a function that did            ",{}]]},"cursor":{"x":66}}],[0.103774,{"cursor":{"x":67}}],[0.095954,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I typed a function that did n          ",{}]]},"cursor":{"x":68}}],[0.096243,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I typed a function that did no         ",{}]]},"cursor":{"x":69}}],[0.047807,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I typed a function that did not        ",{}]]},"cursor":{"x":70}}],[0.056155,{"cursor":{"x":71}}],[0.13625,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I typed a function that did not e      ",{}]]},"cursor":{"x":72}}],[0.111746,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I typed a function that did not ex     ",{}]]},"cursor":{"x":73}}],[0.103639,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I typed a function that did not exi    ",{}]]},"cursor":{"x":74}}],[0.160378,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I typed a function that did not exis   ",{}]]},"cursor":{"x":75}}],[0.055858,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I typed a function that did not exist  ",{}]]},"cursor":{"x":76}}],[0.103943,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I typed a function that did not exist. ",{}]]},"cursor":{"x":77}}],[0.264204,{"lines":{"41":[["[14] pry(main)> \"Notice the error when I typed a function that did not exist.\"",{}]]},"cursor":{"x":0,"y":42}}],[0.983847,{"cursor":{"y":43}}],[0.006735000000000001,{"lines":{"43":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Notice the error when I typed a function that did not exist.",{"fg":2}],["\"",{"fg":2,"bold":true}],["             ",{}]],"44":[["[15] pry(main)>                                                               ",{}]]},"cursor":{"x":16,"y":44}}],[0.649339,{"lines":{"44":[["[15] pry(main)> \"                                                             ",{}]]},"cursor":{"x":17}}],[0.8958930000000001,{"lines":{"44":[["[15] pry(main)> \"T                                                            ",{}]]},"cursor":{"x":18}}],[0.168075,{"lines":{"44":[["[15] pry(main)> \"Th                                                           ",{}]]},"cursor":{"x":19}}],[0.079913,{"lines":{"44":[["[15] pry(main)> \"The                                                          ",{}]]},"cursor":{"x":20}}],[0.104008,{"lines":{"44":[["[15] pry(main)> \"Ther                                                         ",{}]]},"cursor":{"x":21}}],[0.112077,{"lines":{"44":[["[15] pry(main)> \"There                                                        ",{}]]},"cursor":{"x":22}}],[0.127841,{"cursor":{"x":23}}],[0.15213,{"lines":{"44":[["[15] pry(main)> \"There a                                                      ",{}]]},"cursor":{"x":24}}],[0.080041,{"lines":{"44":[["[15] pry(main)> \"There ar                                                     ",{}]]},"cursor":{"x":25}}],[0.095973,{"lines":{"44":[["[15] pry(main)> \"There are                                                    ",{}]]},"cursor":{"x":26}}],[0.10398,{"cursor":{"x":27}}],[0.119999,{"lines":{"44":[["[15] pry(main)> \"There are m                                                  ",{}]]},"cursor":{"x":28}}],[0.143996,{"lines":{"44":[["[15] pry(main)> \"There are ma                                                 ",{}]]},"cursor":{"x":29}}],[0.159947,{"lines":{"44":[["[15] pry(main)> \"There are man                                                ",{}]]},"cursor":{"x":30}}],[0.096039,{"lines":{"44":[["[15] pry(main)> \"There are many                                               ",{}]]},"cursor":{"x":31}}],[0.063863,{"cursor":{"x":32}}],[0.152156,{"lines":{"44":[["[15] pry(main)> \"There are many e                                             ",{}]]},"cursor":{"x":33}}],[0.072021,{"lines":{"44":[["[15] pry(main)> \"There are many er                                            ",{}]]},"cursor":{"x":34}}],[0.151961,{"lines":{"44":[["[15] pry(main)> \"There are many err                                           ",{}]]},"cursor":{"x":35}}],[0.079997,{"lines":{"44":[["[15] pry(main)> \"There are many erro                                          ",{}]]},"cursor":{"x":36}}],[0.08000599999999999,{"lines":{"44":[["[15] pry(main)> \"There are many error                                         ",{}]]},"cursor":{"x":37}}],[0.223881,{"lines":{"44":[["[15] pry(main)> \"There are many erro                                          ",{}]]},"cursor":{"x":36}}],[0.167863,{"lines":{"44":[["[15] pry(main)> \"There are many err                                           ",{}]]},"cursor":{"x":35}}],[0.136115,{"lines":{"44":[["[15] pry(main)> \"There are many er                                            ",{}]]},"cursor":{"x":34}}],[0.11195,{"lines":{"44":[["[15] pry(main)> \"There are many e                                             ",{}]]},"cursor":{"x":33}}],[0.111834,{"lines":{"44":[["[15] pry(main)> \"There are many                                               ",{}]]},"cursor":{"x":32}}],[0.08828,{"lines":{"44":[["[15] pry(main)> \"There are many t                                             ",{}]]},"cursor":{"x":33}}],[0.143853,{"lines":{"44":[["[15] pry(main)> \"There are many ty                                            ",{}]]},"cursor":{"x":34}}],[0.015997,{"lines":{"44":[["[15] pry(main)> \"There are many typ                                           ",{}]]},"cursor":{"x":35}}],[0.12818,{"lines":{"44":[["[15] pry(main)> \"There are many type                                          ",{}]]},"cursor":{"x":36}}],[0.039796,{"lines":{"44":[["[15] pry(main)> \"There are many types                                         ",{}]]},"cursor":{"x":37}}],[0.06407400000000001,{"cursor":{"x":38}}],[0.38415,{"lines":{"44":[["[15] pry(main)> \"There are many types o                                       ",{}]]},"cursor":{"x":39}}],[0.095974,{"lines":{"44":[["[15] pry(main)> \"There are many types of                                      ",{}]]},"cursor":{"x":40}}],[0.07999100000000001,{"cursor":{"x":41}}],[0.135829,{"lines":{"44":[["[15] pry(main)> \"There are many types of a                                    ",{}]]},"cursor":{"x":42}}],[0.06414,{"lines":{"44":[["[15] pry(main)> \"There are many types of ar                                   ",{}]]},"cursor":{"x":43}}],[0.191969,{"lines":{"44":[["[15] pry(main)> \"There are many types of a                                    ",{}]]},"cursor":{"x":42}}],[0.119957,{"lines":{"44":[["[15] pry(main)> \"There are many types of                                      ",{}]]},"cursor":{"x":41}}],[0.063925,{"lines":{"44":[["[15] pry(main)> \"There are many types of e                                    ",{}]]},"cursor":{"x":42}}],[0.040143,{"lines":{"44":[["[15] pry(main)> \"There are many types of er                                   ",{}]]},"cursor":{"x":43}}],[0.159858,{"lines":{"44":[["[15] pry(main)> \"There are many types of err                                  ",{}]]},"cursor":{"x":44}}],[0.136172,{"lines":{"44":[["[15] pry(main)> \"There are many types of erro                                 ",{}]]},"cursor":{"x":45}}],[0.039973,{"lines":{"44":[["[15] pry(main)> \"There are many types of error                                ",{}]]},"cursor":{"x":46}}],[0.127864,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors                               ",{}]]},"cursor":{"x":47}}],[0.136111,{"cursor":{"x":48}}],[0.168035,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors i                             ",{}]]},"cursor":{"x":49}}],[0.055965,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors in                            ",{}]]},"cursor":{"x":50}}],[0.048023,{"cursor":{"x":51}}],[0.296021,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors in R                          ",{}]]},"cursor":{"x":52}}],[0.175969,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors in Ru                         ",{}]]},"cursor":{"x":53}}],[0.048029,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors in Rub                        ",{}]]},"cursor":{"x":54}}],[0.055947,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors in Ruby                       ",{}]]},"cursor":{"x":55}}],[1.280015,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors in Ruby.                      ",{}]]},"cursor":{"x":56}}],[0.135807,{"cursor":{"x":57}}],[0.160103,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors in Ruby. L                    ",{}]]},"cursor":{"x":58}}],[0.135993,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors in Ruby. Le                   ",{}]]},"cursor":{"x":59}}],[0.055878,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors in Ruby. Let                  ",{}]]},"cursor":{"x":60}}],[0.07209400000000001,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors in Ruby. Let'                 ",{}]]},"cursor":{"x":61}}],[0.092644,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's                ",{}]]},"cursor":{"x":62}}],[0.075403,{"cursor":{"x":63}}],[0.175955,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's c              ",{}]]},"cursor":{"x":64}}],[0.160083,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's cr             ",{}]]},"cursor":{"x":65}}],[0.071976,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's cre            ",{}]]},"cursor":{"x":66}}],[0.047958,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's crea           ",{}]]},"cursor":{"x":67}}],[0.088034,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's creat          ",{}]]},"cursor":{"x":68}}],[0.080009,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create         ",{}]]},"cursor":{"x":69}}],[0.07982499999999999,{"cursor":{"x":70}}],[0.087987,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create a       ",{}]]},"cursor":{"x":71}}],[0.088183,{"cursor":{"x":72}}],[0.151732,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create a n     ",{}]]},"cursor":{"x":73}}],[0.06405,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create a no    ",{}]]},"cursor":{"x":74}}],[0.240085,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create a n     ",{}]]},"cursor":{"x":73}}],[0.111997,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create a       ",{}]]},"cursor":{"x":72}}],[0.103925,{"cursor":{"x":71}}],[0.176196,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create an      ",{}]]},"cursor":{"x":72}}],[0.047807,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create ano     ",{}]]},"cursor":{"x":73}}],[0.023878,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create anot    ",{}]]},"cursor":{"x":74}}],[0.072201,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create anoth   ",{}]]},"cursor":{"x":75}}],[0.112054,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create anothe  ",{}]]},"cursor":{"x":76}}],[0.039861,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create another ",{}]]},"cursor":{"x":77}}],[0.120132,{"lines":{"44":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create another.",{}]]},"cursor":{"x":0,"y":45}}],[0.336009,{"lines":{"45":[["\"                                                                             ",{}]]},"cursor":{"x":1}}],[0.863884,{"cursor":{"x":0,"y":46}}],[0.003547,{"lines":{"46":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are many types of errors in Ruby. Let's create another.",{"fg":2}],["\"",{"fg":2,"bold":true}],["            ",{}]],"47":[["[16] pry(main)>                                                               ",{}]]},"cursor":{"x":16,"y":47}}],[1.428501,{"lines":{"47":[["[16] pry(main)> s                                                             ",{}]]},"cursor":{"x":17}}],[0.216029,{"lines":{"47":[["[16] pry(main)> sq                                                            ",{}]]},"cursor":{"x":18}}],[0.167795,{"lines":{"47":[["[16] pry(main)> squ                                                           ",{}]]},"cursor":{"x":19}}],[0.136014,{"lines":{"47":[["[16] pry(main)> squa                                                          ",{}]]},"cursor":{"x":20}}],[0.047674,{"lines":{"47":[["[16] pry(main)> squar                                                         ",{}]]},"cursor":{"x":21}}],[0.08037999999999999,{"lines":{"47":[["[16] pry(main)> square                                                        ",{}]]},"cursor":{"x":22}}],[0.536007,{"lines":{"0":[["[1] pry(main)> \"Ruby for math people.\"                                        ",{}]],"1":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Ruby for math people.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                    ",{}]],"2":[["[2] pry(main)> \"There are three main variable 'things' in Ruby: methods, varia",{}]],"3":[["bles, and blocks.\"                                                            ",{}]],"4":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are three main variable 'things' in Ruby: methods, variables, and bl",{"fg":2}]],"5":[["ocks.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                        ",{}]],"6":[["[3] pry(main)> \"Methods are like math functions. They can take arguments, then",{}]],"7":[[" do stuff with the arguments and return a new value.\"                         ",{}]],"8":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Methods are like math functions. They can take arguments, then do stuff wi",{"fg":2}]],"9":[["th the arguments and return a new value.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                     ",{}]],"10":[["[4] pry(main)> \"Here is an example method.\"                                   ",{}]],"11":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here is an example method.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                               ",{}]],"12":[["[5] pry(main)> def a                                                          ",{}]],"13":[["[5] pry(main)*   return 5                                                     ",{}]],"14":[["[5] pry(main)* end                                                            ",{}]],"15":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"16":[["[6] pry(main)> \"Here, the method is called 'a'. It is equivalent to writing th",{}]],"17":[["e following math function: a() = 5.\"                                          ",{}]],"18":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, the method is called 'a'. It is equivalent to writing the following ",{"fg":2}]],"19":[["math function: a() = 5.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                      ",{}]],"20":[["[7] pry(main)> \"Let's write a method that takes an argument.\"                 ",{}]],"21":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Let's write a method that takes an argument.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                             ",{}]],"22":[["[8] pry(main)> def square(x)                                                  ",{}]],"23":[["[8] pry(main)*   return x**2                                                  ",{}]],"24":[["[8] pry(main)* end                                                            ",{}]],"25":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"26":[["[9] pry(main)> \"The method above, called 'square', is equivalent to the follow",{}]],"27":[["ing: square(x) = x^2.\"                                                        ",{}]],"28":[["=> ",{}],["\"",{"fg":2,"bold":true}],["The method above, called 'square', is equivalent to the following: square(",{"fg":2}]],"29":[["x) = x^2.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{}]],"30":[["[10] pry(main)> \"To call a method, simply write it like you would any math fun",{}]],"31":[["ction: \"                                                                      ",{}]],"32":[["=> ",{}],["\"",{"fg":2,"bold":true}],["To call a method, simply write it like you would any math function: ",{"fg":2}],["\"",{"fg":2,"bold":true}],["     ",{}]],"33":[["[11] pry(main)> square(2)                                                     ",{}]],"34":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"35":[["[12] pry(main)> squre(3)                                                      ",{}]],"36":[["NoMethodError: undefined method `squre' for main:Object                       ",{}]],"37":[["from (pry):16:in `<main>'                                                     ",{}]],"38":[["[13] pry(main)> square(3)                                                     ",{}]],"39":[["=> ",{}],["9",{"fg":4,"bold":true}],["                                                                          ",{}]],"40":[["[14] pry(main)> \"Notice the error when I typed a function that did not exist.\"",{}]],"41":[["                                                                              ",{}]],"42":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Notice the error when I typed a function that did not exist.",{"fg":2}],["\"",{"fg":2,"bold":true}],["             ",{}]],"43":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create another.",{}]],"44":[["\"                                                                             ",{}]],"45":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are many types of errors in Ruby. Let's create another.",{"fg":2}],["\"",{"fg":2,"bold":true}],["            ",{}]],"46":[["[16] pry(main)> square                                                        ",{}]],"47":[["                                                                              ",{}]]},"cursor":{"x":0}}],[0.003307,{"lines":{"0":[["[2] pry(main)> \"There are three main variable 'things' in Ruby: methods, varia",{}]],"1":[["bles, and blocks.\"                                                            ",{}]],"2":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are three main variable 'things' in Ruby: methods, variables, and bl",{"fg":2}]],"3":[["ocks.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                        ",{}]],"4":[["[3] pry(main)> \"Methods are like math functions. They can take arguments, then",{}]],"5":[[" do stuff with the arguments and return a new value.\"                         ",{}]],"6":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Methods are like math functions. They can take arguments, then do stuff wi",{"fg":2}]],"7":[["th the arguments and return a new value.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                     ",{}]],"8":[["[4] pry(main)> \"Here is an example method.\"                                   ",{}]],"9":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here is an example method.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                               ",{}]],"10":[["[5] pry(main)> def a                                                          ",{}]],"11":[["[5] pry(main)*   return 5                                                     ",{}]],"12":[["[5] pry(main)* end                                                            ",{}]],"13":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"14":[["[6] pry(main)> \"Here, the method is called 'a'. It is equivalent to writing th",{}]],"15":[["e following math function: a() = 5.\"                                          ",{}]],"16":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, the method is called 'a'. It is equivalent to writing the following ",{"fg":2}]],"17":[["math function: a() = 5.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                      ",{}]],"18":[["[7] pry(main)> \"Let's write a method that takes an argument.\"                 ",{}]],"19":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Let's write a method that takes an argument.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                             ",{}]],"20":[["[8] pry(main)> def square(x)                                                  ",{}]],"21":[["[8] pry(main)*   return x**2                                                  ",{}]],"22":[["[8] pry(main)* end                                                            ",{}]],"23":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"24":[["[9] pry(main)> \"The method above, called 'square', is equivalent to the follow",{}]],"25":[["ing: square(x) = x^2.\"                                                        ",{}]],"26":[["=> ",{}],["\"",{"fg":2,"bold":true}],["The method above, called 'square', is equivalent to the following: square(",{"fg":2}]],"27":[["x) = x^2.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{}]],"28":[["[10] pry(main)> \"To call a method, simply write it like you would any math fun",{}]],"29":[["ction: \"                                                                      ",{}]],"30":[["=> ",{}],["\"",{"fg":2,"bold":true}],["To call a method, simply write it like you would any math function: ",{"fg":2}],["\"",{"fg":2,"bold":true}],["     ",{}]],"31":[["[11] pry(main)> square(2)                                                     ",{}]],"32":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"33":[["[12] pry(main)> squre(3)                                                      ",{}]],"34":[["NoMethodError: undefined method `squre' for main:Object                       ",{}]],"35":[["from (pry):16:in `<main>'                                                     ",{}]],"36":[["[13] pry(main)> square(3)                                                     ",{}]],"37":[["=> ",{}],["9",{"fg":4,"bold":true}],["                                                                          ",{}]],"38":[["[14] pry(main)> \"Notice the error when I typed a function that did not exist.\"",{}]],"39":[["                                                                              ",{}]],"40":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Notice the error when I typed a function that did not exist.",{"fg":2}],["\"",{"fg":2,"bold":true}],["             ",{}]],"41":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create another.",{}]],"42":[["\"                                                                             ",{}]],"43":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are many types of errors in Ruby. Let's create another.",{"fg":2}],["\"",{"fg":2,"bold":true}],["            ",{}]],"44":[["[16] pry(main)> square                                                        ",{}]],"45":[["ArgumentError: wrong number of arguments (0 for 1)                            ",{}]],"46":[["from (pry):10:in `square'                                                     ",{}]],"47":[["[17] pry(main)>                                                               ",{}]]},"cursor":{"x":16}}],[1.724884,{"lines":{"47":[["[17] pry(main)> \"                                                             ",{}]]},"cursor":{"x":17}}],[0.62385,{"lines":{"47":[["[17] pry(main)> \"H                                                            ",{}]]},"cursor":{"x":18}}],[0.208137,{"lines":{"47":[["[17] pry(main)> \"He                                                           ",{}]]},"cursor":{"x":19}}],[0.039827,{"lines":{"47":[["[17] pry(main)> \"Her                                                          ",{}]]},"cursor":{"x":20}}],[0.280023,{"lines":{"47":[["[17] pry(main)> \"Here                                                         ",{}]]},"cursor":{"x":21}}],[0.127945,{"lines":{"47":[["[17] pry(main)> \"Here,                                                        ",{}]]},"cursor":{"x":22}}],[0.104158,{"cursor":{"x":23}}],[0.111678,{"lines":{"47":[["[17] pry(main)> \"Here, y                                                      ",{}]]},"cursor":{"x":24}}],[0.080308,{"lines":{"47":[["[17] pry(main)> \"Here, yo                                                     ",{}]]},"cursor":{"x":25}}],[0.0559,{"lines":{"47":[["[17] pry(main)> \"Here, you                                                    ",{}]]},"cursor":{"x":26}}],[0.06379600000000001,{"cursor":{"x":27}}],[0.120263,{"lines":{"47":[["[17] pry(main)> \"Here, you c                                                  ",{}]]},"cursor":{"x":28}}],[0.063918,{"lines":{"47":[["[17] pry(main)> \"Here, you ca                                                 ",{}]]},"cursor":{"x":29}}],[0.080011,{"lines":{"47":[["[17] pry(main)> \"Here, you can                                                ",{}]]},"cursor":{"x":30}}],[0.06393,{"cursor":{"x":31}}],[0.152078,{"lines":{"47":[["[17] pry(main)> \"Here, you can s                                              ",{}]]},"cursor":{"x":32}}],[0.127947,{"lines":{"47":[["[17] pry(main)> \"Here, you can se                                             ",{}]]},"cursor":{"x":33}}],[0.160009,{"lines":{"47":[["[17] pry(main)> \"Here, you can see                                            ",{}]]},"cursor":{"x":34}}],[0.103926,{"cursor":{"x":35}}],[0.120067,{"lines":{"47":[["[17] pry(main)> \"Here, you can see t                                          ",{}]]},"cursor":{"x":36}}],[0.071991,{"lines":{"47":[["[17] pry(main)> \"Here, you can see th                                         ",{}]]},"cursor":{"x":37}}],[0.120006,{"lines":{"47":[["[17] pry(main)> \"Here, you can see tha                                        ",{}]]},"cursor":{"x":38}}],[0.047991,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that                                       ",{}]]},"cursor":{"x":39}}],[0.055836,{"cursor":{"x":40}}],[0.99215,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I                                     ",{}]]},"cursor":{"x":41}}],[0.175979,{"cursor":{"x":42}}],[0.103753,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I d                                   ",{}]]},"cursor":{"x":43}}],[0.13626,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I di                                  ",{}]]},"cursor":{"x":44}}],[0.063962,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I did                                 ",{}]]},"cursor":{"x":45}}],[0.127846,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I didd                                ",{}]]},"cursor":{"x":46}}],[0.056009,{"cursor":{"x":47}}],[0.280054,{"cursor":{"x":46}}],[0.111996,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I did                                 ",{}]]},"cursor":{"x":45}}],[0.096098,{"cursor":{"x":46}}],[0.103978,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I did n                               ",{}]]},"cursor":{"x":47}}],[0.055833,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I did no                              ",{}]]},"cursor":{"x":48}}],[0.088196,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I did not                             ",{}]]},"cursor":{"x":49}}],[0.047984,{"cursor":{"x":50}}],[0.175848,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I did not i                           ",{}]]},"cursor":{"x":51}}],[0.040008,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I did not in                          ",{}]]},"cursor":{"x":52}}],[0.096037,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I did not inc                         ",{}]]},"cursor":{"x":53}}],[0.088088,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I did not incl                        ",{}]]},"cursor":{"x":54}}],[0.087881,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I did not inclu                       ",{}]]},"cursor":{"x":55}}],[0.07213799999999999,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I did not includ                      ",{}]]},"cursor":{"x":56}}],[0.063994,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I did not include                     ",{}]]},"cursor":{"x":57}}],[0.104007,{"cursor":{"x":58}}],[0.35196,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I did not include e                   ",{}]]},"cursor":{"x":59}}],[0.103864,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I did not include en                  ",{}]]},"cursor":{"x":60}}],[0.135852,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I did not include eno                 ",{}]]},"cursor":{"x":61}}],[0.080234,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I did not include enou                ",{}]]},"cursor":{"x":62}}],[0.071769,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I did not include enoug               ",{}]]},"cursor":{"x":63}}],[0.088336,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I did not include enough              ",{}]]},"cursor":{"x":64}}],[0.055935,{"cursor":{"x":65}}],[0.263998,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I did not include enough a            ",{}]]},"cursor":{"x":66}}],[0.031877,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I did not include enough ar           ",{}]]},"cursor":{"x":67}}],[0.064156,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I did not include enough arg          ",{}]]},"cursor":{"x":68}}],[0.071952,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I did not include enough argu         ",{}]]},"cursor":{"x":69}}],[0.18403,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I did not include enough argum        ",{}]]},"cursor":{"x":70}}],[0.072103,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I did not include enough argume       ",{}]]},"cursor":{"x":71}}],[0.07986799999999999,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I did not include enough argumen      ",{}]]},"cursor":{"x":72}}],[0.080013,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I did not include enough argument     ",{}]]},"cursor":{"x":73}}],[0.063987,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I did not include enough arguments    ",{}]]},"cursor":{"x":74}}],[0.096011,{"cursor":{"x":75}}],[0.11199,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I did not include enough arguments t  ",{}]]},"cursor":{"x":76}}],[0.06404600000000001,{"lines":{"47":[["[17] pry(main)> \"Here, you can see that I did not include enough arguments to ",{}]]},"cursor":{"x":77}}],[0.10391,{"lines":{"0":[["bles, and blocks.\"                                                            ",{}]],"1":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are three main variable 'things' in Ruby: methods, variables, and bl",{"fg":2}]],"2":[["ocks.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                        ",{}]],"3":[["[3] pry(main)> \"Methods are like math functions. They can take arguments, then",{}]],"4":[[" do stuff with the arguments and return a new value.\"                         ",{}]],"5":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Methods are like math functions. They can take arguments, then do stuff wi",{"fg":2}]],"6":[["th the arguments and return a new value.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                     ",{}]],"7":[["[4] pry(main)> \"Here is an example method.\"                                   ",{}]],"8":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here is an example method.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                               ",{}]],"9":[["[5] pry(main)> def a                                                          ",{}]],"10":[["[5] pry(main)*   return 5                                                     ",{}]],"11":[["[5] pry(main)* end                                                            ",{}]],"12":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"13":[["[6] pry(main)> \"Here, the method is called 'a'. It is equivalent to writing th",{}]],"14":[["e following math function: a() = 5.\"                                          ",{}]],"15":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, the method is called 'a'. It is equivalent to writing the following ",{"fg":2}]],"16":[["math function: a() = 5.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                      ",{}]],"17":[["[7] pry(main)> \"Let's write a method that takes an argument.\"                 ",{}]],"18":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Let's write a method that takes an argument.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                             ",{}]],"19":[["[8] pry(main)> def square(x)                                                  ",{}]],"20":[["[8] pry(main)*   return x**2                                                  ",{}]],"21":[["[8] pry(main)* end                                                            ",{}]],"22":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"23":[["[9] pry(main)> \"The method above, called 'square', is equivalent to the follow",{}]],"24":[["ing: square(x) = x^2.\"                                                        ",{}]],"25":[["=> ",{}],["\"",{"fg":2,"bold":true}],["The method above, called 'square', is equivalent to the following: square(",{"fg":2}]],"26":[["x) = x^2.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{}]],"27":[["[10] pry(main)> \"To call a method, simply write it like you would any math fun",{}]],"28":[["ction: \"                                                                      ",{}]],"29":[["=> ",{}],["\"",{"fg":2,"bold":true}],["To call a method, simply write it like you would any math function: ",{"fg":2}],["\"",{"fg":2,"bold":true}],["     ",{}]],"30":[["[11] pry(main)> square(2)                                                     ",{}]],"31":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"32":[["[12] pry(main)> squre(3)                                                      ",{}]],"33":[["NoMethodError: undefined method `squre' for main:Object                       ",{}]],"34":[["from (pry):16:in `<main>'                                                     ",{}]],"35":[["[13] pry(main)> square(3)                                                     ",{}]],"36":[["=> ",{}],["9",{"fg":4,"bold":true}],["                                                                          ",{}]],"37":[["[14] pry(main)> \"Notice the error when I typed a function that did not exist.\"",{}]],"38":[["                                                                              ",{}]],"39":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Notice the error when I typed a function that did not exist.",{"fg":2}],["\"",{"fg":2,"bold":true}],["             ",{}]],"40":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create another.",{}]],"41":[["\"                                                                             ",{}]],"42":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are many types of errors in Ruby. Let's create another.",{"fg":2}],["\"",{"fg":2,"bold":true}],["            ",{}]],"43":[["[16] pry(main)> square                                                        ",{}]],"44":[["ArgumentError: wrong number of arguments (0 for 1)                            ",{}]],"45":[["from (pry):10:in `square'                                                     ",{}]],"46":[["[17] pry(main)> \"Here, you can see that I did not include enough arguments to ",{}]],"47":[["                                                                              ",{}]]},"cursor":{"x":0}}],[0.119873,{"lines":{"47":[["t                                                                             ",{}]]},"cursor":{"x":1}}],[0.080168,{"lines":{"47":[["th                                                                            ",{}]]},"cursor":{"x":2}}],[0.09597899999999999,{"lines":{"47":[["the                                                                           ",{}]]},"cursor":{"x":3}}],[0.07199999999999999,{"cursor":{"x":4}}],[0.079843,{"lines":{"47":[["the f                                                                         ",{}]]},"cursor":{"x":5}}],[0.11197,{"lines":{"47":[["the fu                                                                        ",{}]]},"cursor":{"x":6}}],[0.064008,{"lines":{"47":[["the fun                                                                       ",{}]]},"cursor":{"x":7}}],[0.08032,{"lines":{"47":[["the func                                                                      ",{}]]},"cursor":{"x":8}}],[0.031705,{"lines":{"47":[["the funct                                                                     ",{}]]},"cursor":{"x":9}}],[0.06414599999999999,{"lines":{"47":[["the functi                                                                    ",{}]]},"cursor":{"x":10}}],[0.031765,{"lines":{"47":[["the functio                                                                   ",{}]]},"cursor":{"x":11}}],[0.05624,{"lines":{"47":[["the function                                                                  ",{}]]},"cursor":{"x":12}}],[0.111934,{"cursor":{"x":13}}],[0.127883,{"lines":{"47":[["the function '                                                                ",{}]]},"cursor":{"x":14}}],[0.248185,{"lines":{"47":[["the function 's                                                               ",{}]]},"cursor":{"x":15}}],[0.15201,{"lines":{"47":[["the function 'sq                                                              ",{}]]},"cursor":{"x":16}}],[0.103974,{"lines":{"47":[["the function 'squ                                                             ",{}]]},"cursor":{"x":17}}],[0.111988,{"lines":{"47":[["the function 'squa                                                            ",{}]]},"cursor":{"x":18}}],[0.056007,{"lines":{"47":[["the function 'squar                                                           ",{}]]},"cursor":{"x":19}}],[0.063941,{"lines":{"47":[["the function 'square                                                          ",{}]]},"cursor":{"x":20}}],[0.120024,{"lines":{"47":[["the function 'square'                                                         ",{}]]},"cursor":{"x":21}}],[0.239746,{"lines":{"47":[["the function 'square'.                                                        ",{}]]},"cursor":{"x":22}}],[0.144257,{"lines":{"47":[["the function 'square'.'                                                       ",{}]]},"cursor":{"x":23}}],[0.487902,{"lines":{"47":[["the function 'square'.                                                        ",{}]]},"cursor":{"x":22}}],[0.079971,{"cursor":{"x":23}}],[15.215617,{"cursor":{"x":22}}],[0.352109,{"lines":{"47":[["the function 'square'.\"                                                       ",{}]]},"cursor":{"x":23}}],[0.375867,{"lines":{"0":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are three main variable 'things' in Ruby: methods, variables, and bl",{"fg":2}]],"1":[["ocks.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                        ",{}]],"2":[["[3] pry(main)> \"Methods are like math functions. They can take arguments, then",{}]],"3":[[" do stuff with the arguments and return a new value.\"                         ",{}]],"4":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Methods are like math functions. They can take arguments, then do stuff wi",{"fg":2}]],"5":[["th the arguments and return a new value.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                     ",{}]],"6":[["[4] pry(main)> \"Here is an example method.\"                                   ",{}]],"7":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here is an example method.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                               ",{}]],"8":[["[5] pry(main)> def a                                                          ",{}]],"9":[["[5] pry(main)*   return 5                                                     ",{}]],"10":[["[5] pry(main)* end                                                            ",{}]],"11":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"12":[["[6] pry(main)> \"Here, the method is called 'a'. It is equivalent to writing th",{}]],"13":[["e following math function: a() = 5.\"                                          ",{}]],"14":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, the method is called 'a'. It is equivalent to writing the following ",{"fg":2}]],"15":[["math function: a() = 5.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                      ",{}]],"16":[["[7] pry(main)> \"Let's write a method that takes an argument.\"                 ",{}]],"17":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Let's write a method that takes an argument.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                             ",{}]],"18":[["[8] pry(main)> def square(x)                                                  ",{}]],"19":[["[8] pry(main)*   return x**2                                                  ",{}]],"20":[["[8] pry(main)* end                                                            ",{}]],"21":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"22":[["[9] pry(main)> \"The method above, called 'square', is equivalent to the follow",{}]],"23":[["ing: square(x) = x^2.\"                                                        ",{}]],"24":[["=> ",{}],["\"",{"fg":2,"bold":true}],["The method above, called 'square', is equivalent to the following: square(",{"fg":2}]],"25":[["x) = x^2.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{}]],"26":[["[10] pry(main)> \"To call a method, simply write it like you would any math fun",{}]],"27":[["ction: \"                                                                      ",{}]],"28":[["=> ",{}],["\"",{"fg":2,"bold":true}],["To call a method, simply write it like you would any math function: ",{"fg":2}],["\"",{"fg":2,"bold":true}],["     ",{}]],"29":[["[11] pry(main)> square(2)                                                     ",{}]],"30":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"31":[["[12] pry(main)> squre(3)                                                      ",{}]],"32":[["NoMethodError: undefined method `squre' for main:Object                       ",{}]],"33":[["from (pry):16:in `<main>'                                                     ",{}]],"34":[["[13] pry(main)> square(3)                                                     ",{}]],"35":[["=> ",{}],["9",{"fg":4,"bold":true}],["                                                                          ",{}]],"36":[["[14] pry(main)> \"Notice the error when I typed a function that did not exist.\"",{}]],"37":[["                                                                              ",{}]],"38":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Notice the error when I typed a function that did not exist.",{"fg":2}],["\"",{"fg":2,"bold":true}],["             ",{}]],"39":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create another.",{}]],"40":[["\"                                                                             ",{}]],"41":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are many types of errors in Ruby. Let's create another.",{"fg":2}],["\"",{"fg":2,"bold":true}],["            ",{}]],"42":[["[16] pry(main)> square                                                        ",{}]],"43":[["ArgumentError: wrong number of arguments (0 for 1)                            ",{}]],"44":[["from (pry):10:in `square'                                                     ",{}]],"45":[["[17] pry(main)> \"Here, you can see that I did not include enough arguments to ",{}]],"46":[["the function 'square'.\"                                                       ",{}]],"47":[["                                                                              ",{}]]},"cursor":{"x":0}}],[0.003637,{"lines":{"0":[["[3] pry(main)> \"Methods are like math functions. They can take arguments, then",{}]],"1":[[" do stuff with the arguments and return a new value.\"                         ",{}]],"2":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Methods are like math functions. They can take arguments, then do stuff wi",{"fg":2}]],"3":[["th the arguments and return a new value.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                     ",{}]],"4":[["[4] pry(main)> \"Here is an example method.\"                                   ",{}]],"5":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here is an example method.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                               ",{}]],"6":[["[5] pry(main)> def a                                                          ",{}]],"7":[["[5] pry(main)*   return 5                                                     ",{}]],"8":[["[5] pry(main)* end                                                            ",{}]],"9":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"10":[["[6] pry(main)> \"Here, the method is called 'a'. It is equivalent to writing th",{}]],"11":[["e following math function: a() = 5.\"                                          ",{}]],"12":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, the method is called 'a'. It is equivalent to writing the following ",{"fg":2}]],"13":[["math function: a() = 5.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                      ",{}]],"14":[["[7] pry(main)> \"Let's write a method that takes an argument.\"                 ",{}]],"15":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Let's write a method that takes an argument.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                             ",{}]],"16":[["[8] pry(main)> def square(x)                                                  ",{}]],"17":[["[8] pry(main)*   return x**2                                                  ",{}]],"18":[["[8] pry(main)* end                                                            ",{}]],"19":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"20":[["[9] pry(main)> \"The method above, called 'square', is equivalent to the follow",{}]],"21":[["ing: square(x) = x^2.\"                                                        ",{}]],"22":[["=> ",{}],["\"",{"fg":2,"bold":true}],["The method above, called 'square', is equivalent to the following: square(",{"fg":2}]],"23":[["x) = x^2.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{}]],"24":[["[10] pry(main)> \"To call a method, simply write it like you would any math fun",{}]],"25":[["ction: \"                                                                      ",{}]],"26":[["=> ",{}],["\"",{"fg":2,"bold":true}],["To call a method, simply write it like you would any math function: ",{"fg":2}],["\"",{"fg":2,"bold":true}],["     ",{}]],"27":[["[11] pry(main)> square(2)                                                     ",{}]],"28":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"29":[["[12] pry(main)> squre(3)                                                      ",{}]],"30":[["NoMethodError: undefined method `squre' for main:Object                       ",{}]],"31":[["from (pry):16:in `<main>'                                                     ",{}]],"32":[["[13] pry(main)> square(3)                                                     ",{}]],"33":[["=> ",{}],["9",{"fg":4,"bold":true}],["                                                                          ",{}]],"34":[["[14] pry(main)> \"Notice the error when I typed a function that did not exist.\"",{}]],"35":[["                                                                              ",{}]],"36":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Notice the error when I typed a function that did not exist.",{"fg":2}],["\"",{"fg":2,"bold":true}],["             ",{}]],"37":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create another.",{}]],"38":[["\"                                                                             ",{}]],"39":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are many types of errors in Ruby. Let's create another.",{"fg":2}],["\"",{"fg":2,"bold":true}],["            ",{}]],"40":[["[16] pry(main)> square                                                        ",{}]],"41":[["ArgumentError: wrong number of arguments (0 for 1)                            ",{}]],"42":[["from (pry):10:in `square'                                                     ",{}]],"43":[["[17] pry(main)> \"Here, you can see that I did not include enough arguments to ",{}]],"44":[["the function 'square'.\"                                                       ",{}]],"45":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, you can see that I did not include enough arguments to the function ",{"fg":2}]],"46":[["'square'.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{"fg":2}]],"47":[["[18] pry(main)>                                                               ",{}]]},"cursor":{"x":16}}],[7.780228,{"lines":{"47":[["[18] pry(main)> N                                                             ",{}]]},"cursor":{"x":17}}],[0.20782,{"lines":{"47":[["[18] pry(main)> No                                                            ",{}]]},"cursor":{"x":18}}],[0.376041,{"lines":{"47":[["[18] pry(main)> N                                                             ",{}]]},"cursor":{"x":17}}],[0.432025,{"lines":{"47":[["[18] pry(main)>                                                               ",{}]]},"cursor":{"x":16}}],[0.272053,{"lines":{"47":[["[18] pry(main)> \"                                                             ",{}]]},"cursor":{"x":17}}],[0.27999,{"lines":{"47":[["[18] pry(main)> \"N                                                            ",{}]]},"cursor":{"x":18}}],[0.175906,{"lines":{"47":[["[18] pry(main)> \"No                                                           ",{}]]},"cursor":{"x":19}}],[0.103917,{"lines":{"47":[["[18] pry(main)> \"Now                                                          ",{}]]},"cursor":{"x":20}}],[0.080049,{"cursor":{"x":21}}],[0.135935,{"lines":{"47":[["[18] pry(main)> \"Now r                                                        ",{}]]},"cursor":{"x":22}}],[0.287926,{"lines":{"47":[["[18] pry(main)> \"Now                                                          ",{}]]},"cursor":{"x":21}}],[0.136307,{"lines":{"47":[["[18] pry(main)> \"Now t                                                        ",{}]]},"cursor":{"x":22}}],[0.367974,{"lines":{"47":[["[18] pry(main)> \"Now tr                                                       ",{}]]},"cursor":{"x":23}}],[0.103969,{"lines":{"47":[["[18] pry(main)> \"Now try                                                      ",{}]]},"cursor":{"x":24}}],[0.056026,{"cursor":{"x":25}}],[0.247699,{"lines":{"47":[["[18] pry(main)> \"Now try d                                                    ",{}]]},"cursor":{"x":26}}],[0.152285,{"lines":{"47":[["[18] pry(main)> \"Now try de                                                   ",{}]]},"cursor":{"x":27}}],[0.080096,{"lines":{"47":[["[18] pry(main)> \"Now try def                                                  ",{}]]},"cursor":{"x":28}}],[0.063767,{"lines":{"47":[["[18] pry(main)> \"Now try defi                                                 ",{}]]},"cursor":{"x":29}}],[0.048288,{"lines":{"47":[["[18] pry(main)> \"Now try defin                                                ",{}]]},"cursor":{"x":30}}],[0.079834,{"lines":{"47":[["[18] pry(main)> \"Now try define                                               ",{}]]},"cursor":{"x":31}}],[0.095857,{"lines":{"47":[["[18] pry(main)> \"Now try defined                                              ",{}]]},"cursor":{"x":32}}],[0.104335,{"cursor":{"x":33}}],[0.359831,{"lines":{"47":[["[18] pry(main)> \"Now try defined s                                            ",{}]]},"cursor":{"x":34}}],[0.22382,{"lines":{"47":[["[18] pry(main)> \"Now try defined                                              ",{}]]},"cursor":{"x":33}}],[0.12803,{"cursor":{"x":32}}],[0.104002,{"lines":{"47":[["[18] pry(main)> \"Now try define                                               ",{}]]},"cursor":{"x":31}}],[0.448047,{"lines":{"47":[["[18] pry(main)> \"Now try defin                                                ",{}]]},"cursor":{"x":30}}],[0.208063,{"lines":{"47":[["[18] pry(main)> \"Now try defini                                               ",{}]]},"cursor":{"x":31}}],[0.047828,{"lines":{"47":[["[18] pry(main)> \"Now try definin                                              ",{}]]},"cursor":{"x":32}}],[0.079788,{"lines":{"47":[["[18] pry(main)> \"Now try defining                                             ",{}]]},"cursor":{"x":33}}],[0.06435200000000001,{"cursor":{"x":34}}],[0.111969,{"lines":{"47":[["[18] pry(main)> \"Now try defining s                                           ",{}]]},"cursor":{"x":35}}],[0.063859,{"lines":{"47":[["[18] pry(main)> \"Now try defining so                                          ",{}]]},"cursor":{"x":36}}],[0.06419800000000001,{"lines":{"47":[["[18] pry(main)> \"Now try defining som                                         ",{}]]},"cursor":{"x":37}}],[0.063966,{"lines":{"47":[["[18] pry(main)> \"Now try defining some                                        ",{}]]},"cursor":{"x":38}}],[0.064093,{"cursor":{"x":39}}],[0.103821,{"lines":{"47":[["[18] pry(main)> \"Now try defining some f                                      ",{}]]},"cursor":{"x":40}}],[0.06407499999999999,{"lines":{"47":[["[18] pry(main)> \"Now try defining some fu                                     ",{}]]},"cursor":{"x":41}}],[0.047857,{"lines":{"47":[["[18] pry(main)> \"Now try defining some fun                                    ",{}]]},"cursor":{"x":42}}],[0.112179,{"lines":{"47":[["[18] pry(main)> \"Now try defining some func                                   ",{}]]},"cursor":{"x":43}}],[0.039776,{"lines":{"47":[["[18] pry(main)> \"Now try defining some funct                                  ",{}]]},"cursor":{"x":44}}],[0.080195,{"lines":{"47":[["[18] pry(main)> \"Now try defining some functi                                 ",{}]]},"cursor":{"x":45}}],[0.031977,{"lines":{"47":[["[18] pry(main)> \"Now try defining some functio                                ",{}]]},"cursor":{"x":46}}],[0.055977,{"lines":{"47":[["[18] pry(main)> \"Now try defining some function                               ",{}]]},"cursor":{"x":47}}],[0.15196,{"lines":{"47":[["[18] pry(main)> \"Now try defining some functions                              ",{}]]},"cursor":{"x":48}}],[0.104026,{"cursor":{"x":49}}],[0.6960229999999999,{"lines":{"47":[["[18] pry(main)> \"Now try defining some functions o                            ",{}]]},"cursor":{"x":50}}],[0.063883,{"lines":{"47":[["[18] pry(main)> \"Now try defining some functions on                           ",{}]]},"cursor":{"x":51}}],[0.088161,{"cursor":{"x":52}}],[0.111941,{"lines":{"47":[["[18] pry(main)> \"Now try defining some functions on y                         ",{}]]},"cursor":{"x":53}}],[0.09599000000000001,{"lines":{"47":[["[18] pry(main)> \"Now try defining some functions on yo                        ",{}]]},"cursor":{"x":54}}],[0.06397799999999999,{"lines":{"47":[["[18] pry(main)> \"Now try defining some functions on you                       ",{}]]},"cursor":{"x":55}}],[0.080063,{"lines":{"47":[["[18] pry(main)> \"Now try defining some functions on your                      ",{}]]},"cursor":{"x":56}}],[0.055896,{"cursor":{"x":57}}],[0.151881,{"lines":{"47":[["[18] pry(main)> \"Now try defining some functions on your o                    ",{}]]},"cursor":{"x":58}}],[0.05575,{"lines":{"47":[["[18] pry(main)> \"Now try defining some functions on your ow                   ",{}]]},"cursor":{"x":59}}],[0.104176,{"lines":{"47":[["[18] pry(main)> \"Now try defining some functions on your own                  ",{}]]},"cursor":{"x":60}}],[0.360496,{"lines":{"47":[["[18] pry(main)> \"Now try defining some functions on your own!                 ",{}]]},"cursor":{"x":61}}],[0.295763,{"cursor":{"x":62}}],[2.671821,{"cursor":{"x":61}}],[1.120027,{"lines":{"47":[["[18] pry(main)> \"Now try defining some functions on your own!\"                ",{}]]},"cursor":{"x":62}}],[1.759818,{"lines":{"47":[["[18] pry(main)> \"Now try defining some functions on your own!                 ",{}]]},"cursor":{"x":61}}],[0.304343,{"cursor":{"x":62}}],[0.607582,{"cursor":{"x":61}}],[0.384285,{"cursor":{"x":62}}],[0.159779,{"lines":{"47":[["[18] pry(main)> \"Now try defining some functions on your own! F               ",{}]]},"cursor":{"x":63}}],[0.352057,{"lines":{"47":[["[18] pry(main)> \"Now try defining some functions on your own! Fo              ",{}]]},"cursor":{"x":64}}],[0.111833,{"lines":{"47":[["[18] pry(main)> \"Now try defining some functions on your own! For             ",{}]]},"cursor":{"x":65}}],[0.048203,{"cursor":{"x":66}}],[0.13575,{"lines":{"47":[["[18] pry(main)> \"Now try defining some functions on your own! For e           ",{}]]},"cursor":{"x":67}}],[0.104286,{"lines":{"47":[["[18] pry(main)> \"Now try defining some functions on your own! For ex          ",{}]]},"cursor":{"x":68}}],[0.103975,{"lines":{"47":[["[18] pry(main)> \"Now try defining some functions on your own! For exa         ",{}]]},"cursor":{"x":69}}],[0.096303,{"lines":{"47":[["[18] pry(main)> \"Now try defining some functions on your own! For exam        ",{}]]},"cursor":{"x":70}}],[0.095651,{"lines":{"47":[["[18] pry(main)> \"Now try defining some functions on your own! For examp       ",{}]]},"cursor":{"x":71}}],[0.072047,{"lines":{"47":[["[18] pry(main)> \"Now try defining some functions on your own! For exampl      ",{}]]},"cursor":{"x":72}}],[0.08801100000000001,{"lines":{"47":[["[18] pry(main)> \"Now try defining some functions on your own! For example     ",{}]]},"cursor":{"x":73}}],[0.287837,{"lines":{"47":[["[18] pry(main)> \"Now try defining some functions on your own! For example,    ",{}]]},"cursor":{"x":74}}],[1.296158,{"cursor":{"x":75}}],[0.10382,{"lines":{"47":[["[18] pry(main)> \"Now try defining some functions on your own! For example, l  ",{}]]},"cursor":{"x":76}}],[0.103873,{"lines":{"47":[["[18] pry(main)> \"Now try defining some functions on your own! For example, le ",{}]]},"cursor":{"x":77}}],[0.07201100000000001,{"lines":{"0":[[" do stuff with the arguments and return a new value.\"                         ",{}]],"1":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Methods are like math functions. They can take arguments, then do stuff wi",{"fg":2}]],"2":[["th the arguments and return a new value.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                     ",{}]],"3":[["[4] pry(main)> \"Here is an example method.\"                                   ",{}]],"4":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here is an example method.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                               ",{}]],"5":[["[5] pry(main)> def a                                                          ",{}]],"6":[["[5] pry(main)*   return 5                                                     ",{}]],"7":[["[5] pry(main)* end                                                            ",{}]],"8":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"9":[["[6] pry(main)> \"Here, the method is called 'a'. It is equivalent to writing th",{}]],"10":[["e following math function: a() = 5.\"                                          ",{}]],"11":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, the method is called 'a'. It is equivalent to writing the following ",{"fg":2}]],"12":[["math function: a() = 5.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                      ",{}]],"13":[["[7] pry(main)> \"Let's write a method that takes an argument.\"                 ",{}]],"14":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Let's write a method that takes an argument.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                             ",{}]],"15":[["[8] pry(main)> def square(x)                                                  ",{}]],"16":[["[8] pry(main)*   return x**2                                                  ",{}]],"17":[["[8] pry(main)* end                                                            ",{}]],"18":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"19":[["[9] pry(main)> \"The method above, called 'square', is equivalent to the follow",{}]],"20":[["ing: square(x) = x^2.\"                                                        ",{}]],"21":[["=> ",{}],["\"",{"fg":2,"bold":true}],["The method above, called 'square', is equivalent to the following: square(",{"fg":2}]],"22":[["x) = x^2.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{}]],"23":[["[10] pry(main)> \"To call a method, simply write it like you would any math fun",{}]],"24":[["ction: \"                                                                      ",{}]],"25":[["=> ",{}],["\"",{"fg":2,"bold":true}],["To call a method, simply write it like you would any math function: ",{"fg":2}],["\"",{"fg":2,"bold":true}],["     ",{}]],"26":[["[11] pry(main)> square(2)                                                     ",{}]],"27":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"28":[["[12] pry(main)> squre(3)                                                      ",{}]],"29":[["NoMethodError: undefined method `squre' for main:Object                       ",{}]],"30":[["from (pry):16:in `<main>'                                                     ",{}]],"31":[["[13] pry(main)> square(3)                                                     ",{}]],"32":[["=> ",{}],["9",{"fg":4,"bold":true}],["                                                                          ",{}]],"33":[["[14] pry(main)> \"Notice the error when I typed a function that did not exist.\"",{}]],"34":[["                                                                              ",{}]],"35":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Notice the error when I typed a function that did not exist.",{"fg":2}],["\"",{"fg":2,"bold":true}],["             ",{}]],"36":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create another.",{}]],"37":[["\"                                                                             ",{}]],"38":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are many types of errors in Ruby. Let's create another.",{"fg":2}],["\"",{"fg":2,"bold":true}],["            ",{}]],"39":[["[16] pry(main)> square                                                        ",{}]],"40":[["ArgumentError: wrong number of arguments (0 for 1)                            ",{}]],"41":[["from (pry):10:in `square'                                                     ",{}]],"42":[["[17] pry(main)> \"Here, you can see that I did not include enough arguments to ",{}]],"43":[["the function 'square'.\"                                                       ",{}]],"44":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, you can see that I did not include enough arguments to the function ",{"fg":2}]],"45":[["'square'.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{"fg":2}]],"46":[["[18] pry(main)> \"Now try defining some functions on your own! For example, let",{}]],"47":[["                                                                              ",{}]]},"cursor":{"x":0}}],[0.168057,{"lines":{"47":[["'                                                                             ",{}]]},"cursor":{"x":1}}],[0.144177,{"lines":{"47":[["'s                                                                            ",{}]]},"cursor":{"x":2}}],[0.047976,{"cursor":{"x":3}}],[0.255855,{"lines":{"47":[["'s w                                                                          ",{}]]},"cursor":{"x":4}}],[0.087961,{"lines":{"47":[["'s wr                                                                         ",{}]]},"cursor":{"x":5}}],[0.144222,{"lines":{"47":[["'s wri                                                                        ",{}]]},"cursor":{"x":6}}],[0.055929,{"lines":{"47":[["'s writ                                                                       ",{}]]},"cursor":{"x":7}}],[0.047687,{"lines":{"47":[["'s write                                                                      ",{}]]},"cursor":{"x":8}}],[0.128359,{"cursor":{"x":9}}],[0.103981,{"lines":{"47":[["'s write a                                                                    ",{}]]},"cursor":{"x":10}}],[0.128002,{"cursor":{"x":11}}],[0.687981,{"lines":{"47":[["'s write a f                                                                  ",{}]]},"cursor":{"x":12}}],[0.119976,{"lines":{"47":[["'s write a fu                                                                 ",{}]]},"cursor":{"x":13}}],[0.064022,{"lines":{"47":[["'s write a fun                                                                ",{}]]},"cursor":{"x":14}}],[0.079806,{"lines":{"47":[["'s write a func                                                               ",{}]]},"cursor":{"x":15}}],[0.047807,{"lines":{"47":[["'s write a funct                                                              ",{}]]},"cursor":{"x":16}}],[0.08837,{"lines":{"47":[["'s write a functi                                                             ",{}]]},"cursor":{"x":17}}],[0.063998,{"lines":{"47":[["'s write a functio                                                            ",{}]]},"cursor":{"x":18}}],[0.047853,{"lines":{"47":[["'s write a function                                                           ",{}]]},"cursor":{"x":19}}],[0.20795,{"cursor":{"x":20}}],[0.264209,{"lines":{"47":[["'s write a function c                                                         ",{}]]},"cursor":{"x":21}}],[0.063961,{"lines":{"47":[["'s write a function ca                                                        ",{}]]},"cursor":{"x":22}}],[0.039997,{"lines":{"47":[["'s write a function cal                                                       ",{}]]},"cursor":{"x":23}}],[0.152003,{"lines":{"47":[["'s write a function call                                                      ",{}]]},"cursor":{"x":24}}],[0.047998,{"lines":{"47":[["'s write a function calle                                                     ",{}]]},"cursor":{"x":25}}],[0.055984,{"lines":{"47":[["'s write a function called                                                    ",{}]]},"cursor":{"x":26}}],[0.039824,{"cursor":{"x":27}}],[13.287702,{"lines":{"47":[["'s write a function called _                                                  ",{}]]},"cursor":{"x":28}}],[0.287993,{"lines":{"47":[["'s write a function called                                                    ",{}]]},"cursor":{"x":27}}],[0.144146,{"lines":{"47":[["'s write a function called t                                                  ",{}]]},"cursor":{"x":28}}],[0.071757,{"lines":{"47":[["'s write a function called to                                                 ",{}]]},"cursor":{"x":29}}],[0.232092,{"lines":{"47":[["'s write a function called to_                                                ",{}]]},"cursor":{"x":30}}],[0.264101,{"lines":{"47":[["'s write a function called to_t                                               ",{}]]},"cursor":{"x":31}}],[0.06392100000000001,{"lines":{"47":[["'s write a function called to_th                                              ",{}]]},"cursor":{"x":32}}],[0.09607,{"lines":{"47":[["'s write a function called to_the                                             ",{}]]},"cursor":{"x":33}}],[0.200072,{"lines":{"47":[["'s write a function called to_the_                                            ",{}]]},"cursor":{"x":34}}],[0.215638,{"lines":{"47":[["'s write a function called to_the_n                                           ",{}]]},"cursor":{"x":35}}],[0.304284,{"lines":{"47":[["'s write a function called to_the_nt                                          ",{}]]},"cursor":{"x":36}}],[0.072135,{"lines":{"47":[["'s write a function called to_the_nth                                         ",{}]]},"cursor":{"x":37}}],[1.031682,{"cursor":{"x":38}}],[0.15208,{"lines":{"47":[["'s write a function called to_the_nth t                                       ",{}]]},"cursor":{"x":39}}],[0.080055,{"lines":{"47":[["'s write a function called to_the_nth th                                      ",{}]]},"cursor":{"x":40}}],[0.143986,{"lines":{"47":[["'s write a function called to_the_nth tha                                     ",{}]]},"cursor":{"x":41}}],[0.06400400000000001,{"lines":{"47":[["'s write a function called to_the_nth that                                    ",{}]]},"cursor":{"x":42}}],[0.048151,{"cursor":{"x":43}}],[0.143825,{"lines":{"47":[["'s write a function called to_the_nth that t                                  ",{}]]},"cursor":{"x":44}}],[0.079836,{"lines":{"47":[["'s write a function called to_the_nth that ta                                 ",{}]]},"cursor":{"x":45}}],[0.072092,{"lines":{"47":[["'s write a function called to_the_nth that tak                                ",{}]]},"cursor":{"x":46}}],[0.06386600000000001,{"lines":{"47":[["'s write a function called to_the_nth that take                               ",{}]]},"cursor":{"x":47}}],[0.120236,{"lines":{"47":[["'s write a function called to_the_nth that takes                              ",{}]]},"cursor":{"x":48}}],[0.127888,{"cursor":{"x":49}}],[0.416023,{"lines":{"47":[["'s write a function called to_the_nth that takes t                            ",{}]]},"cursor":{"x":50}}],[0.144038,{"lines":{"47":[["'s write a function called to_the_nth that takes tw                           ",{}]]},"cursor":{"x":51}}],[0.135971,{"lines":{"47":[["'s write a function called to_the_nth that takes two                          ",{}]]},"cursor":{"x":52}}],[0.09600499999999999,{"cursor":{"x":53}}],[0.247869,{"lines":{"47":[["'s write a function called to_the_nth that takes two a                        ",{}]]},"cursor":{"x":54}}],[0.056125,{"lines":{"47":[["'s write a function called to_the_nth that takes two ar                       ",{}]]},"cursor":{"x":55}}],[0.055964,{"lines":{"47":[["'s write a function called to_the_nth that takes two arg                      ",{}]]},"cursor":{"x":56}}],[0.071963,{"lines":{"47":[["'s write a function called to_the_nth that takes two argu                     ",{}]]},"cursor":{"x":57}}],[0.176052,{"lines":{"47":[["'s write a function called to_the_nth that takes two argum                    ",{}]]},"cursor":{"x":58}}],[0.080016,{"lines":{"47":[["'s write a function called to_the_nth that takes two argume                   ",{}]]},"cursor":{"x":59}}],[0.072007,{"lines":{"47":[["'s write a function called to_the_nth that takes two argumen                  ",{}]]},"cursor":{"x":60}}],[0.048005,{"lines":{"47":[["'s write a function called to_the_nth that takes two argument                 ",{}]]},"cursor":{"x":61}}],[0.07981100000000001,{"lines":{"47":[["'s write a function called to_the_nth that takes two arguments                ",{}]]},"cursor":{"x":62}}],[0.168189,{"lines":{"47":[["'s write a function called to_the_nth that takes two arguments:               ",{}]]},"cursor":{"x":63}}],[0.095981,{"cursor":{"x":64}}],[0.127911,{"lines":{"47":[["'s write a function called to_the_nth that takes two arguments: a             ",{}]]},"cursor":{"x":65}}],[0.088037,{"cursor":{"x":66}}],[0.160034,{"lines":{"47":[["'s write a function called to_the_nth that takes two arguments: a b           ",{}]]},"cursor":{"x":67}}],[0.088035,{"lines":{"47":[["'s write a function called to_the_nth that takes two arguments: a ba          ",{}]]},"cursor":{"x":68}}],[0.111826,{"lines":{"47":[["'s write a function called to_the_nth that takes two arguments: a bas         ",{}]]},"cursor":{"x":69}}],[0.063902,{"lines":{"47":[["'s write a function called to_the_nth that takes two arguments: a base        ",{}]]},"cursor":{"x":70}}],[0.072149,{"cursor":{"x":71}}],[0.112074,{"lines":{"47":[["'s write a function called to_the_nth that takes two arguments: a base a      ",{}]]},"cursor":{"x":72}}],[0.112132,{"lines":{"47":[["'s write a function called to_the_nth that takes two arguments: a base an     ",{}]]},"cursor":{"x":73}}],[0.07957,{"lines":{"47":[["'s write a function called to_the_nth that takes two arguments: a base and    ",{}]]},"cursor":{"x":74}}],[0.08018400000000001,{"cursor":{"x":75}}],[0.095738,{"lines":{"47":[["'s write a function called to_the_nth that takes two arguments: a base and a  ",{}]]},"cursor":{"x":76}}],[0.120251,{"cursor":{"x":77}}],[0.280142,{"lines":{"0":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Methods are like math functions. They can take arguments, then do stuff wi",{"fg":2}]],"1":[["th the arguments and return a new value.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                     ",{}]],"2":[["[4] pry(main)> \"Here is an example method.\"                                   ",{}]],"3":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here is an example method.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                               ",{}]],"4":[["[5] pry(main)> def a                                                          ",{}]],"5":[["[5] pry(main)*   return 5                                                     ",{}]],"6":[["[5] pry(main)* end                                                            ",{}]],"7":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"8":[["[6] pry(main)> \"Here, the method is called 'a'. It is equivalent to writing th",{}]],"9":[["e following math function: a() = 5.\"                                          ",{}]],"10":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, the method is called 'a'. It is equivalent to writing the following ",{"fg":2}]],"11":[["math function: a() = 5.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                      ",{}]],"12":[["[7] pry(main)> \"Let's write a method that takes an argument.\"                 ",{}]],"13":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Let's write a method that takes an argument.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                             ",{}]],"14":[["[8] pry(main)> def square(x)                                                  ",{}]],"15":[["[8] pry(main)*   return x**2                                                  ",{}]],"16":[["[8] pry(main)* end                                                            ",{}]],"17":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"18":[["[9] pry(main)> \"The method above, called 'square', is equivalent to the follow",{}]],"19":[["ing: square(x) = x^2.\"                                                        ",{}]],"20":[["=> ",{}],["\"",{"fg":2,"bold":true}],["The method above, called 'square', is equivalent to the following: square(",{"fg":2}]],"21":[["x) = x^2.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{}]],"22":[["[10] pry(main)> \"To call a method, simply write it like you would any math fun",{}]],"23":[["ction: \"                                                                      ",{}]],"24":[["=> ",{}],["\"",{"fg":2,"bold":true}],["To call a method, simply write it like you would any math function: ",{"fg":2}],["\"",{"fg":2,"bold":true}],["     ",{}]],"25":[["[11] pry(main)> square(2)                                                     ",{}]],"26":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"27":[["[12] pry(main)> squre(3)                                                      ",{}]],"28":[["NoMethodError: undefined method `squre' for main:Object                       ",{}]],"29":[["from (pry):16:in `<main>'                                                     ",{}]],"30":[["[13] pry(main)> square(3)                                                     ",{}]],"31":[["=> ",{}],["9",{"fg":4,"bold":true}],["                                                                          ",{}]],"32":[["[14] pry(main)> \"Notice the error when I typed a function that did not exist.\"",{}]],"33":[["                                                                              ",{}]],"34":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Notice the error when I typed a function that did not exist.",{"fg":2}],["\"",{"fg":2,"bold":true}],["             ",{}]],"35":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create another.",{}]],"36":[["\"                                                                             ",{}]],"37":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are many types of errors in Ruby. Let's create another.",{"fg":2}],["\"",{"fg":2,"bold":true}],["            ",{}]],"38":[["[16] pry(main)> square                                                        ",{}]],"39":[["ArgumentError: wrong number of arguments (0 for 1)                            ",{}]],"40":[["from (pry):10:in `square'                                                     ",{}]],"41":[["[17] pry(main)> \"Here, you can see that I did not include enough arguments to ",{}]],"42":[["the function 'square'.\"                                                       ",{}]],"43":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, you can see that I did not include enough arguments to the function ",{"fg":2}]],"44":[["'square'.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{"fg":2}]],"45":[["[18] pry(main)> \"Now try defining some functions on your own! For example, let",{}]],"46":[["'s write a function called to_the_nth that takes two arguments: a base and a p",{}]],"47":[["                                                                              ",{}]]},"cursor":{"x":0}}],[0.07979,{"lines":{"47":[["o                                                                             ",{}]]},"cursor":{"x":1}}],[0.192155,{"lines":{"47":[["ow                                                                            ",{}]]},"cursor":{"x":2}}],[0.039997,{"lines":{"47":[["owe                                                                           ",{}]]},"cursor":{"x":3}}],[0.071744,{"lines":{"47":[["ower                                                                          ",{}]]},"cursor":{"x":4}}],[0.18427,{"lines":{"47":[["ower.                                                                         ",{}]]},"cursor":{"x":5}}],[0.647873,{"lines":{"47":[["ower                                                                          ",{}]]},"cursor":{"x":4}}],[0.256083,{"lines":{"47":[["ower:                                                                         ",{}]]},"cursor":{"x":5}}],[0.18402,{"lines":{"47":[["ower:\"                                                                        ",{}]]},"cursor":{"x":6}}],[0.303725,{"lines":{"0":[["th the arguments and return a new value.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                     ",{}]],"1":[["[4] pry(main)> \"Here is an example method.\"                                   ",{}]],"2":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here is an example method.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                               ",{}]],"3":[["[5] pry(main)> def a                                                          ",{}]],"4":[["[5] pry(main)*   return 5                                                     ",{}]],"5":[["[5] pry(main)* end                                                            ",{}]],"6":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"7":[["[6] pry(main)> \"Here, the method is called 'a'. It is equivalent to writing th",{}]],"8":[["e following math function: a() = 5.\"                                          ",{}]],"9":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, the method is called 'a'. It is equivalent to writing the following ",{"fg":2}]],"10":[["math function: a() = 5.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                      ",{}]],"11":[["[7] pry(main)> \"Let's write a method that takes an argument.\"                 ",{}]],"12":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Let's write a method that takes an argument.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                             ",{}]],"13":[["[8] pry(main)> def square(x)                                                  ",{}]],"14":[["[8] pry(main)*   return x**2                                                  ",{}]],"15":[["[8] pry(main)* end                                                            ",{}]],"16":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"17":[["[9] pry(main)> \"The method above, called 'square', is equivalent to the follow",{}]],"18":[["ing: square(x) = x^2.\"                                                        ",{}]],"19":[["=> ",{}],["\"",{"fg":2,"bold":true}],["The method above, called 'square', is equivalent to the following: square(",{"fg":2}]],"20":[["x) = x^2.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{}]],"21":[["[10] pry(main)> \"To call a method, simply write it like you would any math fun",{}]],"22":[["ction: \"                                                                      ",{}]],"23":[["=> ",{}],["\"",{"fg":2,"bold":true}],["To call a method, simply write it like you would any math function: ",{"fg":2}],["\"",{"fg":2,"bold":true}],["     ",{}]],"24":[["[11] pry(main)> square(2)                                                     ",{}]],"25":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"26":[["[12] pry(main)> squre(3)                                                      ",{}]],"27":[["NoMethodError: undefined method `squre' for main:Object                       ",{}]],"28":[["from (pry):16:in `<main>'                                                     ",{}]],"29":[["[13] pry(main)> square(3)                                                     ",{}]],"30":[["=> ",{}],["9",{"fg":4,"bold":true}],["                                                                          ",{}]],"31":[["[14] pry(main)> \"Notice the error when I typed a function that did not exist.\"",{}]],"32":[["                                                                              ",{}]],"33":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Notice the error when I typed a function that did not exist.",{"fg":2}],["\"",{"fg":2,"bold":true}],["             ",{}]],"34":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create another.",{}]],"35":[["\"                                                                             ",{}]],"36":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are many types of errors in Ruby. Let's create another.",{"fg":2}],["\"",{"fg":2,"bold":true}],["            ",{}]],"37":[["[16] pry(main)> square                                                        ",{}]],"38":[["ArgumentError: wrong number of arguments (0 for 1)                            ",{}]],"39":[["from (pry):10:in `square'                                                     ",{}]],"40":[["[17] pry(main)> \"Here, you can see that I did not include enough arguments to ",{}]],"41":[["the function 'square'.\"                                                       ",{}]],"42":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, you can see that I did not include enough arguments to the function ",{"fg":2}]],"43":[["'square'.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{"fg":2}]],"44":[["[18] pry(main)> \"Now try defining some functions on your own! For example, let",{}]],"45":[["'s write a function called to_the_nth that takes two arguments: a base and a p",{}]],"46":[["ower:\"                                                                        ",{}]],"47":[["                                                                              ",{}]]},"cursor":{"x":0}}],[0.003648,{"lines":{"0":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here is an example method.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                               ",{}]],"1":[["[5] pry(main)> def a                                                          ",{}]],"2":[["[5] pry(main)*   return 5                                                     ",{}]],"3":[["[5] pry(main)* end                                                            ",{}]],"4":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"5":[["[6] pry(main)> \"Here, the method is called 'a'. It is equivalent to writing th",{}]],"6":[["e following math function: a() = 5.\"                                          ",{}]],"7":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, the method is called 'a'. It is equivalent to writing the following ",{"fg":2}]],"8":[["math function: a() = 5.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                      ",{}]],"9":[["[7] pry(main)> \"Let's write a method that takes an argument.\"                 ",{}]],"10":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Let's write a method that takes an argument.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                             ",{}]],"11":[["[8] pry(main)> def square(x)                                                  ",{}]],"12":[["[8] pry(main)*   return x**2                                                  ",{}]],"13":[["[8] pry(main)* end                                                            ",{}]],"14":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"15":[["[9] pry(main)> \"The method above, called 'square', is equivalent to the follow",{}]],"16":[["ing: square(x) = x^2.\"                                                        ",{}]],"17":[["=> ",{}],["\"",{"fg":2,"bold":true}],["The method above, called 'square', is equivalent to the following: square(",{"fg":2}]],"18":[["x) = x^2.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{}]],"19":[["[10] pry(main)> \"To call a method, simply write it like you would any math fun",{}]],"20":[["ction: \"                                                                      ",{}]],"21":[["=> ",{}],["\"",{"fg":2,"bold":true}],["To call a method, simply write it like you would any math function: ",{"fg":2}],["\"",{"fg":2,"bold":true}],["     ",{}]],"22":[["[11] pry(main)> square(2)                                                     ",{}]],"23":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"24":[["[12] pry(main)> squre(3)                                                      ",{}]],"25":[["NoMethodError: undefined method `squre' for main:Object                       ",{}]],"26":[["from (pry):16:in `<main>'                                                     ",{}]],"27":[["[13] pry(main)> square(3)                                                     ",{}]],"28":[["=> ",{}],["9",{"fg":4,"bold":true}],["                                                                          ",{}]],"29":[["[14] pry(main)> \"Notice the error when I typed a function that did not exist.\"",{}]],"30":[["                                                                              ",{}]],"31":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Notice the error when I typed a function that did not exist.",{"fg":2}],["\"",{"fg":2,"bold":true}],["             ",{}]],"32":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create another.",{}]],"33":[["\"                                                                             ",{}]],"34":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are many types of errors in Ruby. Let's create another.",{"fg":2}],["\"",{"fg":2,"bold":true}],["            ",{}]],"35":[["[16] pry(main)> square                                                        ",{}]],"36":[["ArgumentError: wrong number of arguments (0 for 1)                            ",{}]],"37":[["from (pry):10:in `square'                                                     ",{}]],"38":[["[17] pry(main)> \"Here, you can see that I did not include enough arguments to ",{}]],"39":[["the function 'square'.\"                                                       ",{}]],"40":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, you can see that I did not include enough arguments to the function ",{"fg":2}]],"41":[["'square'.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{"fg":2}]],"42":[["[18] pry(main)> \"Now try defining some functions on your own! For example, let",{}]],"43":[["'s write a function called to_the_nth that takes two arguments: a base and a p",{}]],"44":[["ower:\"                                                                        ",{}]],"45":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Now try defining some functions on your own! For example, let's write a fu",{"fg":2}]],"46":[["nction called to_the_nth that takes two arguments: a base and a power:",{"fg":2}],["\"",{"fg":2,"bold":true}],["       ",{"fg":2}]],"47":[["[19] pry(main)>                                                               ",{}]]},"cursor":{"x":16}}],[0.260561,{"lines":{"47":[["[19] pry(main)> d                                                             ",{}]]},"cursor":{"x":17}}],[0.09583899999999999,{"lines":{"47":[["[19] pry(main)> de                                                            ",{}]]},"cursor":{"x":18}}],[0.08799,{"lines":{"47":[["[19] pry(main)> def                                                           ",{}]]},"cursor":{"x":19}}],[0.039883,{"cursor":{"x":20}}],[1.064318,{"lines":{"47":[["[19] pry(main)> def t                                                         ",{}]]},"cursor":{"x":21}}],[0.055879,{"lines":{"47":[["[19] pry(main)> def to                                                        ",{}]]},"cursor":{"x":22}}],[0.224087,{"lines":{"47":[["[19] pry(main)> def to_                                                       ",{}]]},"cursor":{"x":23}}],[0.152028,{"lines":{"47":[["[19] pry(main)> def to_t                                                      ",{}]]},"cursor":{"x":24}}],[0.06388000000000001,{"lines":{"47":[["[19] pry(main)> def to_th                                                     ",{}]]},"cursor":{"x":25}}],[0.264075,{"lines":{"47":[["[19] pry(main)> def to_the                                                    ",{}]]},"cursor":{"x":26}}],[0.271992,{"lines":{"47":[["[19] pry(main)> def to_the_                                                   ",{}]]},"cursor":{"x":27}}],[0.255871,{"lines":{"47":[["[19] pry(main)> def to_the_n                                                  ",{}]]},"cursor":{"x":28}}],[0.159881,{"lines":{"47":[["[19] pry(main)> def to_the_nt                                                 ",{}]]},"cursor":{"x":29}}],[0.06407,{"lines":{"47":[["[19] pry(main)> def to_the_nth                                                ",{}]]},"cursor":{"x":30}}],[0.264133,{"lines":{"47":[["[19] pry(main)> def to_the_nth(                                               ",{}]]},"cursor":{"x":31}}],[0.704023,{"lines":{"47":[["[19] pry(main)> def to_the_nth(b                                              ",{}]]},"cursor":{"x":32}}],[0.12792,{"lines":{"47":[["[19] pry(main)> def to_the_nth(ba                                             ",{}]]},"cursor":{"x":33}}],[0.080105,{"lines":{"47":[["[19] pry(main)> def to_the_nth(bas                                            ",{}]]},"cursor":{"x":34}}],[0.047943,{"lines":{"47":[["[19] pry(main)> def to_the_nth(base                                           ",{}]]},"cursor":{"x":35}}],[0.096013,{"lines":{"47":[["[19] pry(main)> def to_the_nth(base,                                          ",{}]]},"cursor":{"x":36}}],[0.087836,{"cursor":{"x":37}}],[0.088139,{"lines":{"47":[["[19] pry(main)> def to_the_nth(base, p                                        ",{}]]},"cursor":{"x":38}}],[0.055842,{"lines":{"47":[["[19] pry(main)> def to_the_nth(base, po                                       ",{}]]},"cursor":{"x":39}}],[0.112192,{"lines":{"47":[["[19] pry(main)> def to_the_nth(base, pow                                      ",{}]]},"cursor":{"x":40}}],[0.048019,{"lines":{"47":[["[19] pry(main)> def to_the_nth(base, powe                                     ",{}]]},"cursor":{"x":41}}],[0.039802,{"lines":{"47":[["[19] pry(main)> def to_the_nth(base, power                                    ",{}]]},"cursor":{"x":42}}],[0.1921,{"lines":{"47":[["[19] pry(main)> def to_the_nth(base, power)                                   ",{}]]},"cursor":{"x":43}}],[0.775957,{"lines":{"0":[["[5] pry(main)> def a                                                          ",{}]],"1":[["[5] pry(main)*   return 5                                                     ",{}]],"2":[["[5] pry(main)* end                                                            ",{}]],"3":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"4":[["[6] pry(main)> \"Here, the method is called 'a'. It is equivalent to writing th",{}]],"5":[["e following math function: a() = 5.\"                                          ",{}]],"6":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, the method is called 'a'. It is equivalent to writing the following ",{"fg":2}]],"7":[["math function: a() = 5.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                      ",{}]],"8":[["[7] pry(main)> \"Let's write a method that takes an argument.\"                 ",{}]],"9":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Let's write a method that takes an argument.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                             ",{}]],"10":[["[8] pry(main)> def square(x)                                                  ",{}]],"11":[["[8] pry(main)*   return x**2                                                  ",{}]],"12":[["[8] pry(main)* end                                                            ",{}]],"13":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"14":[["[9] pry(main)> \"The method above, called 'square', is equivalent to the follow",{}]],"15":[["ing: square(x) = x^2.\"                                                        ",{}]],"16":[["=> ",{}],["\"",{"fg":2,"bold":true}],["The method above, called 'square', is equivalent to the following: square(",{"fg":2}]],"17":[["x) = x^2.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{}]],"18":[["[10] pry(main)> \"To call a method, simply write it like you would any math fun",{}]],"19":[["ction: \"                                                                      ",{}]],"20":[["=> ",{}],["\"",{"fg":2,"bold":true}],["To call a method, simply write it like you would any math function: ",{"fg":2}],["\"",{"fg":2,"bold":true}],["     ",{}]],"21":[["[11] pry(main)> square(2)                                                     ",{}]],"22":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"23":[["[12] pry(main)> squre(3)                                                      ",{}]],"24":[["NoMethodError: undefined method `squre' for main:Object                       ",{}]],"25":[["from (pry):16:in `<main>'                                                     ",{}]],"26":[["[13] pry(main)> square(3)                                                     ",{}]],"27":[["=> ",{}],["9",{"fg":4,"bold":true}],["                                                                          ",{}]],"28":[["[14] pry(main)> \"Notice the error when I typed a function that did not exist.\"",{}]],"29":[["                                                                              ",{}]],"30":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Notice the error when I typed a function that did not exist.",{"fg":2}],["\"",{"fg":2,"bold":true}],["             ",{}]],"31":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create another.",{}]],"32":[["\"                                                                             ",{}]],"33":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are many types of errors in Ruby. Let's create another.",{"fg":2}],["\"",{"fg":2,"bold":true}],["            ",{}]],"34":[["[16] pry(main)> square                                                        ",{}]],"35":[["ArgumentError: wrong number of arguments (0 for 1)                            ",{}]],"36":[["from (pry):10:in `square'                                                     ",{}]],"37":[["[17] pry(main)> \"Here, you can see that I did not include enough arguments to ",{}]],"38":[["the function 'square'.\"                                                       ",{}]],"39":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, you can see that I did not include enough arguments to the function ",{"fg":2}]],"40":[["'square'.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{"fg":2}]],"41":[["[18] pry(main)> \"Now try defining some functions on your own! For example, let",{}]],"42":[["'s write a function called to_the_nth that takes two arguments: a base and a p",{}]],"43":[["ower:\"                                                                        ",{}]],"44":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Now try defining some functions on your own! For example, let's write a fu",{"fg":2}]],"45":[["nction called to_the_nth that takes two arguments: a base and a power:",{"fg":2}],["\"",{"fg":2,"bold":true}],["       ",{"fg":2}]],"46":[["[19] pry(main)> def to_the_nth(base, power)                                   ",{}]],"47":[["                                                                              ",{}]]},"cursor":{"x":0}}],[0.002966,{"lines":{"47":[["[19] pry(main)*                                                               ",{}]]},"cursor":{"x":18}}],[0.893087,{"lines":{"47":[["[19] pry(main)*   b                                                           ",{}]]},"cursor":{"x":19}}],[0.112009,{"lines":{"47":[["[19] pry(main)*   ba                                                          ",{}]]},"cursor":{"x":20}}],[0.063998,{"lines":{"47":[["[19] pry(main)*   bas                                                         ",{}]]},"cursor":{"x":21}}],[0.047904,{"lines":{"47":[["[19] pry(main)*   base                                                        ",{}]]},"cursor":{"x":22}}],[0.351904,{"lines":{"47":[["[19] pry(main)*   base*                                                       ",{}]]},"cursor":{"x":23}}],[0.160028,{"lines":{"47":[["[19] pry(main)*   base**                                                      ",{}]]},"cursor":{"x":24}}],[0.368109,{"lines":{"47":[["[19] pry(main)*   base**p                                                     ",{}]]},"cursor":{"x":25}}],[0.056,{"lines":{"47":[["[19] pry(main)*   base**po                                                    ",{}]]},"cursor":{"x":26}}],[0.071979,{"lines":{"47":[["[19] pry(main)*   base**pow                                                   ",{}]]},"cursor":{"x":27}}],[0.039856,{"lines":{"47":[["[19] pry(main)*   base**powe                                                  ",{}]]},"cursor":{"x":28}}],[0.040042,{"lines":{"47":[["[19] pry(main)*   base**power                                                 ",{}]]},"cursor":{"x":29}}],[0.415931,{"lines":{"0":[["[5] pry(main)*   return 5                                                     ",{}]],"1":[["[5] pry(main)* end                                                            ",{}]],"2":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"3":[["[6] pry(main)> \"Here, the method is called 'a'. It is equivalent to writing th",{}]],"4":[["e following math function: a() = 5.\"                                          ",{}]],"5":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, the method is called 'a'. It is equivalent to writing the following ",{"fg":2}]],"6":[["math function: a() = 5.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                      ",{}]],"7":[["[7] pry(main)> \"Let's write a method that takes an argument.\"                 ",{}]],"8":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Let's write a method that takes an argument.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                             ",{}]],"9":[["[8] pry(main)> def square(x)                                                  ",{}]],"10":[["[8] pry(main)*   return x**2                                                  ",{}]],"11":[["[8] pry(main)* end                                                            ",{}]],"12":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"13":[["[9] pry(main)> \"The method above, called 'square', is equivalent to the follow",{}]],"14":[["ing: square(x) = x^2.\"                                                        ",{}]],"15":[["=> ",{}],["\"",{"fg":2,"bold":true}],["The method above, called 'square', is equivalent to the following: square(",{"fg":2}]],"16":[["x) = x^2.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{}]],"17":[["[10] pry(main)> \"To call a method, simply write it like you would any math fun",{}]],"18":[["ction: \"                                                                      ",{}]],"19":[["=> ",{}],["\"",{"fg":2,"bold":true}],["To call a method, simply write it like you would any math function: ",{"fg":2}],["\"",{"fg":2,"bold":true}],["     ",{}]],"20":[["[11] pry(main)> square(2)                                                     ",{}]],"21":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"22":[["[12] pry(main)> squre(3)                                                      ",{}]],"23":[["NoMethodError: undefined method `squre' for main:Object                       ",{}]],"24":[["from (pry):16:in `<main>'                                                     ",{}]],"25":[["[13] pry(main)> square(3)                                                     ",{}]],"26":[["=> ",{}],["9",{"fg":4,"bold":true}],["                                                                          ",{}]],"27":[["[14] pry(main)> \"Notice the error when I typed a function that did not exist.\"",{}]],"28":[["                                                                              ",{}]],"29":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Notice the error when I typed a function that did not exist.",{"fg":2}],["\"",{"fg":2,"bold":true}],["             ",{}]],"30":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create another.",{}]],"31":[["\"                                                                             ",{}]],"32":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are many types of errors in Ruby. Let's create another.",{"fg":2}],["\"",{"fg":2,"bold":true}],["            ",{}]],"33":[["[16] pry(main)> square                                                        ",{}]],"34":[["ArgumentError: wrong number of arguments (0 for 1)                            ",{}]],"35":[["from (pry):10:in `square'                                                     ",{}]],"36":[["[17] pry(main)> \"Here, you can see that I did not include enough arguments to ",{}]],"37":[["the function 'square'.\"                                                       ",{}]],"38":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, you can see that I did not include enough arguments to the function ",{"fg":2}]],"39":[["'square'.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{"fg":2}]],"40":[["[18] pry(main)> \"Now try defining some functions on your own! For example, let",{}]],"41":[["'s write a function called to_the_nth that takes two arguments: a base and a p",{}]],"42":[["ower:\"                                                                        ",{}]],"43":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Now try defining some functions on your own! For example, let's write a fu",{"fg":2}]],"44":[["nction called to_the_nth that takes two arguments: a base and a power:",{"fg":2}],["\"",{"fg":2,"bold":true}],["       ",{"fg":2}]],"45":[["[19] pry(main)> def to_the_nth(base, power)                                   ",{}]],"46":[["[19] pry(main)*   base**power                                                 ",{}]],"47":[["                                                                              ",{}]]},"cursor":{"x":0}}],[0.003032,{"lines":{"47":[["[19] pry(main)*                                                               ",{}]]},"cursor":{"x":18}}],[0.6771239999999999,{"lines":{"47":[["[19] pry(main)*   e                                                           ",{}]]},"cursor":{"x":19}}],[0.111964,{"lines":{"47":[["[19] pry(main)*   en                                                          ",{}]]},"cursor":{"x":20}}],[0.064055,{"lines":{"47":[["[19] pry(main)*   end                                                         ",{}]]},"cursor":{"x":21}}],[0.271844,{"lines":{"0":[["[5] pry(main)* end                                                            ",{}]],"1":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"2":[["[6] pry(main)> \"Here, the method is called 'a'. It is equivalent to writing th",{}]],"3":[["e following math function: a() = 5.\"                                          ",{}]],"4":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, the method is called 'a'. It is equivalent to writing the following ",{"fg":2}]],"5":[["math function: a() = 5.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                      ",{}]],"6":[["[7] pry(main)> \"Let's write a method that takes an argument.\"                 ",{}]],"7":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Let's write a method that takes an argument.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                             ",{}]],"8":[["[8] pry(main)> def square(x)                                                  ",{}]],"9":[["[8] pry(main)*   return x**2                                                  ",{}]],"10":[["[8] pry(main)* end                                                            ",{}]],"11":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"12":[["[9] pry(main)> \"The method above, called 'square', is equivalent to the follow",{}]],"13":[["ing: square(x) = x^2.\"                                                        ",{}]],"14":[["=> ",{}],["\"",{"fg":2,"bold":true}],["The method above, called 'square', is equivalent to the following: square(",{"fg":2}]],"15":[["x) = x^2.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{}]],"16":[["[10] pry(main)> \"To call a method, simply write it like you would any math fun",{}]],"17":[["ction: \"                                                                      ",{}]],"18":[["=> ",{}],["\"",{"fg":2,"bold":true}],["To call a method, simply write it like you would any math function: ",{"fg":2}],["\"",{"fg":2,"bold":true}],["     ",{}]],"19":[["[11] pry(main)> square(2)                                                     ",{}]],"20":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"21":[["[12] pry(main)> squre(3)                                                      ",{}]],"22":[["NoMethodError: undefined method `squre' for main:Object                       ",{}]],"23":[["from (pry):16:in `<main>'                                                     ",{}]],"24":[["[13] pry(main)> square(3)                                                     ",{}]],"25":[["=> ",{}],["9",{"fg":4,"bold":true}],["                                                                          ",{}]],"26":[["[14] pry(main)> \"Notice the error when I typed a function that did not exist.\"",{}]],"27":[["                                                                              ",{}]],"28":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Notice the error when I typed a function that did not exist.",{"fg":2}],["\"",{"fg":2,"bold":true}],["             ",{}]],"29":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create another.",{}]],"30":[["\"                                                                             ",{}]],"31":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are many types of errors in Ruby. Let's create another.",{"fg":2}],["\"",{"fg":2,"bold":true}],["            ",{}]],"32":[["[16] pry(main)> square                                                        ",{}]],"33":[["ArgumentError: wrong number of arguments (0 for 1)                            ",{}]],"34":[["from (pry):10:in `square'                                                     ",{}]],"35":[["[17] pry(main)> \"Here, you can see that I did not include enough arguments to ",{}]],"36":[["the function 'square'.\"                                                       ",{}]],"37":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, you can see that I did not include enough arguments to the function ",{"fg":2}]],"38":[["'square'.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{"fg":2}]],"39":[["[18] pry(main)> \"Now try defining some functions on your own! For example, let",{}]],"40":[["'s write a function called to_the_nth that takes two arguments: a base and a p",{}]],"41":[["ower:\"                                                                        ",{}]],"42":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Now try defining some functions on your own! For example, let's write a fu",{"fg":2}]],"43":[["nction called to_the_nth that takes two arguments: a base and a power:",{"fg":2}],["\"",{"fg":2,"bold":true}],["       ",{"fg":2}]],"44":[["[19] pry(main)> def to_the_nth(base, power)                                   ",{}]],"45":[["[19] pry(main)*   base**power                                                 ",{}]],"46":[["[19] pry(main)*   end                                                         ",{}]],"47":[["                                                                              ",{}]]},"cursor":{"x":0}}],[0.003405,{"lines":{"0":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"1":[["[6] pry(main)> \"Here, the method is called 'a'. It is equivalent to writing th",{}]],"2":[["e following math function: a() = 5.\"                                          ",{}]],"3":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, the method is called 'a'. It is equivalent to writing the following ",{"fg":2}]],"4":[["math function: a() = 5.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                      ",{}]],"5":[["[7] pry(main)> \"Let's write a method that takes an argument.\"                 ",{}]],"6":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Let's write a method that takes an argument.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                             ",{}]],"7":[["[8] pry(main)> def square(x)                                                  ",{}]],"8":[["[8] pry(main)*   return x**2                                                  ",{}]],"9":[["[8] pry(main)* end                                                            ",{}]],"10":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"11":[["[9] pry(main)> \"The method above, called 'square', is equivalent to the follow",{}]],"12":[["ing: square(x) = x^2.\"                                                        ",{}]],"13":[["=> ",{}],["\"",{"fg":2,"bold":true}],["The method above, called 'square', is equivalent to the following: square(",{"fg":2}]],"14":[["x) = x^2.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{}]],"15":[["[10] pry(main)> \"To call a method, simply write it like you would any math fun",{}]],"16":[["ction: \"                                                                      ",{}]],"17":[["=> ",{}],["\"",{"fg":2,"bold":true}],["To call a method, simply write it like you would any math function: ",{"fg":2}],["\"",{"fg":2,"bold":true}],["     ",{}]],"18":[["[11] pry(main)> square(2)                                                     ",{}]],"19":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"20":[["[12] pry(main)> squre(3)                                                      ",{}]],"21":[["NoMethodError: undefined method `squre' for main:Object                       ",{}]],"22":[["from (pry):16:in `<main>'                                                     ",{}]],"23":[["[13] pry(main)> square(3)                                                     ",{}]],"24":[["=> ",{}],["9",{"fg":4,"bold":true}],["                                                                          ",{}]],"25":[["[14] pry(main)> \"Notice the error when I typed a function that did not exist.\"",{}]],"26":[["                                                                              ",{}]],"27":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Notice the error when I typed a function that did not exist.",{"fg":2}],["\"",{"fg":2,"bold":true}],["             ",{}]],"28":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create another.",{}]],"29":[["\"                                                                             ",{}]],"30":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are many types of errors in Ruby. Let's create another.",{"fg":2}],["\"",{"fg":2,"bold":true}],["            ",{}]],"31":[["[16] pry(main)> square                                                        ",{}]],"32":[["ArgumentError: wrong number of arguments (0 for 1)                            ",{}]],"33":[["from (pry):10:in `square'                                                     ",{}]],"34":[["[17] pry(main)> \"Here, you can see that I did not include enough arguments to ",{}]],"35":[["the function 'square'.\"                                                       ",{}]],"36":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, you can see that I did not include enough arguments to the function ",{"fg":2}]],"37":[["'square'.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{"fg":2}]],"38":[["[18] pry(main)> \"Now try defining some functions on your own! For example, let",{}]],"39":[["'s write a function called to_the_nth that takes two arguments: a base and a p",{}]],"40":[["ower:\"                                                                        ",{}]],"41":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Now try defining some functions on your own! For example, let's write a fu",{"fg":2}]],"42":[["nction called to_the_nth that takes two arguments: a base and a power:",{"fg":2}],["\"",{"fg":2,"bold":true}],["       ",{"fg":2}]],"43":[["[19] pry(main)> def to_the_nth(base, power)                                   ",{}]],"44":[["[19] pry(main)*   base**power                                                 ",{}]],"45":[["[19] pry(main)* end                                                           ",{}]],"46":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"47":[["[20] pry(main)>                                                               ",{}]]},"cursor":{"x":16}}],[2.036614,{"lines":{"47":[["[20] pry(main)> \"                                                             ",{}]]},"cursor":{"x":17}}],[3.159774,{"lines":{"47":[["[20] pry(main)>                                                               ",{}]]},"cursor":{"x":16}}],[0.608162,{"lines":{"47":[["[20] pry(main)> \"                                                             ",{}]]},"cursor":{"x":17}}],[0.280033,{"lines":{"47":[["[20] pry(main)> \"N                                                            ",{}]]},"cursor":{"x":18}}],[0.207979,{"lines":{"47":[["[20] pry(main)> \"No                                                           ",{}]]},"cursor":{"x":19}}],[0.096175,{"lines":{"47":[["[20] pry(main)> \"Now                                                          ",{}]]},"cursor":{"x":20}}],[0.087741,{"lines":{"47":[["[20] pry(main)> \"Now,                                                         ",{}]]},"cursor":{"x":21}}],[0.104018,{"cursor":{"x":22}}],[0.112004,{"lines":{"47":[["[20] pry(main)> \"Now, l                                                       ",{}]]},"cursor":{"x":23}}],[0.080092,{"lines":{"47":[["[20] pry(main)> \"Now, le                                                      ",{}]]},"cursor":{"x":24}}],[0.079902,{"lines":{"47":[["[20] pry(main)> \"Now, let                                                     ",{}]]},"cursor":{"x":25}}],[0.096037,{"lines":{"47":[["[20] pry(main)> \"Now, let'                                                    ",{}]]},"cursor":{"x":26}}],[0.112185,{"lines":{"47":[["[20] pry(main)> \"Now, let's                                                   ",{}]]},"cursor":{"x":27}}],[0.087829,{"cursor":{"x":28}}],[0.375705,{"lines":{"47":[["[20] pry(main)> \"Now, let's t                                                 ",{}]]},"cursor":{"x":29}}],[0.057424,{"lines":{"47":[["[20] pry(main)> \"Now, let's tr                                                ",{}]]},"cursor":{"x":30}}],[0.126831,{"lines":{"47":[["[20] pry(main)> \"Now, let's try                                               ",{}]]},"cursor":{"x":31}}],[0.047677,{"cursor":{"x":32}}],[0.576392,{"lines":{"47":[["[20] pry(main)> \"Now, let's try s                                             ",{}]]},"cursor":{"x":33}}],[0.159931,{"lines":{"47":[["[20] pry(main)> \"Now, let's try sq                                            ",{}]]},"cursor":{"x":34}}],[0.111902,{"lines":{"47":[["[20] pry(main)> \"Now, let's try squ                                           ",{}]]},"cursor":{"x":35}}],[0.087892,{"lines":{"47":[["[20] pry(main)> \"Now, let's try squa                                          ",{}]]},"cursor":{"x":36}}],[0.07215299999999999,{"lines":{"47":[["[20] pry(main)> \"Now, let's try squar                                         ",{}]]},"cursor":{"x":37}}],[0.096037,{"lines":{"47":[["[20] pry(main)> \"Now, let's try squari                                        ",{}]]},"cursor":{"x":38}}],[0.031845,{"lines":{"47":[["[20] pry(main)> \"Now, let's try squarin                                       ",{}]]},"cursor":{"x":39}}],[0.104158,{"lines":{"47":[["[20] pry(main)> \"Now, let's try squaring                                      ",{}]]},"cursor":{"x":40}}],[0.063967,{"cursor":{"x":41}}],[0.288052,{"lines":{"47":[["[20] pry(main)> \"Now, let's try squaring t                                    ",{}]]},"cursor":{"x":42}}],[0.015933,{"lines":{"47":[["[20] pry(main)> \"Now, let's try squaring tw                                   ",{}]]},"cursor":{"x":43}}],[0.09575,{"lines":{"47":[["[20] pry(main)> \"Now, let's try squaring two                                  ",{}]]},"cursor":{"x":44}}],[0.240162,{"lines":{"47":[["[20] pry(main)> \"Now, let's try squaring two.                                 ",{}]]},"cursor":{"x":45}}],[0.375959,{"lines":{"47":[["[20] pry(main)> \"Now, let's try squaring two.\"                                ",{}]]},"cursor":{"x":46}}],[0.392071,{"lines":{"0":[["[6] pry(main)> \"Here, the method is called 'a'. It is equivalent to writing th",{}]],"1":[["e following math function: a() = 5.\"                                          ",{}]],"2":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, the method is called 'a'. It is equivalent to writing the following ",{"fg":2}]],"3":[["math function: a() = 5.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                      ",{}]],"4":[["[7] pry(main)> \"Let's write a method that takes an argument.\"                 ",{}]],"5":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Let's write a method that takes an argument.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                             ",{}]],"6":[["[8] pry(main)> def square(x)                                                  ",{}]],"7":[["[8] pry(main)*   return x**2                                                  ",{}]],"8":[["[8] pry(main)* end                                                            ",{}]],"9":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"10":[["[9] pry(main)> \"The method above, called 'square', is equivalent to the follow",{}]],"11":[["ing: square(x) = x^2.\"                                                        ",{}]],"12":[["=> ",{}],["\"",{"fg":2,"bold":true}],["The method above, called 'square', is equivalent to the following: square(",{"fg":2}]],"13":[["x) = x^2.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{}]],"14":[["[10] pry(main)> \"To call a method, simply write it like you would any math fun",{}]],"15":[["ction: \"                                                                      ",{}]],"16":[["=> ",{}],["\"",{"fg":2,"bold":true}],["To call a method, simply write it like you would any math function: ",{"fg":2}],["\"",{"fg":2,"bold":true}],["     ",{}]],"17":[["[11] pry(main)> square(2)                                                     ",{}]],"18":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"19":[["[12] pry(main)> squre(3)                                                      ",{}]],"20":[["NoMethodError: undefined method `squre' for main:Object                       ",{}]],"21":[["from (pry):16:in `<main>'                                                     ",{}]],"22":[["[13] pry(main)> square(3)                                                     ",{}]],"23":[["=> ",{}],["9",{"fg":4,"bold":true}],["                                                                          ",{}]],"24":[["[14] pry(main)> \"Notice the error when I typed a function that did not exist.\"",{}]],"25":[["                                                                              ",{}]],"26":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Notice the error when I typed a function that did not exist.",{"fg":2}],["\"",{"fg":2,"bold":true}],["             ",{}]],"27":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create another.",{}]],"28":[["\"                                                                             ",{}]],"29":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are many types of errors in Ruby. Let's create another.",{"fg":2}],["\"",{"fg":2,"bold":true}],["            ",{}]],"30":[["[16] pry(main)> square                                                        ",{}]],"31":[["ArgumentError: wrong number of arguments (0 for 1)                            ",{}]],"32":[["from (pry):10:in `square'                                                     ",{}]],"33":[["[17] pry(main)> \"Here, you can see that I did not include enough arguments to ",{}]],"34":[["the function 'square'.\"                                                       ",{}]],"35":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, you can see that I did not include enough arguments to the function ",{"fg":2}]],"36":[["'square'.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{"fg":2}]],"37":[["[18] pry(main)> \"Now try defining some functions on your own! For example, let",{}]],"38":[["'s write a function called to_the_nth that takes two arguments: a base and a p",{}]],"39":[["ower:\"                                                                        ",{}]],"40":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Now try defining some functions on your own! For example, let's write a fu",{"fg":2}]],"41":[["nction called to_the_nth that takes two arguments: a base and a power:",{"fg":2}],["\"",{"fg":2,"bold":true}],["       ",{"fg":2}]],"42":[["[19] pry(main)> def to_the_nth(base, power)                                   ",{}]],"43":[["[19] pry(main)*   base**power                                                 ",{}]],"44":[["[19] pry(main)* end                                                           ",{}]],"45":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"46":[["[20] pry(main)> \"Now, let's try squaring two.\"                                ",{}]],"47":[["                                                                              ",{}]]},"cursor":{"x":0}}],[0.006821,{"lines":{"0":[["e following math function: a() = 5.\"                                          ",{}]],"1":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, the method is called 'a'. It is equivalent to writing the following ",{"fg":2}]],"2":[["math function: a() = 5.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                      ",{}]],"3":[["[7] pry(main)> \"Let's write a method that takes an argument.\"                 ",{}]],"4":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Let's write a method that takes an argument.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                             ",{}]],"5":[["[8] pry(main)> def square(x)                                                  ",{}]],"6":[["[8] pry(main)*   return x**2                                                  ",{}]],"7":[["[8] pry(main)* end                                                            ",{}]],"8":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"9":[["[9] pry(main)> \"The method above, called 'square', is equivalent to the follow",{}]],"10":[["ing: square(x) = x^2.\"                                                        ",{}]],"11":[["=> ",{}],["\"",{"fg":2,"bold":true}],["The method above, called 'square', is equivalent to the following: square(",{"fg":2}]],"12":[["x) = x^2.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{}]],"13":[["[10] pry(main)> \"To call a method, simply write it like you would any math fun",{}]],"14":[["ction: \"                                                                      ",{}]],"15":[["=> ",{}],["\"",{"fg":2,"bold":true}],["To call a method, simply write it like you would any math function: ",{"fg":2}],["\"",{"fg":2,"bold":true}],["     ",{}]],"16":[["[11] pry(main)> square(2)                                                     ",{}]],"17":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"18":[["[12] pry(main)> squre(3)                                                      ",{}]],"19":[["NoMethodError: undefined method `squre' for main:Object                       ",{}]],"20":[["from (pry):16:in `<main>'                                                     ",{}]],"21":[["[13] pry(main)> square(3)                                                     ",{}]],"22":[["=> ",{}],["9",{"fg":4,"bold":true}],["                                                                          ",{}]],"23":[["[14] pry(main)> \"Notice the error when I typed a function that did not exist.\"",{}]],"24":[["                                                                              ",{}]],"25":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Notice the error when I typed a function that did not exist.",{"fg":2}],["\"",{"fg":2,"bold":true}],["             ",{}]],"26":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create another.",{}]],"27":[["\"                                                                             ",{}]],"28":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are many types of errors in Ruby. Let's create another.",{"fg":2}],["\"",{"fg":2,"bold":true}],["            ",{}]],"29":[["[16] pry(main)> square                                                        ",{}]],"30":[["ArgumentError: wrong number of arguments (0 for 1)                            ",{}]],"31":[["from (pry):10:in `square'                                                     ",{}]],"32":[["[17] pry(main)> \"Here, you can see that I did not include enough arguments to ",{}]],"33":[["the function 'square'.\"                                                       ",{}]],"34":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, you can see that I did not include enough arguments to the function ",{"fg":2}]],"35":[["'square'.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{"fg":2}]],"36":[["[18] pry(main)> \"Now try defining some functions on your own! For example, let",{}]],"37":[["'s write a function called to_the_nth that takes two arguments: a base and a p",{}]],"38":[["ower:\"                                                                        ",{}]],"39":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Now try defining some functions on your own! For example, let's write a fu",{"fg":2}]],"40":[["nction called to_the_nth that takes two arguments: a base and a power:",{"fg":2}],["\"",{"fg":2,"bold":true}],["       ",{"fg":2}]],"41":[["[19] pry(main)> def to_the_nth(base, power)                                   ",{}]],"42":[["[19] pry(main)*   base**power                                                 ",{}]],"43":[["[19] pry(main)* end                                                           ",{}]],"44":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"45":[["[20] pry(main)> \"Now, let's try squaring two.\"                                ",{}]],"46":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Now, let's try squaring two.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                             ",{}]],"47":[["[21] pry(main)>                                                               ",{}]]},"cursor":{"x":16}}],[1.041221,{"lines":{"47":[["[21] pry(main)> t                                                             ",{}]]},"cursor":{"x":17}}],[0.07193099999999999,{"lines":{"47":[["[21] pry(main)> to                                                            ",{}]]},"cursor":{"x":18}}],[0.248029,{"lines":{"47":[["[21] pry(main)> to_                                                           ",{}]]},"cursor":{"x":19}}],[0.144021,{"lines":{"47":[["[21] pry(main)> to_t                                                          ",{}]]},"cursor":{"x":20}}],[0.063989,{"lines":{"47":[["[21] pry(main)> to_th                                                         ",{}]]},"cursor":{"x":21}}],[0.079932,{"lines":{"47":[["[21] pry(main)> to_the                                                        ",{}]]},"cursor":{"x":22}}],[0.480033,{"lines":{"47":[["[21] pry(main)> to_the_                                                       ",{}]]},"cursor":{"x":23}}],[0.191768,{"lines":{"47":[["[21] pry(main)> to_the_n                                                      ",{}]]},"cursor":{"x":24}}],[0.136251,{"lines":{"47":[["[21] pry(main)> to_the_nt                                                     ",{}]]},"cursor":{"x":25}}],[0.031826,{"lines":{"47":[["[21] pry(main)> to_the_nth                                                    ",{}]]},"cursor":{"x":26}}],[0.288172,{"lines":{"47":[["[21] pry(main)> to_the_nth(                                                   ",{}]]},"cursor":{"x":27}}],[0.184085,{"lines":{"47":[["[21] pry(main)> to_the_nth(2                                                  ",{}]]},"cursor":{"x":28}}],[0.135891,{"lines":{"47":[["[21] pry(main)> to_the_nth(2,                                                 ",{}]]},"cursor":{"x":29}}],[0.103994,{"cursor":{"x":30}}],[0.071975,{"lines":{"47":[["[21] pry(main)> to_the_nth(2, 2                                               ",{}]]},"cursor":{"x":31}}],[0.207904,{"lines":{"47":[["[21] pry(main)> to_the_nth(2, 2)                                              ",{}]]},"cursor":{"x":32}}],[0.208073,{"lines":{"0":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, the method is called 'a'. It is equivalent to writing the following ",{"fg":2}]],"1":[["math function: a() = 5.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                      ",{}]],"2":[["[7] pry(main)> \"Let's write a method that takes an argument.\"                 ",{}]],"3":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Let's write a method that takes an argument.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                             ",{}]],"4":[["[8] pry(main)> def square(x)                                                  ",{}]],"5":[["[8] pry(main)*   return x**2                                                  ",{}]],"6":[["[8] pry(main)* end                                                            ",{}]],"7":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"8":[["[9] pry(main)> \"The method above, called 'square', is equivalent to the follow",{}]],"9":[["ing: square(x) = x^2.\"                                                        ",{}]],"10":[["=> ",{}],["\"",{"fg":2,"bold":true}],["The method above, called 'square', is equivalent to the following: square(",{"fg":2}]],"11":[["x) = x^2.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{}]],"12":[["[10] pry(main)> \"To call a method, simply write it like you would any math fun",{}]],"13":[["ction: \"                                                                      ",{}]],"14":[["=> ",{}],["\"",{"fg":2,"bold":true}],["To call a method, simply write it like you would any math function: ",{"fg":2}],["\"",{"fg":2,"bold":true}],["     ",{}]],"15":[["[11] pry(main)> square(2)                                                     ",{}]],"16":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"17":[["[12] pry(main)> squre(3)                                                      ",{}]],"18":[["NoMethodError: undefined method `squre' for main:Object                       ",{}]],"19":[["from (pry):16:in `<main>'                                                     ",{}]],"20":[["[13] pry(main)> square(3)                                                     ",{}]],"21":[["=> ",{}],["9",{"fg":4,"bold":true}],["                                                                          ",{}]],"22":[["[14] pry(main)> \"Notice the error when I typed a function that did not exist.\"",{}]],"23":[["                                                                              ",{}]],"24":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Notice the error when I typed a function that did not exist.",{"fg":2}],["\"",{"fg":2,"bold":true}],["             ",{}]],"25":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create another.",{}]],"26":[["\"                                                                             ",{}]],"27":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are many types of errors in Ruby. Let's create another.",{"fg":2}],["\"",{"fg":2,"bold":true}],["            ",{}]],"28":[["[16] pry(main)> square                                                        ",{}]],"29":[["ArgumentError: wrong number of arguments (0 for 1)                            ",{}]],"30":[["from (pry):10:in `square'                                                     ",{}]],"31":[["[17] pry(main)> \"Here, you can see that I did not include enough arguments to ",{}]],"32":[["the function 'square'.\"                                                       ",{}]],"33":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, you can see that I did not include enough arguments to the function ",{"fg":2}]],"34":[["'square'.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{"fg":2}]],"35":[["[18] pry(main)> \"Now try defining some functions on your own! For example, let",{}]],"36":[["'s write a function called to_the_nth that takes two arguments: a base and a p",{}]],"37":[["ower:\"                                                                        ",{}]],"38":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Now try defining some functions on your own! For example, let's write a fu",{"fg":2}]],"39":[["nction called to_the_nth that takes two arguments: a base and a power:",{"fg":2}],["\"",{"fg":2,"bold":true}],["       ",{"fg":2}]],"40":[["[19] pry(main)> def to_the_nth(base, power)                                   ",{}]],"41":[["[19] pry(main)*   base**power                                                 ",{}]],"42":[["[19] pry(main)* end                                                           ",{}]],"43":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"44":[["[20] pry(main)> \"Now, let's try squaring two.\"                                ",{}]],"45":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Now, let's try squaring two.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                             ",{}]],"46":[["[21] pry(main)> to_the_nth(2, 2)                                              ",{}]],"47":[["                                                                              ",{}]]},"cursor":{"x":0}}],[0.003462,{"lines":{"0":[["math function: a() = 5.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                      ",{}]],"1":[["[7] pry(main)> \"Let's write a method that takes an argument.\"                 ",{}]],"2":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Let's write a method that takes an argument.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                             ",{}]],"3":[["[8] pry(main)> def square(x)                                                  ",{}]],"4":[["[8] pry(main)*   return x**2                                                  ",{}]],"5":[["[8] pry(main)* end                                                            ",{}]],"6":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"7":[["[9] pry(main)> \"The method above, called 'square', is equivalent to the follow",{}]],"8":[["ing: square(x) = x^2.\"                                                        ",{}]],"9":[["=> ",{}],["\"",{"fg":2,"bold":true}],["The method above, called 'square', is equivalent to the following: square(",{"fg":2}]],"10":[["x) = x^2.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{}]],"11":[["[10] pry(main)> \"To call a method, simply write it like you would any math fun",{}]],"12":[["ction: \"                                                                      ",{}]],"13":[["=> ",{}],["\"",{"fg":2,"bold":true}],["To call a method, simply write it like you would any math function: ",{"fg":2}],["\"",{"fg":2,"bold":true}],["     ",{}]],"14":[["[11] pry(main)> square(2)                                                     ",{}]],"15":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"16":[["[12] pry(main)> squre(3)                                                      ",{}]],"17":[["NoMethodError: undefined method `squre' for main:Object                       ",{}]],"18":[["from (pry):16:in `<main>'                                                     ",{}]],"19":[["[13] pry(main)> square(3)                                                     ",{}]],"20":[["=> ",{}],["9",{"fg":4,"bold":true}],["                                                                          ",{}]],"21":[["[14] pry(main)> \"Notice the error when I typed a function that did not exist.\"",{}]],"22":[["                                                                              ",{}]],"23":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Notice the error when I typed a function that did not exist.",{"fg":2}],["\"",{"fg":2,"bold":true}],["             ",{}]],"24":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create another.",{}]],"25":[["\"                                                                             ",{}]],"26":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are many types of errors in Ruby. Let's create another.",{"fg":2}],["\"",{"fg":2,"bold":true}],["            ",{}]],"27":[["[16] pry(main)> square                                                        ",{}]],"28":[["ArgumentError: wrong number of arguments (0 for 1)                            ",{}]],"29":[["from (pry):10:in `square'                                                     ",{}]],"30":[["[17] pry(main)> \"Here, you can see that I did not include enough arguments to ",{}]],"31":[["the function 'square'.\"                                                       ",{}]],"32":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, you can see that I did not include enough arguments to the function ",{"fg":2}]],"33":[["'square'.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{"fg":2}]],"34":[["[18] pry(main)> \"Now try defining some functions on your own! For example, let",{}]],"35":[["'s write a function called to_the_nth that takes two arguments: a base and a p",{}]],"36":[["ower:\"                                                                        ",{}]],"37":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Now try defining some functions on your own! For example, let's write a fu",{"fg":2}]],"38":[["nction called to_the_nth that takes two arguments: a base and a power:",{"fg":2}],["\"",{"fg":2,"bold":true}],["       ",{"fg":2}]],"39":[["[19] pry(main)> def to_the_nth(base, power)                                   ",{}]],"40":[["[19] pry(main)*   base**power                                                 ",{}]],"41":[["[19] pry(main)* end                                                           ",{}]],"42":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"43":[["[20] pry(main)> \"Now, let's try squaring two.\"                                ",{}]],"44":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Now, let's try squaring two.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                             ",{}]],"45":[["[21] pry(main)> to_the_nth(2, 2)                                              ",{}]],"46":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"47":[["[22] pry(main)>                                                               ",{}]]},"cursor":{"x":16}}],[2.46039,{"lines":{"47":[["[22] pry(main)> \"                                                             ",{}]]},"cursor":{"x":17}}],[0.312121,{"lines":{"47":[["[22] pry(main)> \"N                                                            ",{}]]},"cursor":{"x":18}}],[0.159985,{"lines":{"47":[["[22] pry(main)> \"No                                                           ",{}]]},"cursor":{"x":19}}],[0.07999199999999999,{"lines":{"47":[["[22] pry(main)> \"Not                                                          ",{}]]},"cursor":{"x":20}}],[0.120005,{"lines":{"47":[["[22] pry(main)> \"Noti                                                         ",{}]]},"cursor":{"x":21}}],[0.14402,{"lines":{"47":[["[22] pry(main)> \"Notic                                                        ",{}]]},"cursor":{"x":22}}],[0.047763,{"lines":{"47":[["[22] pry(main)> \"Notice                                                       ",{}]]},"cursor":{"x":23}}],[0.06437900000000001,{"cursor":{"x":24}}],[0.599828,{"lines":{"47":[["[22] pry(main)> \"Notice t                                                     ",{}]]},"cursor":{"x":25}}],[0.06392200000000001,{"lines":{"47":[["[22] pry(main)> \"Notice th                                                    ",{}]]},"cursor":{"x":26}}],[0.103872,{"lines":{"47":[["[22] pry(main)> \"Notice the                                                   ",{}]]},"cursor":{"x":27}}],[0.064079,{"lines":{"47":[["[22] pry(main)> \"Notice ther                                                  ",{}]]},"cursor":{"x":28}}],[0.143751,{"lines":{"47":[["[22] pry(main)> \"Notice there                                                 ",{}]]},"cursor":{"x":29}}],[0.104279,{"cursor":{"x":30}}],[0.135932,{"lines":{"47":[["[22] pry(main)> \"Notice there w                                               ",{}]]},"cursor":{"x":31}}],[0.104058,{"lines":{"47":[["[22] pry(main)> \"Notice there wa                                              ",{}]]},"cursor":{"x":32}}],[0.120089,{"lines":{"47":[["[22] pry(main)> \"Notice there was                                             ",{}]]},"cursor":{"x":33}}],[0.07997,{"cursor":{"x":34}}],[0.352101,{"lines":{"47":[["[22] pry(main)> \"Notice there was n                                           ",{}]]},"cursor":{"x":35}}],[0.231879,{"lines":{"47":[["[22] pry(main)> \"Notice there was no                                          ",{}]]},"cursor":{"x":36}}],[0.103991,{"cursor":{"x":37}}],[0.128013,{"lines":{"47":[["[22] pry(main)> \"Notice there was no r                                        ",{}]]},"cursor":{"x":38}}],[0.072023,{"lines":{"47":[["[22] pry(main)> \"Notice there was no re                                       ",{}]]},"cursor":{"x":39}}],[0.079959,{"lines":{"47":[["[22] pry(main)> \"Notice there was no ret                                      ",{}]]},"cursor":{"x":40}}],[0.09596499999999999,{"lines":{"47":[["[22] pry(main)> \"Notice there was no retu                                     ",{}]]},"cursor":{"x":41}}],[0.064111,{"lines":{"47":[["[22] pry(main)> \"Notice there was no retur                                    ",{}]]},"cursor":{"x":42}}],[0.103953,{"lines":{"47":[["[22] pry(main)> \"Notice there was no return                                   ",{}]]},"cursor":{"x":43}}],[0.096166,{"cursor":{"x":44}}],[0.167824,{"lines":{"47":[["[22] pry(main)> \"Notice there was no return s                                 ",{}]]},"cursor":{"x":45}}],[0.07195699999999999,{"lines":{"47":[["[22] pry(main)> \"Notice there was no return st                                ",{}]]},"cursor":{"x":46}}],[0.10401,{"lines":{"47":[["[22] pry(main)> \"Notice there was no return sta                               ",{}]]},"cursor":{"x":47}}],[0.08001900000000001,{"lines":{"47":[["[22] pry(main)> \"Notice there was no return stat                              ",{}]]},"cursor":{"x":48}}],[0.048092,{"lines":{"47":[["[22] pry(main)> \"Notice there was no return state                             ",{}]]},"cursor":{"x":49}}],[0.11985,{"lines":{"47":[["[22] pry(main)> \"Notice there was no return statem                            ",{}]]},"cursor":{"x":50}}],[0.096013,{"lines":{"47":[["[22] pry(main)> \"Notice there was no return stateme                           ",{}]]},"cursor":{"x":51}}],[0.072009,{"lines":{"47":[["[22] pry(main)> \"Notice there was no return statemen                          ",{}]]},"cursor":{"x":52}}],[0.08802599999999999,{"lines":{"47":[["[22] pry(main)> \"Notice there was no return statement                         ",{}]]},"cursor":{"x":53}}],[0.048053,{"cursor":{"x":54}}],[0.119725,{"lines":{"47":[["[22] pry(main)> \"Notice there was no return statement i                       ",{}]]},"cursor":{"x":55}}],[0.039981,{"lines":{"47":[["[22] pry(main)> \"Notice there was no return statement in                      ",{}]]},"cursor":{"x":56}}],[0.096127,{"cursor":{"x":57}}],[0.216087,{"lines":{"47":[["[22] pry(main)> \"Notice there was no return statement in m                    ",{}]]},"cursor":{"x":58}}],[0.151921,{"lines":{"47":[["[22] pry(main)> \"Notice there was no return statement in my                   ",{}]]},"cursor":{"x":59}}],[0.055886,{"cursor":{"x":60}}],[0.280003,{"lines":{"47":[["[22] pry(main)> \"Notice there was no return statement in my m                 ",{}]]},"cursor":{"x":61}}],[0.08816,{"lines":{"47":[["[22] pry(main)> \"Notice there was no return statement in my me                ",{}]]},"cursor":{"x":62}}],[0.03976,{"lines":{"47":[["[22] pry(main)> \"Notice there was no return statement in my met               ",{}]]},"cursor":{"x":63}}],[0.088073,{"lines":{"47":[["[22] pry(main)> \"Notice there was no return statement in my meth              ",{}]]},"cursor":{"x":64}}],[0.039974,{"lines":{"47":[["[22] pry(main)> \"Notice there was no return statement in my metho             ",{}]]},"cursor":{"x":65}}],[0.08813500000000001,{"lines":{"47":[["[22] pry(main)> \"Notice there was no return statement in my method            ",{}]]},"cursor":{"x":66}}],[0.119883,{"lines":{"47":[["[22] pry(main)> \"Notice there was no return statement in my method,           ",{}]]},"cursor":{"x":67}}],[0.048138,{"cursor":{"x":68}}],[0.135999,{"lines":{"47":[["[22] pry(main)> \"Notice there was no return statement in my method, b         ",{}]]},"cursor":{"x":69}}],[0.111969,{"lines":{"47":[["[22] pry(main)> \"Notice there was no return statement in my method, bu        ",{}]]},"cursor":{"x":70}}],[0.08006000000000001,{"lines":{"47":[["[22] pry(main)> \"Notice there was no return statement in my method, but       ",{}]]},"cursor":{"x":71}}],[0.04799,{"cursor":{"x":72}}],[0.128018,{"lines":{"47":[["[22] pry(main)> \"Notice there was no return statement in my method, but i     ",{}]]},"cursor":{"x":73}}],[0.079999,{"lines":{"47":[["[22] pry(main)> \"Notice there was no return statement in my method, but it    ",{}]]},"cursor":{"x":74}}],[0.080123,{"cursor":{"x":75}}],[0.159723,{"lines":{"47":[["[22] pry(main)> \"Notice there was no return statement in my method, but it s  ",{}]]},"cursor":{"x":76}}],[0.096105,{"lines":{"47":[["[22] pry(main)> \"Notice there was no return statement in my method, but it st ",{}]]},"cursor":{"x":77}}],[0.104029,{"lines":{"0":[["[7] pry(main)> \"Let's write a method that takes an argument.\"                 ",{}]],"1":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Let's write a method that takes an argument.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                             ",{}]],"2":[["[8] pry(main)> def square(x)                                                  ",{}]],"3":[["[8] pry(main)*   return x**2                                                  ",{}]],"4":[["[8] pry(main)* end                                                            ",{}]],"5":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"6":[["[9] pry(main)> \"The method above, called 'square', is equivalent to the follow",{}]],"7":[["ing: square(x) = x^2.\"                                                        ",{}]],"8":[["=> ",{}],["\"",{"fg":2,"bold":true}],["The method above, called 'square', is equivalent to the following: square(",{"fg":2}]],"9":[["x) = x^2.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{}]],"10":[["[10] pry(main)> \"To call a method, simply write it like you would any math fun",{}]],"11":[["ction: \"                                                                      ",{}]],"12":[["=> ",{}],["\"",{"fg":2,"bold":true}],["To call a method, simply write it like you would any math function: ",{"fg":2}],["\"",{"fg":2,"bold":true}],["     ",{}]],"13":[["[11] pry(main)> square(2)                                                     ",{}]],"14":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"15":[["[12] pry(main)> squre(3)                                                      ",{}]],"16":[["NoMethodError: undefined method `squre' for main:Object                       ",{}]],"17":[["from (pry):16:in `<main>'                                                     ",{}]],"18":[["[13] pry(main)> square(3)                                                     ",{}]],"19":[["=> ",{}],["9",{"fg":4,"bold":true}],["                                                                          ",{}]],"20":[["[14] pry(main)> \"Notice the error when I typed a function that did not exist.\"",{}]],"21":[["                                                                              ",{}]],"22":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Notice the error when I typed a function that did not exist.",{"fg":2}],["\"",{"fg":2,"bold":true}],["             ",{}]],"23":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create another.",{}]],"24":[["\"                                                                             ",{}]],"25":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are many types of errors in Ruby. Let's create another.",{"fg":2}],["\"",{"fg":2,"bold":true}],["            ",{}]],"26":[["[16] pry(main)> square                                                        ",{}]],"27":[["ArgumentError: wrong number of arguments (0 for 1)                            ",{}]],"28":[["from (pry):10:in `square'                                                     ",{}]],"29":[["[17] pry(main)> \"Here, you can see that I did not include enough arguments to ",{}]],"30":[["the function 'square'.\"                                                       ",{}]],"31":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, you can see that I did not include enough arguments to the function ",{"fg":2}]],"32":[["'square'.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{"fg":2}]],"33":[["[18] pry(main)> \"Now try defining some functions on your own! For example, let",{}]],"34":[["'s write a function called to_the_nth that takes two arguments: a base and a p",{}]],"35":[["ower:\"                                                                        ",{}]],"36":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Now try defining some functions on your own! For example, let's write a fu",{"fg":2}]],"37":[["nction called to_the_nth that takes two arguments: a base and a power:",{"fg":2}],["\"",{"fg":2,"bold":true}],["       ",{"fg":2}]],"38":[["[19] pry(main)> def to_the_nth(base, power)                                   ",{}]],"39":[["[19] pry(main)*   base**power                                                 ",{}]],"40":[["[19] pry(main)* end                                                           ",{}]],"41":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"42":[["[20] pry(main)> \"Now, let's try squaring two.\"                                ",{}]],"43":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Now, let's try squaring two.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                             ",{}]],"44":[["[21] pry(main)> to_the_nth(2, 2)                                              ",{}]],"45":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"46":[["[22] pry(main)> \"Notice there was no return statement in my method, but it sti",{}]],"47":[["                                                                              ",{}]]},"cursor":{"x":0}}],[0.047647,{"lines":{"47":[["l                                                                             ",{}]]},"cursor":{"x":1}}],[0.160351,{"lines":{"47":[["ll                                                                            ",{}]]},"cursor":{"x":2}}],[0.136008,{"cursor":{"x":3}}],[0.296005,{"lines":{"47":[["ll r                                                                          ",{}]]},"cursor":{"x":4}}],[0.071719,{"lines":{"47":[["ll re                                                                         ",{}]]},"cursor":{"x":5}}],[0.080122,{"lines":{"47":[["ll ret                                                                        ",{}]]},"cursor":{"x":6}}],[0.088078,{"lines":{"47":[["ll retu                                                                       ",{}]]},"cursor":{"x":7}}],[0.08798300000000001,{"lines":{"47":[["ll retur                                                                      ",{}]]},"cursor":{"x":8}}],[0.08788,{"lines":{"47":[["ll return                                                                     ",{}]]},"cursor":{"x":9}}],[0.104036,{"lines":{"47":[["ll returne                                                                    ",{}]]},"cursor":{"x":10}}],[0.112107,{"lines":{"47":[["ll returned                                                                   ",{}]]},"cursor":{"x":11}}],[0.079996,{"cursor":{"x":12}}],[0.54406,{"lines":{"47":[["ll returned t                                                                 ",{}]]},"cursor":{"x":13}}],[0.055744,{"lines":{"47":[["ll returned th                                                                ",{}]]},"cursor":{"x":14}}],[0.088171,{"lines":{"47":[["ll returned the                                                               ",{}]]},"cursor":{"x":15}}],[0.080009,{"cursor":{"x":16}}],[0.10405,{"lines":{"47":[["ll returned the v                                                             ",{}]]},"cursor":{"x":17}}],[0.079806,{"lines":{"47":[["ll returned the va                                                            ",{}]]},"cursor":{"x":18}}],[0.06413099999999999,{"lines":{"47":[["ll returned the val                                                           ",{}]]},"cursor":{"x":19}}],[0.047838,{"lines":{"47":[["ll returned the valu                                                          ",{}]]},"cursor":{"x":20}}],[0.112181,{"lines":{"47":[["ll returned the value                                                         ",{}]]},"cursor":{"x":21}}],[0.055711,{"cursor":{"x":22}}],[0.29625,{"lines":{"47":[["ll returned the value I                                                       ",{}]]},"cursor":{"x":23}}],[0.104024,{"cursor":{"x":24}}],[0.287914,{"lines":{"47":[["ll returned the value I e                                                     ",{}]]},"cursor":{"x":25}}],[0.07197099999999999,{"lines":{"47":[["ll returned the value I es                                                    ",{}]]},"cursor":{"x":26}}],[0.095876,{"lines":{"47":[["ll returned the value I esp                                                   ",{}]]},"cursor":{"x":27}}],[0.296051,{"lines":{"47":[["ll returned the value I es                                                    ",{}]]},"cursor":{"x":26}}],[0.136073,{"lines":{"47":[["ll returned the value I e                                                     ",{}]]},"cursor":{"x":25}}],[0.111907,{"lines":{"47":[["ll returned the value I ee                                                    ",{}]]},"cursor":{"x":26}}],[0.072056,{"lines":{"47":[["ll returned the value I eex                                                   ",{}]]},"cursor":{"x":27}}],[0.311972,{"lines":{"47":[["ll returned the value I ee                                                    ",{}]]},"cursor":{"x":26}}],[0.119881,{"lines":{"47":[["ll returned the value I e                                                     ",{}]]},"cursor":{"x":25}}],[0.080277,{"lines":{"47":[["ll returned the value I ex                                                    ",{}]]},"cursor":{"x":26}}],[0.09569999999999999,{"lines":{"47":[["ll returned the value I exp                                                   ",{}]]},"cursor":{"x":27}}],[0.080266,{"lines":{"47":[["ll returned the value I expe                                                  ",{}]]},"cursor":{"x":28}}],[0.072017,{"lines":{"47":[["ll returned the value I expec                                                 ",{}]]},"cursor":{"x":29}}],[0.183954,{"lines":{"47":[["ll returned the value I expect                                                ",{}]]},"cursor":{"x":30}}],[0.071994,{"lines":{"47":[["ll returned the value I expecte                                               ",{}]]},"cursor":{"x":31}}],[0.119897,{"lines":{"47":[["ll returned the value I expectef                                              ",{}]]},"cursor":{"x":32}}],[0.08813,{"lines":{"47":[["ll returned the value I expectef.                                             ",{}]]},"cursor":{"x":33}}],[0.2879,{"lines":{"47":[["ll returned the value I expectef                                              ",{}]]},"cursor":{"x":32}}],[0.304091,{"lines":{"47":[["ll returned the value I expectefd                                             ",{}]]},"cursor":{"x":33}}],[0.30374,{"lines":{"47":[["ll returned the value I expectef                                              ",{}]]},"cursor":{"x":32}}],[0.112107,{"lines":{"47":[["ll returned the value I expecte                                               ",{}]]},"cursor":{"x":31}}],[0.184173,{"lines":{"47":[["ll returned the value I expected                                              ",{}]]},"cursor":{"x":32}}],[0.055894,{"lines":{"47":[["ll returned the value I expected.                                             ",{}]]},"cursor":{"x":33}}],[0.151929,{"cursor":{"x":34}}],[0.096132,{"lines":{"47":[["ll returned the value I expected. t                                           ",{}]]},"cursor":{"x":35}}],[0.09596300000000001,{"lines":{"47":[["ll returned the value I expected. th                                          ",{}]]},"cursor":{"x":36}}],[0.191796,{"lines":{"47":[["ll returned the value I expected. t                                           ",{}]]},"cursor":{"x":35}}],[0.12016,{"lines":{"47":[["ll returned the value I expected.                                             ",{}]]},"cursor":{"x":34}}],[0.192067,{"lines":{"47":[["ll returned the value I expected. T                                           ",{}]]},"cursor":{"x":35}}],[0.127931,{"lines":{"47":[["ll returned the value I expected. Th                                          ",{}]]},"cursor":{"x":36}}],[0.07181899999999999,{"lines":{"47":[["ll returned the value I expected. Thi                                         ",{}]]},"cursor":{"x":37}}],[0.07224,{"lines":{"47":[["ll returned the value I expected. This                                        ",{}]]},"cursor":{"x":38}}],[0.06414400000000001,{"cursor":{"x":39}}],[0.063461,{"lines":{"47":[["ll returned the value I expected. This i                                      ",{}]]},"cursor":{"x":40}}],[0.0641,{"lines":{"47":[["ll returned the value I expected. This is                                     ",{}]]},"cursor":{"x":41}}],[0.064342,{"cursor":{"x":42}}],[0.151912,{"lines":{"47":[["ll returned the value I expected. This is b                                   ",{}]]},"cursor":{"x":43}}],[0.176021,{"lines":{"47":[["ll returned the value I expected. This is be                                  ",{}]]},"cursor":{"x":44}}],[0.111923,{"lines":{"47":[["ll returned the value I expected. This is bec                                 ",{}]]},"cursor":{"x":45}}],[0.096091,{"lines":{"47":[["ll returned the value I expected. This is beca                                ",{}]]},"cursor":{"x":46}}],[0.527957,{"lines":{"47":[["ll returned the value I expected. This is becau                               ",{}]]},"cursor":{"x":47}}],[0.023618,{"lines":{"47":[["ll returned the value I expected. This is becaus                              ",{}]]},"cursor":{"x":48}}],[0.040209,{"lines":{"47":[["ll returned the value I expected. This is because                             ",{}]]},"cursor":{"x":49}}],[0.064099,{"cursor":{"x":50}}],[1.696343,{"lines":{"47":[["ll returned the value I expected. This is because R                           ",{}]]},"cursor":{"x":51}}],[0.167678,{"lines":{"47":[["ll returned the value I expected. This is because Ru                          ",{}]]},"cursor":{"x":52}}],[0.048078,{"lines":{"47":[["ll returned the value I expected. This is because Rub                         ",{}]]},"cursor":{"x":53}}],[0.047912,{"lines":{"47":[["ll returned the value I expected. This is because Ruby                        ",{}]]},"cursor":{"x":54}}],[0.096016,{"cursor":{"x":55}}],[0.127984,{"lines":{"47":[["ll returned the value I expected. This is because Ruby a                      ",{}]]},"cursor":{"x":56}}],[0.095761,{"lines":{"47":[["ll returned the value I expected. This is because Ruby au                     ",{}]]},"cursor":{"x":57}}],[0.07242999999999999,{"lines":{"47":[["ll returned the value I expected. This is because Ruby aut                    ",{}]]},"cursor":{"x":58}}],[0.143818,{"lines":{"47":[["ll returned the value I expected. This is because Ruby auto                   ",{}]]},"cursor":{"x":59}}],[0.175902,{"lines":{"47":[["ll returned the value I expected. This is because Ruby autom                  ",{}]]},"cursor":{"x":60}}],[0.103877,{"lines":{"47":[["ll returned the value I expected. This is because Ruby automa                 ",{}]]},"cursor":{"x":61}}],[0.047975,{"lines":{"47":[["ll returned the value I expected. This is because Ruby automat                ",{}]]},"cursor":{"x":62}}],[0.080251,{"lines":{"47":[["ll returned the value I expected. This is because Ruby automati               ",{}]]},"cursor":{"x":63}}],[0.127988,{"lines":{"47":[["ll returned the value I expected. This is because Ruby automatic              ",{}]]},"cursor":{"x":64}}],[0.183975,{"lines":{"47":[["ll returned the value I expected. This is because Ruby automatica             ",{}]]},"cursor":{"x":65}}],[0.111921,{"lines":{"47":[["ll returned the value I expected. This is because Ruby automatical            ",{}]]},"cursor":{"x":66}}],[0.111951,{"lines":{"47":[["ll returned the value I expected. This is because Ruby automaticall           ",{}]]},"cursor":{"x":67}}],[0.104141,{"lines":{"47":[["ll returned the value I expected. This is because Ruby automatically          ",{}]]},"cursor":{"x":68}}],[0.08798300000000001,{"cursor":{"x":69}}],[0.239998,{"lines":{"47":[["ll returned the value I expected. This is because Ruby automatically r        ",{}]]},"cursor":{"x":70}}],[0.064177,{"lines":{"47":[["ll returned the value I expected. This is because Ruby automatically re       ",{}]]},"cursor":{"x":71}}],[0.103637,{"lines":{"47":[["ll returned the value I expected. This is because Ruby automatically ret      ",{}]]},"cursor":{"x":72}}],[0.056118,{"lines":{"47":[["ll returned the value I expected. This is because Ruby automatically retu     ",{}]]},"cursor":{"x":73}}],[0.120057,{"lines":{"47":[["ll returned the value I expected. This is because Ruby automatically retur    ",{}]]},"cursor":{"x":74}}],[0.047954,{"lines":{"47":[["ll returned the value I expected. This is because Ruby automatically return   ",{}]]},"cursor":{"x":75}}],[0.136077,{"lines":{"47":[["ll returned the value I expected. This is because Ruby automatically returns  ",{}]]},"cursor":{"x":76}}],[0.063855,{"cursor":{"x":77}}],[0.144085,{"lines":{"0":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Let's write a method that takes an argument.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                             ",{}]],"1":[["[8] pry(main)> def square(x)                                                  ",{}]],"2":[["[8] pry(main)*   return x**2                                                  ",{}]],"3":[["[8] pry(main)* end                                                            ",{}]],"4":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"5":[["[9] pry(main)> \"The method above, called 'square', is equivalent to the follow",{}]],"6":[["ing: square(x) = x^2.\"                                                        ",{}]],"7":[["=> ",{}],["\"",{"fg":2,"bold":true}],["The method above, called 'square', is equivalent to the following: square(",{"fg":2}]],"8":[["x) = x^2.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{}]],"9":[["[10] pry(main)> \"To call a method, simply write it like you would any math fun",{}]],"10":[["ction: \"                                                                      ",{}]],"11":[["=> ",{}],["\"",{"fg":2,"bold":true}],["To call a method, simply write it like you would any math function: ",{"fg":2}],["\"",{"fg":2,"bold":true}],["     ",{}]],"12":[["[11] pry(main)> square(2)                                                     ",{}]],"13":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"14":[["[12] pry(main)> squre(3)                                                      ",{}]],"15":[["NoMethodError: undefined method `squre' for main:Object                       ",{}]],"16":[["from (pry):16:in `<main>'                                                     ",{}]],"17":[["[13] pry(main)> square(3)                                                     ",{}]],"18":[["=> ",{}],["9",{"fg":4,"bold":true}],["                                                                          ",{}]],"19":[["[14] pry(main)> \"Notice the error when I typed a function that did not exist.\"",{}]],"20":[["                                                                              ",{}]],"21":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Notice the error when I typed a function that did not exist.",{"fg":2}],["\"",{"fg":2,"bold":true}],["             ",{}]],"22":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create another.",{}]],"23":[["\"                                                                             ",{}]],"24":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are many types of errors in Ruby. Let's create another.",{"fg":2}],["\"",{"fg":2,"bold":true}],["            ",{}]],"25":[["[16] pry(main)> square                                                        ",{}]],"26":[["ArgumentError: wrong number of arguments (0 for 1)                            ",{}]],"27":[["from (pry):10:in `square'                                                     ",{}]],"28":[["[17] pry(main)> \"Here, you can see that I did not include enough arguments to ",{}]],"29":[["the function 'square'.\"                                                       ",{}]],"30":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, you can see that I did not include enough arguments to the function ",{"fg":2}]],"31":[["'square'.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{"fg":2}]],"32":[["[18] pry(main)> \"Now try defining some functions on your own! For example, let",{}]],"33":[["'s write a function called to_the_nth that takes two arguments: a base and a p",{}]],"34":[["ower:\"                                                                        ",{}]],"35":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Now try defining some functions on your own! For example, let's write a fu",{"fg":2}]],"36":[["nction called to_the_nth that takes two arguments: a base and a power:",{"fg":2}],["\"",{"fg":2,"bold":true}],["       ",{"fg":2}]],"37":[["[19] pry(main)> def to_the_nth(base, power)                                   ",{}]],"38":[["[19] pry(main)*   base**power                                                 ",{}]],"39":[["[19] pry(main)* end                                                           ",{}]],"40":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"41":[["[20] pry(main)> \"Now, let's try squaring two.\"                                ",{}]],"42":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Now, let's try squaring two.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                             ",{}]],"43":[["[21] pry(main)> to_the_nth(2, 2)                                              ",{}]],"44":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"45":[["[22] pry(main)> \"Notice there was no return statement in my method, but it sti",{}]],"46":[["ll returned the value I expected. This is because Ruby automatically returns t",{}]],"47":[["                                                                              ",{}]]},"cursor":{"x":0}}],[0.052139,{"lines":{"47":[["h                                                                             ",{}]]},"cursor":{"x":1}}],[0.123844,{"lines":{"47":[["he                                                                            ",{}]]},"cursor":{"x":2}}],[0.2638,{"lines":{"47":[["h                                                                             ",{}]]},"cursor":{"x":1}}],[0.351745,{"lines":{"47":[["he                                                                            ",{}]]},"cursor":{"x":2}}],[0.088454,{"cursor":{"x":3}}],[0.199926,{"lines":{"47":[["he l                                                                          ",{}]]},"cursor":{"x":4}}],[0.071772,{"lines":{"47":[["he la                                                                         ",{}]]},"cursor":{"x":5}}],[0.064273,{"lines":{"47":[["he las                                                                        ",{}]]},"cursor":{"x":6}}],[0.087988,{"lines":{"47":[["he last                                                                       ",{}]]},"cursor":{"x":7}}],[0.023909,{"cursor":{"x":8}}],[0.200175,{"lines":{"47":[["he last t                                                                     ",{}]]},"cursor":{"x":9}}],[0.039898,{"lines":{"47":[["he last th                                                                    ",{}]]},"cursor":{"x":10}}],[0.064056,{"lines":{"47":[["he last thi                                                                   ",{}]]},"cursor":{"x":11}}],[0.039674,{"lines":{"47":[["he last thin                                                                  ",{}]]},"cursor":{"x":12}}],[0.072335,{"lines":{"47":[["he last thing                                                                 ",{}]]},"cursor":{"x":13}}],[0.055968,{"cursor":{"x":14}}],[0.159787,{"lines":{"47":[["he last thing e                                                               ",{}]]},"cursor":{"x":15}}],[0.08809,{"lines":{"47":[["he last thing ev                                                              ",{}]]},"cursor":{"x":16}}],[0.199919,{"lines":{"47":[["he last thing eva                                                             ",{}]]},"cursor":{"x":17}}],[0.12816,{"lines":{"47":[["he last thing eval                                                            ",{}]]},"cursor":{"x":18}}],[0.08784400000000001,{"lines":{"47":[["he last thing evalu                                                           ",{}]]},"cursor":{"x":19}}],[0.432105,{"lines":{"47":[["he last thing evalua                                                          ",{}]]},"cursor":{"x":20}}],[0.072089,{"lines":{"47":[["he last thing evaluat                                                         ",{}]]},"cursor":{"x":21}}],[0.127817,{"lines":{"47":[["he last thing evaluate                                                        ",{}]]},"cursor":{"x":22}}],[0.096196,{"lines":{"47":[["he last thing evaluated                                                       ",{}]]},"cursor":{"x":23}}],[0.055772,{"cursor":{"x":24}}],[0.248136,{"lines":{"47":[["he last thing evaluated i                                                     ",{}]]},"cursor":{"x":25}}],[0.024051,{"lines":{"47":[["he last thing evaluated in                                                    ",{}]]},"cursor":{"x":26}}],[0.047887,{"cursor":{"x":27}}],[0.11209,{"lines":{"47":[["he last thing evaluated in t                                                  ",{}]]},"cursor":{"x":28}}],[0.056013,{"lines":{"47":[["he last thing evaluated in th                                                 ",{}]]},"cursor":{"x":29}}],[0.096001,{"lines":{"47":[["he last thing evaluated in the                                                ",{}]]},"cursor":{"x":30}}],[0.08797199999999999,{"cursor":{"x":31}}],[0.039856,{"lines":{"47":[["he last thing evaluated in the m                                              ",{}]]},"cursor":{"x":32}}],[0.104138,{"lines":{"47":[["he last thing evaluated in the me                                             ",{}]]},"cursor":{"x":33}}],[0.031836,{"lines":{"47":[["he last thing evaluated in the met                                            ",{}]]},"cursor":{"x":34}}],[0.040013,{"lines":{"47":[["he last thing evaluated in the meth                                           ",{}]]},"cursor":{"x":35}}],[0.048146,{"lines":{"47":[["he last thing evaluated in the metho                                          ",{}]]},"cursor":{"x":36}}],[0.127998,{"lines":{"47":[["he last thing evaluated in the method                                         ",{}]]},"cursor":{"x":37}}],[0.11194,{"lines":{"47":[["he last thing evaluated in the method.                                        ",{}]]},"cursor":{"x":38}}],[0.344108,{"lines":{"47":[["he last thing evaluated in the method.\"                                       ",{}]]},"cursor":{"x":39}}],[0.375856,{"lines":{"0":[["[8] pry(main)> def square(x)                                                  ",{}]],"1":[["[8] pry(main)*   return x**2                                                  ",{}]],"2":[["[8] pry(main)* end                                                            ",{}]],"3":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"4":[["[9] pry(main)> \"The method above, called 'square', is equivalent to the follow",{}]],"5":[["ing: square(x) = x^2.\"                                                        ",{}]],"6":[["=> ",{}],["\"",{"fg":2,"bold":true}],["The method above, called 'square', is equivalent to the following: square(",{"fg":2}]],"7":[["x) = x^2.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{}]],"8":[["[10] pry(main)> \"To call a method, simply write it like you would any math fun",{}]],"9":[["ction: \"                                                                      ",{}]],"10":[["=> ",{}],["\"",{"fg":2,"bold":true}],["To call a method, simply write it like you would any math function: ",{"fg":2}],["\"",{"fg":2,"bold":true}],["     ",{}]],"11":[["[11] pry(main)> square(2)                                                     ",{}]],"12":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"13":[["[12] pry(main)> squre(3)                                                      ",{}]],"14":[["NoMethodError: undefined method `squre' for main:Object                       ",{}]],"15":[["from (pry):16:in `<main>'                                                     ",{}]],"16":[["[13] pry(main)> square(3)                                                     ",{}]],"17":[["=> ",{}],["9",{"fg":4,"bold":true}],["                                                                          ",{}]],"18":[["[14] pry(main)> \"Notice the error when I typed a function that did not exist.\"",{}]],"19":[["                                                                              ",{}]],"20":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Notice the error when I typed a function that did not exist.",{"fg":2}],["\"",{"fg":2,"bold":true}],["             ",{}]],"21":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create another.",{}]],"22":[["\"                                                                             ",{}]],"23":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are many types of errors in Ruby. Let's create another.",{"fg":2}],["\"",{"fg":2,"bold":true}],["            ",{}]],"24":[["[16] pry(main)> square                                                        ",{}]],"25":[["ArgumentError: wrong number of arguments (0 for 1)                            ",{}]],"26":[["from (pry):10:in `square'                                                     ",{}]],"27":[["[17] pry(main)> \"Here, you can see that I did not include enough arguments to ",{}]],"28":[["the function 'square'.\"                                                       ",{}]],"29":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, you can see that I did not include enough arguments to the function ",{"fg":2}]],"30":[["'square'.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{"fg":2}]],"31":[["[18] pry(main)> \"Now try defining some functions on your own! For example, let",{}]],"32":[["'s write a function called to_the_nth that takes two arguments: a base and a p",{}]],"33":[["ower:\"                                                                        ",{}]],"34":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Now try defining some functions on your own! For example, let's write a fu",{"fg":2}]],"35":[["nction called to_the_nth that takes two arguments: a base and a power:",{"fg":2}],["\"",{"fg":2,"bold":true}],["       ",{"fg":2}]],"36":[["[19] pry(main)> def to_the_nth(base, power)                                   ",{}]],"37":[["[19] pry(main)*   base**power                                                 ",{}]],"38":[["[19] pry(main)* end                                                           ",{}]],"39":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"40":[["[20] pry(main)> \"Now, let's try squaring two.\"                                ",{}]],"41":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Now, let's try squaring two.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                             ",{}]],"42":[["[21] pry(main)> to_the_nth(2, 2)                                              ",{}]],"43":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"44":[["[22] pry(main)> \"Notice there was no return statement in my method, but it sti",{}]],"45":[["ll returned the value I expected. This is because Ruby automatically returns t",{}]],"46":[["he last thing evaluated in the method.\"                                       ",{}]],"47":[["                                                                              ",{}]]},"cursor":{"x":0}}],[0.003489,{"lines":{"0":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"1":[["[9] pry(main)> \"The method above, called 'square', is equivalent to the follow",{}]],"2":[["ing: square(x) = x^2.\"                                                        ",{}]],"3":[["=> ",{}],["\"",{"fg":2,"bold":true}],["The method above, called 'square', is equivalent to the following: square(",{"fg":2}]],"4":[["x) = x^2.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{}]],"5":[["[10] pry(main)> \"To call a method, simply write it like you would any math fun",{}]],"6":[["ction: \"                                                                      ",{}]],"7":[["=> ",{}],["\"",{"fg":2,"bold":true}],["To call a method, simply write it like you would any math function: ",{"fg":2}],["\"",{"fg":2,"bold":true}],["     ",{}]],"8":[["[11] pry(main)> square(2)                                                     ",{}]],"9":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"10":[["[12] pry(main)> squre(3)                                                      ",{}]],"11":[["NoMethodError: undefined method `squre' for main:Object                       ",{}]],"12":[["from (pry):16:in `<main>'                                                     ",{}]],"13":[["[13] pry(main)> square(3)                                                     ",{}]],"14":[["=> ",{}],["9",{"fg":4,"bold":true}],["                                                                          ",{}]],"15":[["[14] pry(main)> \"Notice the error when I typed a function that did not exist.\"",{}]],"16":[["                                                                              ",{}]],"17":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Notice the error when I typed a function that did not exist.",{"fg":2}],["\"",{"fg":2,"bold":true}],["             ",{}]],"18":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create another.",{}]],"19":[["\"                                                                             ",{}]],"20":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are many types of errors in Ruby. Let's create another.",{"fg":2}],["\"",{"fg":2,"bold":true}],["            ",{}]],"21":[["[16] pry(main)> square                                                        ",{}]],"22":[["ArgumentError: wrong number of arguments (0 for 1)                            ",{}]],"23":[["from (pry):10:in `square'                                                     ",{}]],"24":[["[17] pry(main)> \"Here, you can see that I did not include enough arguments to ",{}]],"25":[["the function 'square'.\"                                                       ",{}]],"26":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, you can see that I did not include enough arguments to the function ",{"fg":2}]],"27":[["'square'.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{"fg":2}]],"28":[["[18] pry(main)> \"Now try defining some functions on your own! For example, let",{}]],"29":[["'s write a function called to_the_nth that takes two arguments: a base and a p",{}]],"30":[["ower:\"                                                                        ",{}]],"31":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Now try defining some functions on your own! For example, let's write a fu",{"fg":2}]],"32":[["nction called to_the_nth that takes two arguments: a base and a power:",{"fg":2}],["\"",{"fg":2,"bold":true}],["       ",{"fg":2}]],"33":[["[19] pry(main)> def to_the_nth(base, power)                                   ",{}]],"34":[["[19] pry(main)*   base**power                                                 ",{}]],"35":[["[19] pry(main)* end                                                           ",{}]],"36":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"37":[["[20] pry(main)> \"Now, let's try squaring two.\"                                ",{}]],"38":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Now, let's try squaring two.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                             ",{}]],"39":[["[21] pry(main)> to_the_nth(2, 2)                                              ",{}]],"40":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"41":[["[22] pry(main)> \"Notice there was no return statement in my method, but it sti",{}]],"42":[["ll returned the value I expected. This is because Ruby automatically returns t",{}]],"43":[["he last thing evaluated in the method.\"                                       ",{}]],"44":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Notice there was no return statement in my method, but it still returned t",{"fg":2}]],"45":[["he value I expected. This is because Ruby automatically returns the last thing",{"fg":2}]],"46":[[" evaluated in the method.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                    ",{"fg":2}]],"47":[["[23] pry(main)>                                                               ",{}]]},"cursor":{"x":16}}],[1.308532,{"lines":{"47":[["[23] pry(main)> e                                                             ",{}]]},"cursor":{"x":17}}],[0.072047,{"lines":{"47":[["[23] pry(main)> ex                                                            ",{}]]},"cursor":{"x":18}}],[0.047971,{"lines":{"47":[["[23] pry(main)> exi                                                           ",{}]]},"cursor":{"x":19}}],[0.279985,{"lines":{"47":[["[23] pry(main)> exit                                                          ",{}]]},"cursor":{"x":20}}],[0.159867,{"lines":{"0":[["[9] pry(main)> \"The method above, called 'square', is equivalent to the follow",{}]],"1":[["ing: square(x) = x^2.\"                                                        ",{}]],"2":[["=> ",{}],["\"",{"fg":2,"bold":true}],["The method above, called 'square', is equivalent to the following: square(",{"fg":2}]],"3":[["x) = x^2.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{}]],"4":[["[10] pry(main)> \"To call a method, simply write it like you would any math fun",{}]],"5":[["ction: \"                                                                      ",{}]],"6":[["=> ",{}],["\"",{"fg":2,"bold":true}],["To call a method, simply write it like you would any math function: ",{"fg":2}],["\"",{"fg":2,"bold":true}],["     ",{}]],"7":[["[11] pry(main)> square(2)                                                     ",{}]],"8":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"9":[["[12] pry(main)> squre(3)                                                      ",{}]],"10":[["NoMethodError: undefined method `squre' for main:Object                       ",{}]],"11":[["from (pry):16:in `<main>'                                                     ",{}]],"12":[["[13] pry(main)> square(3)                                                     ",{}]],"13":[["=> ",{}],["9",{"fg":4,"bold":true}],["                                                                          ",{}]],"14":[["[14] pry(main)> \"Notice the error when I typed a function that did not exist.\"",{}]],"15":[["                                                                              ",{}]],"16":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Notice the error when I typed a function that did not exist.",{"fg":2}],["\"",{"fg":2,"bold":true}],["             ",{}]],"17":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create another.",{}]],"18":[["\"                                                                             ",{}]],"19":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are many types of errors in Ruby. Let's create another.",{"fg":2}],["\"",{"fg":2,"bold":true}],["            ",{}]],"20":[["[16] pry(main)> square                                                        ",{}]],"21":[["ArgumentError: wrong number of arguments (0 for 1)                            ",{}]],"22":[["from (pry):10:in `square'                                                     ",{}]],"23":[["[17] pry(main)> \"Here, you can see that I did not include enough arguments to ",{}]],"24":[["the function 'square'.\"                                                       ",{}]],"25":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, you can see that I did not include enough arguments to the function ",{"fg":2}]],"26":[["'square'.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{"fg":2}]],"27":[["[18] pry(main)> \"Now try defining some functions on your own! For example, let",{}]],"28":[["'s write a function called to_the_nth that takes two arguments: a base and a p",{}]],"29":[["ower:\"                                                                        ",{}]],"30":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Now try defining some functions on your own! For example, let's write a fu",{"fg":2}]],"31":[["nction called to_the_nth that takes two arguments: a base and a power:",{"fg":2}],["\"",{"fg":2,"bold":true}],["       ",{"fg":2}]],"32":[["[19] pry(main)> def to_the_nth(base, power)                                   ",{}]],"33":[["[19] pry(main)*   base**power                                                 ",{}]],"34":[["[19] pry(main)* end                                                           ",{}]],"35":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"36":[["[20] pry(main)> \"Now, let's try squaring two.\"                                ",{}]],"37":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Now, let's try squaring two.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                             ",{}]],"38":[["[21] pry(main)> to_the_nth(2, 2)                                              ",{}]],"39":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"40":[["[22] pry(main)> \"Notice there was no return statement in my method, but it sti",{}]],"41":[["ll returned the value I expected. This is because Ruby automatically returns t",{}]],"42":[["he last thing evaluated in the method.\"                                       ",{}]],"43":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Notice there was no return statement in my method, but it still returned t",{"fg":2}]],"44":[["he value I expected. This is because Ruby automatically returns the last thing",{"fg":2}]],"45":[[" evaluated in the method.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                    ",{"fg":2}]],"46":[["[23] pry(main)> exit                                                          ",{}]],"47":[["                                                                              ",{}]]},"cursor":{"x":0}}],[0.022251,{"lines":{"47":[["bash-3.2$                                                                     ",{}]]},"cursor":{"x":10}}],[0.585896,{"lines":{"47":[["bash-3.2$ e                                                                   ",{}]]},"cursor":{"x":11}}],[0.055932,{"lines":{"47":[["bash-3.2$ ex                                                                  ",{}]]},"cursor":{"x":12}}],[0.088042,{"lines":{"47":[["bash-3.2$ exi                                                                 ",{}]]},"cursor":{"x":13}}],[0.128033,{"lines":{"47":[["bash-3.2$ exit                                                                ",{}]]},"cursor":{"x":14}}],[0.391908,{"lines":{"0":[["ing: square(x) = x^2.\"                                                        ",{}]],"1":[["=> ",{}],["\"",{"fg":2,"bold":true}],["The method above, called 'square', is equivalent to the following: square(",{"fg":2}]],"2":[["x) = x^2.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{}]],"3":[["[10] pry(main)> \"To call a method, simply write it like you would any math fun",{}]],"4":[["ction: \"                                                                      ",{}]],"5":[["=> ",{}],["\"",{"fg":2,"bold":true}],["To call a method, simply write it like you would any math function: ",{"fg":2}],["\"",{"fg":2,"bold":true}],["     ",{}]],"6":[["[11] pry(main)> square(2)                                                     ",{}]],"7":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"8":[["[12] pry(main)> squre(3)                                                      ",{}]],"9":[["NoMethodError: undefined method `squre' for main:Object                       ",{}]],"10":[["from (pry):16:in `<main>'                                                     ",{}]],"11":[["[13] pry(main)> square(3)                                                     ",{}]],"12":[["=> ",{}],["9",{"fg":4,"bold":true}],["                                                                          ",{}]],"13":[["[14] pry(main)> \"Notice the error when I typed a function that did not exist.\"",{}]],"14":[["                                                                              ",{}]],"15":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Notice the error when I typed a function that did not exist.",{"fg":2}],["\"",{"fg":2,"bold":true}],["             ",{}]],"16":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create another.",{}]],"17":[["\"                                                                             ",{}]],"18":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are many types of errors in Ruby. Let's create another.",{"fg":2}],["\"",{"fg":2,"bold":true}],["            ",{}]],"19":[["[16] pry(main)> square                                                        ",{}]],"20":[["ArgumentError: wrong number of arguments (0 for 1)                            ",{}]],"21":[["from (pry):10:in `square'                                                     ",{}]],"22":[["[17] pry(main)> \"Here, you can see that I did not include enough arguments to ",{}]],"23":[["the function 'square'.\"                                                       ",{}]],"24":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, you can see that I did not include enough arguments to the function ",{"fg":2}]],"25":[["'square'.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{"fg":2}]],"26":[["[18] pry(main)> \"Now try defining some functions on your own! For example, let",{}]],"27":[["'s write a function called to_the_nth that takes two arguments: a base and a p",{}]],"28":[["ower:\"                                                                        ",{}]],"29":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Now try defining some functions on your own! For example, let's write a fu",{"fg":2}]],"30":[["nction called to_the_nth that takes two arguments: a base and a power:",{"fg":2}],["\"",{"fg":2,"bold":true}],["       ",{"fg":2}]],"31":[["[19] pry(main)> def to_the_nth(base, power)                                   ",{}]],"32":[["[19] pry(main)*   base**power                                                 ",{}]],"33":[["[19] pry(main)* end                                                           ",{}]],"34":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"35":[["[20] pry(main)> \"Now, let's try squaring two.\"                                ",{}]],"36":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Now, let's try squaring two.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                             ",{}]],"37":[["[21] pry(main)> to_the_nth(2, 2)                                              ",{}]],"38":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"39":[["[22] pry(main)> \"Notice there was no return statement in my method, but it sti",{}]],"40":[["ll returned the value I expected. This is because Ruby automatically returns t",{}]],"41":[["he last thing evaluated in the method.\"                                       ",{}]],"42":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Notice there was no return statement in my method, but it still returned t",{"fg":2}]],"43":[["he value I expected. This is because Ruby automatically returns the last thing",{"fg":2}]],"44":[[" evaluated in the method.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                    ",{"fg":2}]],"45":[["[23] pry(main)> exit                                                          ",{}]],"46":[["bash-3.2$ exit                                                                ",{}]],"47":[["                                                                              ",{}]]},"cursor":{"x":0}}],[0.000267,{"lines":{"0":[["=> ",{}],["\"",{"fg":2,"bold":true}],["The method above, called 'square', is equivalent to the following: square(",{"fg":2}]],"1":[["x) = x^2.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{}]],"2":[["[10] pry(main)> \"To call a method, simply write it like you would any math fun",{}]],"3":[["ction: \"                                                                      ",{}]],"4":[["=> ",{}],["\"",{"fg":2,"bold":true}],["To call a method, simply write it like you would any math function: ",{"fg":2}],["\"",{"fg":2,"bold":true}],["     ",{}]],"5":[["[11] pry(main)> square(2)                                                     ",{}]],"6":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"7":[["[12] pry(main)> squre(3)                                                      ",{}]],"8":[["NoMethodError: undefined method `squre' for main:Object                       ",{}]],"9":[["from (pry):16:in `<main>'                                                     ",{}]],"10":[["[13] pry(main)> square(3)                                                     ",{}]],"11":[["=> ",{}],["9",{"fg":4,"bold":true}],["                                                                          ",{}]],"12":[["[14] pry(main)> \"Notice the error when I typed a function that did not exist.\"",{}]],"13":[["                                                                              ",{}]],"14":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Notice the error when I typed a function that did not exist.",{"fg":2}],["\"",{"fg":2,"bold":true}],["             ",{}]],"15":[["[15] pry(main)> \"There are many types of errors in Ruby. Let's create another.",{}]],"16":[["\"                                                                             ",{}]],"17":[["=> ",{}],["\"",{"fg":2,"bold":true}],["There are many types of errors in Ruby. Let's create another.",{"fg":2}],["\"",{"fg":2,"bold":true}],["            ",{}]],"18":[["[16] pry(main)> square                                                        ",{}]],"19":[["ArgumentError: wrong number of arguments (0 for 1)                            ",{}]],"20":[["from (pry):10:in `square'                                                     ",{}]],"21":[["[17] pry(main)> \"Here, you can see that I did not include enough arguments to ",{}]],"22":[["the function 'square'.\"                                                       ",{}]],"23":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Here, you can see that I did not include enough arguments to the function ",{"fg":2}]],"24":[["'square'.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                                    ",{"fg":2}]],"25":[["[18] pry(main)> \"Now try defining some functions on your own! For example, let",{}]],"26":[["'s write a function called to_the_nth that takes two arguments: a base and a p",{}]],"27":[["ower:\"                                                                        ",{}]],"28":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Now try defining some functions on your own! For example, let's write a fu",{"fg":2}]],"29":[["nction called to_the_nth that takes two arguments: a base and a power:",{"fg":2}],["\"",{"fg":2,"bold":true}],["       ",{"fg":2}]],"30":[["[19] pry(main)> def to_the_nth(base, power)                                   ",{}]],"31":[["[19] pry(main)*   base**power                                                 ",{}]],"32":[["[19] pry(main)* end                                                           ",{}]],"33":[["=> ",{}],["nil",{"fg":6,"bold":true}],["                                                                        ",{}]],"34":[["[20] pry(main)> \"Now, let's try squaring two.\"                                ",{}]],"35":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Now, let's try squaring two.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                             ",{}]],"36":[["[21] pry(main)> to_the_nth(2, 2)                                              ",{}]],"37":[["=> ",{}],["4",{"fg":4,"bold":true}],["                                                                          ",{}]],"38":[["[22] pry(main)> \"Notice there was no return statement in my method, but it sti",{}]],"39":[["ll returned the value I expected. This is because Ruby automatically returns t",{}]],"40":[["he last thing evaluated in the method.\"                                       ",{}]],"41":[["=> ",{}],["\"",{"fg":2,"bold":true}],["Notice there was no return statement in my method, but it still returned t",{"fg":2}]],"42":[["he value I expected. This is because Ruby automatically returns the last thing",{"fg":2}]],"43":[[" evaluated in the method.",{"fg":2}],["\"",{"fg":2,"bold":true}],["                                                    ",{"fg":2}]],"44":[["[23] pry(main)> exit                                                          ",{}]],"45":[["bash-3.2$ exit                                                                ",{}]],"46":[["exit                                                                          ",{}]]}}]]